// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"gitlab.com/verygoodsoftwarenotvirus/todo/database/v1"
	"gitlab.com/verygoodsoftwarenotvirus/todo/database/v1/client"
	"gitlab.com/verygoodsoftwarenotvirus/todo/database/v1/queriers/postgres"
	"gitlab.com/verygoodsoftwarenotvirus/todo/lib/auth/v1"
	"gitlab.com/verygoodsoftwarenotvirus/todo/lib/encoding/v1"
	"gitlab.com/verygoodsoftwarenotvirus/todo/lib/logging/v1/zerolog"
	"gitlab.com/verygoodsoftwarenotvirus/todo/lib/metrics/v1"
	"gitlab.com/verygoodsoftwarenotvirus/todo/lib/metrics/v1/prometheus"
	"gitlab.com/verygoodsoftwarenotvirus/todo/server/v1"
	"gitlab.com/verygoodsoftwarenotvirus/todo/services/v1/items"
	"gitlab.com/verygoodsoftwarenotvirus/todo/services/v1/oauth2clients"
	"gitlab.com/verygoodsoftwarenotvirus/todo/services/v1/users"
)

// Injectors from wire.go:

func BuildServer(connectionDetails database.ConnectionDetails, metricsNamespace metrics.Namespace, CookieSecret []byte, Debug bool) (*server.Server, error) {
	bcryptHashCost := auth.ProvideBcryptHashCost()
	logger := zerolog.ProvideZerologger()
	loggingLogger := zerolog.ProvideLogger(logger)
	tracer := auth.ProvideTracer()
	enticator := auth.ProvideBcrypt(bcryptHashCost, loggingLogger, tracer)
	db, err := postgres.ProvidePostgresDB(loggingLogger, connectionDetails)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := postgres.ProvidePostgres(Debug, db, loggingLogger, connectionDetails)
	if err != nil {
		return nil, err
	}
	userIDFetcher := server.ProvideUserIDFetcher()
	itemIDFetcher := server.ProvideItemIDFetcher()
	itemsTracer := items.ProvideItemsServiceTracer()
	responseEncoder := encoding.ProvideJSONResponseEncoder()
	service := items.ProvideItemsService(loggingLogger, databaseDatabase, userIDFetcher, itemIDFetcher, itemsTracer, responseEncoder)
	usernameFetcher := server.ProvideUsernameFetcher()
	usersTracer := users.ProvideUserServiceTracer()
	usersService := users.ProvideUsersService(CookieSecret, loggingLogger, databaseDatabase, enticator, usernameFetcher, usersTracer, responseEncoder)
	clientIDFetcher := server.ProvideOAuth2ServiceClientIDFetcher()
	oauth2clientsTracer := oauth2clients.ProvideOAuth2ClientsServiceTracer()
	oauth2clientsService := oauth2clients.ProvideOAuth2ClientsService(loggingLogger, databaseDatabase, enticator, clientIDFetcher, oauth2clientsTracer, responseEncoder)
	dbclientTracer := dbclient.ProvideTracer()
	client, err := dbclient.ProvideDatabaseClient(databaseDatabase, Debug, loggingLogger, dbclientTracer)
	if err != nil {
		return nil, err
	}
	serverTracer := server.ProvideServerTracer()
	httpServer := server.ProvideHTTPServer()
	handler := prometheus.ProvideMetricsHandler()
	middleware := prometheus.ProvideMiddleware()
	serverServer, err := server.ProvideServer(Debug, CookieSecret, enticator, service, usersService, oauth2clientsService, client, loggingLogger, serverTracer, httpServer, responseEncoder, handler, middleware)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"gitlab.com/verygoodsoftwarenotvirus/todo/auth"
	"gitlab.com/verygoodsoftwarenotvirus/todo/database/v1"
	"gitlab.com/verygoodsoftwarenotvirus/todo/database/v1/sqlite"
	"gitlab.com/verygoodsoftwarenotvirus/todo/lib/logging/v1/zerolog"
	"gitlab.com/verygoodsoftwarenotvirus/todo/server/v1"
	"gitlab.com/verygoodsoftwarenotvirus/todo/services/v1/items"
	"gitlab.com/verygoodsoftwarenotvirus/todo/services/v1/oauth2clients"
	"gitlab.com/verygoodsoftwarenotvirus/todo/services/v1/users"
	"gopkg.in/oauth2.v3/manage"
)

// Injectors from wire.go:

func BuildServer(connectionDetails database.ConnectionDetails, CertPair server.CertPair, CookieName users.CookieName, CookieSecret []byte, Debug bool) (*server.Server, error) {
	bcryptHashCost := auth.ProvideBcryptHashCost()
	logger := zerolog.ProvideZerologger()
	loggingLogger := zerolog.ProvideLogger(logger)
	tracer, err := auth.ProvideTracer()
	if err != nil {
		return nil, err
	}
	enticator := auth.ProvideBcrypt(bcryptHashCost, loggingLogger, tracer)
	sqliteTracer, err := sqlite.ProvideSqliteTracer()
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := sqlite.ProvideSqlite(Debug, loggingLogger, sqliteTracer, connectionDetails)
	if err != nil {
		return nil, err
	}
	userIDFetcher := server.ProvideUserIDFetcher()
	itemIDFetcher := server.ProvideItemIDFetcher()
	serviceTracer, err := items.ProvideItemsServiceTracer()
	if err != nil {
		return nil, err
	}
	service := items.ProvideItemsService(loggingLogger, databaseDatabase, userIDFetcher, itemIDFetcher, serviceTracer)
	usernameFetcher := server.ProvideUsernameFetcher()
	usersTracer, err := users.ProvideUserServiceTracer()
	if err != nil {
		return nil, err
	}
	usersService := users.ProvideUsersService(CookieName, loggingLogger, databaseDatabase, enticator, usernameFetcher, usersTracer)
	clientIDFetcher := server.ProvideClientIDFetcher()
	clientStore := server.ProvideClientStore()
	manager := manage.NewDefaultManager()
	tokenStore, err := server.ProvideTokenStore(manager)
	if err != nil {
		return nil, err
	}
	oauth2clientsTracer, err := oauth2clients.ProvideOAuth2ClientsServiceTracer()
	if err != nil {
		return nil, err
	}
	oauth2clientsService := oauth2clients.ProvideOAuth2ClientsService(loggingLogger, databaseDatabase, enticator, clientIDFetcher, clientStore, tokenStore, oauth2clientsTracer)
	serverTracer, err := server.ProvideServerTracer()
	if err != nil {
		return nil, err
	}
	httpServer := server.ProvideHTTPServer()
	serverServer := server.ProvideOAuth2Server(manager, tokenStore, clientStore)
	server2, err := server.ProvideServer(Debug, CertPair, CookieSecret, enticator, service, usersService, oauth2clientsService, databaseDatabase, loggingLogger, serverTracer, httpServer, serverServer, tokenStore, clientStore)
	if err != nil {
		return nil, err
	}
	return server2, nil
}

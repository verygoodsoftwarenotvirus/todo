// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"gitlab.com/verygoodsoftwarenotvirus/todo/auth"
	"gitlab.com/verygoodsoftwarenotvirus/todo/database/v1/client"
	"gitlab.com/verygoodsoftwarenotvirus/todo/lib/encoding/v1"
	"gitlab.com/verygoodsoftwarenotvirus/todo/lib/logging/v1/zerolog"
	"gitlab.com/verygoodsoftwarenotvirus/todo/lib/metrics/v1"
	"gitlab.com/verygoodsoftwarenotvirus/todo/lib/metrics/v1/prometheus"
	"gitlab.com/verygoodsoftwarenotvirus/todo/server/v1"
	"gitlab.com/verygoodsoftwarenotvirus/todo/services/v1/items"
	"gitlab.com/verygoodsoftwarenotvirus/todo/services/v1/oauth2clients"
	"gitlab.com/verygoodsoftwarenotvirus/todo/services/v1/users"
)

// Injectors from wire.go:

func BuildServer(connectionDetails string, CookieName users.CookieName, metricsNamespace metrics.Namespace, CookieSecret []byte, Debug bool) (*server.Server, error) {
	bcryptHashCost := auth.ProvideBcryptHashCost()
	logger := zerolog.ProvideZerologger()
	loggingLogger := zerolog.ProvideLogger(logger)
	tracer, err := auth.ProvideTracer()
	if err != nil {
		return nil, err
	}
	enticator := auth.ProvideBcrypt(bcryptHashCost, loggingLogger, tracer)
	dbclientTracer, err := dbclient.ProvideTracer()
	if err != nil {
		return nil, err
	}
	database, err := dbclient.ProvidePostgresDatabase(Debug, loggingLogger, connectionDetails, dbclientTracer)
	if err != nil {
		return nil, err
	}
	userIDFetcher := server.ProvideUserIDFetcher()
	itemIDFetcher := server.ProvideItemIDFetcher()
	serviceTracer, err := items.ProvideItemsServiceTracer()
	if err != nil {
		return nil, err
	}
	responseEncoder := encoding.ProvideJSONResponseEncoder()
	service := items.ProvideItemsService(loggingLogger, database, userIDFetcher, itemIDFetcher, serviceTracer, responseEncoder)
	usernameFetcher := server.ProvideUsernameFetcher()
	usersTracer, err := users.ProvideUserServiceTracer()
	if err != nil {
		return nil, err
	}
	usersService := users.ProvideUsersService(CookieName, loggingLogger, database, enticator, usernameFetcher, usersTracer, responseEncoder)
	clientIDFetcher := server.ProvideOAuth2ServiceClientIDFetcher()
	oauth2clientsUserIDFetcher := server.ProvideOAuth2ServiceUserIDFetcher()
	oauth2clientsTracer, err := oauth2clients.ProvideOAuth2ClientsServiceTracer()
	if err != nil {
		return nil, err
	}
	oauth2clientsService := oauth2clients.ProvideOAuth2ClientsService(loggingLogger, database, enticator, clientIDFetcher, oauth2clientsUserIDFetcher, oauth2clientsTracer, responseEncoder)
	serverTracer, err := server.ProvideServerTracer()
	if err != nil {
		return nil, err
	}
	httpServer := server.ProvideHTTPServer()
	handler := prometheus.ProvideMetricsHandler()
	instrumentationHandlerProvider := prometheus.ProvideInstrumentationHandlerProvider(metricsNamespace)
	serverServer, err := server.ProvideServer(Debug, CookieSecret, enticator, service, usersService, oauth2clientsService, database, loggingLogger, serverTracer, httpServer, responseEncoder, handler, instrumentationHandlerProvider)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

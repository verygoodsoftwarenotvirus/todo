// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"context"
	"database/sql"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/server"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/server/http"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/accounts"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/accountsubscriptionplans"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/admin"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/apiclients"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/audit"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/auth"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/frontend"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/items"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/users"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/webhooks"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/authentication"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/config"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/database"
	config2 "gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/database/config"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/encoding"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/observability/logging"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/observability/metrics"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/routing/chi"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/search/bleve"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/uploads"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/uploads/images"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/uploads/storage"
)

// Injectors from wire.go:

// BuildServer builds a server.
func BuildServer(ctx context.Context, cfg *config.ServerConfig, logger logging.Logger, dbm database.DataManager, db *sql.DB, authenticator authentication.Authenticator) (*server.Server, error) {
	httpserverConfig := cfg.Server
	frontendConfig := cfg.Frontend
	observabilityConfig := &cfg.Observability
	metricsConfig := observabilityConfig.Metrics
	config3 := &observabilityConfig.Metrics
	instrumentationHandler := metrics.ProvideMetricsInstrumentationHandlerForServer(config3, logger)
	authConfig := &cfg.Auth
	userDataManager := database.ProvideUserDataManager(dbm)
	authAuditManager := database.ProvideAuthAuditManager(dbm)
	apiClientDataManager := database.ProvideAPIClientDataManager(dbm)
	accountUserMembershipDataManager := database.ProvideAccountUserMembershipDataManager(dbm)
	cookieConfig := authConfig.Cookies
	configConfig := cfg.Database
	sessionManager, err := config2.ProvideSessionManager(cookieConfig, configConfig, db)
	if err != nil {
		return nil, err
	}
	httpResponseEncoder := encoding.ProvideHTTPResponseEncoder(logger)
	routeParamManager := chi.NewRouteParamManager()
	authService, err := auth.ProvideService(logger, authConfig, authenticator, userDataManager, authAuditManager, apiClientDataManager, accountUserMembershipDataManager, sessionManager, httpResponseEncoder, routeParamManager)
	if err != nil {
		return nil, err
	}
	auditLogEntryDataManager := database.ProvideAuditLogEntryDataManager(dbm)
	auditLogEntryDataService := audit.ProvideService(logger, auditLogEntryDataManager, httpResponseEncoder, routeParamManager)
	accountDataManager := database.ProvideAccountDataManager(dbm)
	unitCounterProvider := metrics.ProvideUnitCounterProvider()
	imageUploadProcessor := images.NewImageUploadProcessor()
	uploadsConfig := &cfg.Uploads
	storageConfig := &uploadsConfig.Storage
	uploader, err := storage.NewUploadManager(ctx, logger, storageConfig, routeParamManager)
	if err != nil {
		return nil, err
	}
	uploadManager := uploads.ProvideUploadManager(uploader)
	userDataService, err := users.ProvideUsersService(authConfig, logger, userDataManager, accountDataManager, authenticator, httpResponseEncoder, unitCounterProvider, imageUploadProcessor, uploadManager, routeParamManager)
	if err != nil {
		return nil, err
	}
	accountDataService, err := accounts.ProvideService(logger, accountDataManager, httpResponseEncoder, unitCounterProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	accountSubscriptionPlanDataManager := database.ProvidePlanDataManager(dbm)
	accountSubscriptionPlanDataService, err := accountsubscriptionplans.ProvideService(logger, accountSubscriptionPlanDataManager, httpResponseEncoder, unitCounterProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	apiClientDataService, err := apiclients.ProvideAPIClientsService(logger, apiClientDataManager, userDataManager, authenticator, httpResponseEncoder, unitCounterProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	itemDataManager := database.ProvideItemDataManager(dbm)
	searchConfig := cfg.Search
	indexManagerProvider := bleve.ProvideBleveIndexManagerProvider()
	itemDataService, err := items.ProvideService(logger, itemDataManager, httpResponseEncoder, unitCounterProvider, searchConfig, indexManagerProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	webhookDataManager := database.ProvideWebhookDataManager(dbm)
	webhookDataService, err := webhooks.ProvideWebhooksService(logger, webhookDataManager, httpResponseEncoder, unitCounterProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	adminUserDataManager := database.ProvideAdminUserDataManager(dbm)
	adminAuditManager := database.ProvideAdminAuditManager(dbm)
	adminService, err := admin.ProvideService(logger, authConfig, authenticator, adminUserDataManager, adminAuditManager, sessionManager, httpResponseEncoder, routeParamManager)
	if err != nil {
		return nil, err
	}
	frontendService := frontend.ProvideService(logger, frontendConfig)
	router := chi.NewRouter(logger)
	httpserverServer, err := httpserver.ProvideServer(httpserverConfig, frontendConfig, metricsConfig, instrumentationHandler, authService, auditLogEntryDataService, userDataService, accountDataService, accountSubscriptionPlanDataService, apiClientDataService, itemDataService, webhookDataService, adminService, frontendService, dbm, logger, httpResponseEncoder, router)
	if err != nil {
		return nil, err
	}
	serverServer, err := server.ProvideServer(cfg, httpserverServer)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

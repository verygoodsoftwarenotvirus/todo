// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"context"
	"database/sql"
	"gitlab.com/verygoodsoftwarenotvirus/logging/v2"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/database"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/server"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/server/http"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/admin"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/audit"
	auth2 "gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/auth"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/frontend"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/items"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/oauth2clients"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/users"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/app/services/webhooks"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/auth"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/config"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/encoding"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/metrics"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/pkg/search/bleve"
)

// Injectors from wire.go:

// BuildServer builds a server.
func BuildServer(ctx context.Context, cfg *config.ServerConfig, logger logging.Logger, dbm database.DataManager, db *sql.DB, authenticator auth.Authenticator) (*server.Server, error) {
	serverSettings := config.ProvideConfigServerSettings(cfg)
	frontendSettings := config.ProvideConfigFrontendSettings(cfg)
	instrumentationHandler := frontend.ProvideMetricsInstrumentationHandlerForServer(cfg, logger)
	authSettings := config.ProvideConfigAuthSettings(cfg)
	userDataManager := database.ProvideUserDataManager(dbm)
	authAuditManager := database.ProvideAuthAuditManager(dbm)
	oAuth2ClientDataManager := database.ProvideOAuth2ClientDataManager(dbm)
	oAuth2ClientAuditManager := database.ProvideOAuth2ClientAuditManager(dbm)
	clientIDFetcher := httpserver.ProvideOAuth2ClientsServiceClientIDFetcher(logger)
	encoderDecoder := encoding.ProvideResponseEncoder(logger)
	unitCounterProvider := metrics.ProvideUnitCounterProvider()
	service, err := oauth2clients.ProvideOAuth2ClientsService(logger, oAuth2ClientDataManager, userDataManager, oAuth2ClientAuditManager, authenticator, clientIDFetcher, encoderDecoder, unitCounterProvider)
	if err != nil {
		return nil, err
	}
	oAuth2ClientValidator := auth2.ProvideOAuth2ClientValidator(service)
	databaseSettings := config.ProvideConfigDatabaseSettings(cfg)
	sessionManager := config.ProvideSessionManager(authSettings, databaseSettings, db)
	sessionInfoFetcher := httpserver.ProvideAuthServiceSessionInfoFetcher()
	authService, err := auth2.ProvideAuthService(logger, authSettings, authenticator, userDataManager, authAuditManager, oAuth2ClientValidator, sessionManager, encoderDecoder, sessionInfoFetcher)
	if err != nil {
		return nil, err
	}
	frontendService := frontend.ProvideFrontendService(logger, frontendSettings)
	auditLogDataManager := database.ProvideAuditLogEntryDataManager(dbm)
	entryIDFetcher := httpserver.ProvideAuditServiceItemIDFetcher(logger)
	auditSessionInfoFetcher := httpserver.ProvideAuditServiceSessionInfoFetcher()
	auditService := audit.ProvideAuditService(logger, auditLogDataManager, entryIDFetcher, auditSessionInfoFetcher, encoderDecoder)
	auditLogDataServer := audit.ProvideAuditLogEntryDataServer(auditService)
	itemDataManager := database.ProvideItemDataManager(dbm)
	itemAuditManager := database.ProvideItemAuditManager(dbm)
	itemIDFetcher := httpserver.ProvideItemsServiceItemIDFetcher(logger)
	itemsSessionInfoFetcher := httpserver.ProvideItemsServiceSessionInfoFetcher()
	searchSettings := config.ProvideSearchSettings(cfg)
	indexManagerProvider := bleve.ProvideBleveIndexManagerProvider()
	searchIndex, err := items.ProvideItemsServiceSearchIndex(searchSettings, indexManagerProvider, logger)
	if err != nil {
		return nil, err
	}
	itemsService, err := items.ProvideItemsService(logger, itemDataManager, itemAuditManager, itemIDFetcher, itemsSessionInfoFetcher, encoderDecoder, unitCounterProvider, searchIndex)
	if err != nil {
		return nil, err
	}
	itemDataServer := items.ProvideItemDataServer(itemsService)
	userAuditManager := database.ProvideUserAuditManager(dbm)
	userIDFetcher := httpserver.ProvideUsersServiceUserIDFetcher(logger)
	usersSessionInfoFetcher := httpserver.ProvideUsersServiceSessionInfoFetcher()
	usersService, err := users.ProvideUsersService(authSettings, logger, userDataManager, userAuditManager, authenticator, userIDFetcher, usersSessionInfoFetcher, encoderDecoder, unitCounterProvider)
	if err != nil {
		return nil, err
	}
	userDataServer := users.ProvideUserDataServer(usersService)
	oAuth2ClientDataServer := oauth2clients.ProvideOAuth2ClientDataServer(service)
	webhookDataManager := database.ProvideWebhookDataManager(dbm)
	webhookAuditManager := database.ProvideWebhookAuditManager(dbm)
	webhooksSessionInfoFetcher := httpserver.ProvideWebhooksServiceSessionInfoFetcher()
	webhookIDFetcher := httpserver.ProvideWebhooksServiceWebhookIDFetcher(logger)
	webhooksService, err := webhooks.ProvideWebhooksService(logger, webhookDataManager, webhookAuditManager, webhooksSessionInfoFetcher, webhookIDFetcher, encoderDecoder, unitCounterProvider)
	if err != nil {
		return nil, err
	}
	webhookDataServer := webhooks.ProvideWebhookDataServer(webhooksService)
	adminUserDataManager := database.ProvideAdminUserDataManager(dbm)
	adminAuditManager := database.ProvideAdminAuditManager(dbm)
	adminSessionInfoFetcher := httpserver.ProvideAdminServiceSessionInfoFetcher()
	adminUserIDFetcher := httpserver.ProvideAdminServiceUserIDFetcher(logger)
	adminService, err := admin.ProvideAdminService(logger, authSettings, authenticator, adminUserDataManager, adminAuditManager, sessionManager, encoderDecoder, adminSessionInfoFetcher, adminUserIDFetcher)
	if err != nil {
		return nil, err
	}
	adminServer := admin.ProvideAdminServer(adminService)
	httpserverServer, err := httpserver.ProvideServer(serverSettings, frontendSettings, instrumentationHandler, authService, frontendService, auditLogDataServer, itemDataServer, userDataServer, oAuth2ClientDataServer, webhookDataServer, adminServer, dbm, logger, encoderDecoder)
	if err != nil {
		return nil, err
	}
	serverServer, err := server.ProvideServer(cfg, httpserverServer)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

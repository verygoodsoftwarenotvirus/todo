
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error(`Function called outside component initialization`);
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.26.0' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev("SvelteDOMInsert", { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev("SvelteDOMInsert", { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev("SvelteDOMRemove", { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev("SvelteDOMAddEventListener", { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev("SvelteDOMRemoveEventListener", { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
        else
            dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev("SvelteDOMSetData", { node: text, data });
        text.data = data;
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error(`'target' is a required option`);
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn(`Component was already destroyed`); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    const LOCATION = {};
    const ROUTER = {};

    /**
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/history.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     * */

    function getLocation(source) {
      return {
        ...source.location,
        state: source.history.state,
        key: (source.history.state && source.history.state.key) || "initial"
      };
    }

    function createHistory(source, options) {
      const listeners = [];
      let location = getLocation(source);

      return {
        get location() {
          return location;
        },

        listen(listener) {
          listeners.push(listener);

          const popstateListener = () => {
            location = getLocation(source);
            listener({ location, action: "POP" });
          };

          source.addEventListener("popstate", popstateListener);

          return () => {
            source.removeEventListener("popstate", popstateListener);

            const index = listeners.indexOf(listener);
            listeners.splice(index, 1);
          };
        },

        navigate(to, { state, replace = false } = {}) {
          state = { ...state, key: Date.now() + "" };
          // try...catch iOS Safari limits to 100 pushState calls
          try {
            if (replace) {
              source.history.replaceState(state, null, to);
            } else {
              source.history.pushState(state, null, to);
            }
          } catch (e) {
            source.location[replace ? "replace" : "assign"](to);
          }

          location = getLocation(source);
          listeners.forEach(listener => listener({ location, action: "PUSH" }));
        }
      };
    }

    // Stores history entries in memory for testing or other platforms like Native
    function createMemorySource(initialPathname = "/") {
      let index = 0;
      const stack = [{ pathname: initialPathname, search: "" }];
      const states = [];

      return {
        get location() {
          return stack[index];
        },
        addEventListener(name, fn) {},
        removeEventListener(name, fn) {},
        history: {
          get entries() {
            return stack;
          },
          get index() {
            return index;
          },
          get state() {
            return states[index];
          },
          pushState(state, _, uri) {
            const [pathname, search = ""] = uri.split("?");
            index++;
            stack.push({ pathname, search });
            states.push(state);
          },
          replaceState(state, _, uri) {
            const [pathname, search = ""] = uri.split("?");
            stack[index] = { pathname, search };
            states[index] = state;
          }
        }
      };
    }

    // Global history uses window.history as the source if available,
    // otherwise a memory history
    const canUseDOM = Boolean(
      typeof window !== "undefined" &&
        window.document &&
        window.document.createElement
    );
    const globalHistory = createHistory(canUseDOM ? window : createMemorySource());
    const { navigate } = globalHistory;

    /**
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/utils.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     * */

    const paramRe = /^:(.+)/;

    const SEGMENT_POINTS = 4;
    const STATIC_POINTS = 3;
    const DYNAMIC_POINTS = 2;
    const SPLAT_PENALTY = 1;
    const ROOT_POINTS = 1;

    /**
     * Check if `string` starts with `search`
     * @param {string} string
     * @param {string} search
     * @return {boolean}
     */
    function startsWith(string, search) {
      return string.substr(0, search.length) === search;
    }

    /**
     * Check if `segment` is a root segment
     * @param {string} segment
     * @return {boolean}
     */
    function isRootSegment(segment) {
      return segment === "";
    }

    /**
     * Check if `segment` is a dynamic segment
     * @param {string} segment
     * @return {boolean}
     */
    function isDynamic(segment) {
      return paramRe.test(segment);
    }

    /**
     * Check if `segment` is a splat
     * @param {string} segment
     * @return {boolean}
     */
    function isSplat(segment) {
      return segment[0] === "*";
    }

    /**
     * Split up the URI into segments delimited by `/`
     * @param {string} uri
     * @return {string[]}
     */
    function segmentize(uri) {
      return (
        uri
          // Strip starting/ending `/`
          .replace(/(^\/+|\/+$)/g, "")
          .split("/")
      );
    }

    /**
     * Strip `str` of potential start and end `/`
     * @param {string} str
     * @return {string}
     */
    function stripSlashes(str) {
      return str.replace(/(^\/+|\/+$)/g, "");
    }

    /**
     * Score a route depending on how its individual segments look
     * @param {object} route
     * @param {number} index
     * @return {object}
     */
    function rankRoute(route, index) {
      const score = route.default
        ? 0
        : segmentize(route.path).reduce((score, segment) => {
            score += SEGMENT_POINTS;

            if (isRootSegment(segment)) {
              score += ROOT_POINTS;
            } else if (isDynamic(segment)) {
              score += DYNAMIC_POINTS;
            } else if (isSplat(segment)) {
              score -= SEGMENT_POINTS + SPLAT_PENALTY;
            } else {
              score += STATIC_POINTS;
            }

            return score;
          }, 0);

      return { route, score, index };
    }

    /**
     * Give a score to all routes and sort them on that
     * @param {object[]} routes
     * @return {object[]}
     */
    function rankRoutes(routes) {
      return (
        routes
          .map(rankRoute)
          // If two routes have the exact same score, we go by index instead
          .sort((a, b) =>
            a.score < b.score ? 1 : a.score > b.score ? -1 : a.index - b.index
          )
      );
    }

    /**
     * Ranks and picks the best route to match. Each segment gets the highest
     * amount of points, then the type of segment gets an additional amount of
     * points where
     *
     *  static > dynamic > splat > root
     *
     * This way we don't have to worry about the order of our routes, let the
     * computers do it.
     *
     * A route looks like this
     *
     *  { path, default, value }
     *
     * And a returned match looks like:
     *
     *  { route, params, uri }
     *
     * @param {object[]} routes
     * @param {string} uri
     * @return {?object}
     */
    function pick(routes, uri) {
      let match;
      let default_;

      const [uriPathname] = uri.split("?");
      const uriSegments = segmentize(uriPathname);
      const isRootUri = uriSegments[0] === "";
      const ranked = rankRoutes(routes);

      for (let i = 0, l = ranked.length; i < l; i++) {
        const route = ranked[i].route;
        let missed = false;

        if (route.default) {
          default_ = {
            route,
            params: {},
            uri
          };
          continue;
        }

        const routeSegments = segmentize(route.path);
        const params = {};
        const max = Math.max(uriSegments.length, routeSegments.length);
        let index = 0;

        for (; index < max; index++) {
          const routeSegment = routeSegments[index];
          const uriSegment = uriSegments[index];

          if (routeSegment !== undefined && isSplat(routeSegment)) {
            // Hit a splat, just grab the rest, and return a match
            // uri:   /files/documents/work
            // route: /files/* or /files/*splatname
            const splatName = routeSegment === "*" ? "*" : routeSegment.slice(1);

            params[splatName] = uriSegments
              .slice(index)
              .map(decodeURIComponent)
              .join("/");
            break;
          }

          if (uriSegment === undefined) {
            // URI is shorter than the route, no match
            // uri:   /users
            // route: /users/:userId
            missed = true;
            break;
          }

          let dynamicMatch = paramRe.exec(routeSegment);

          if (dynamicMatch && !isRootUri) {
            const value = decodeURIComponent(uriSegment);
            params[dynamicMatch[1]] = value;
          } else if (routeSegment !== uriSegment) {
            // Current segments don't match, not dynamic, not splat, so no match
            // uri:   /users/123/settings
            // route: /users/:id/profile
            missed = true;
            break;
          }
        }

        if (!missed) {
          match = {
            route,
            params,
            uri: "/" + uriSegments.slice(0, index).join("/")
          };
          break;
        }
      }

      return match || default_ || null;
    }

    /**
     * Check if the `path` matches the `uri`.
     * @param {string} path
     * @param {string} uri
     * @return {?object}
     */
    function match(route, uri) {
      return pick([route], uri);
    }

    /**
     * Add the query to the pathname if a query is given
     * @param {string} pathname
     * @param {string} [query]
     * @return {string}
     */
    function addQuery(pathname, query) {
      return pathname + (query ? `?${query}` : "");
    }

    /**
     * Resolve URIs as though every path is a directory, no files. Relative URIs
     * in the browser can feel awkward because not only can you be "in a directory",
     * you can be "at a file", too. For example:
     *
     *  browserSpecResolve('foo', '/bar/') => /bar/foo
     *  browserSpecResolve('foo', '/bar') => /foo
     *
     * But on the command line of a file system, it's not as complicated. You can't
     * `cd` from a file, only directories. This way, links have to know less about
     * their current path. To go deeper you can do this:
     *
     *  <Link to="deeper"/>
     *  // instead of
     *  <Link to=`{${props.uri}/deeper}`/>
     *
     * Just like `cd`, if you want to go deeper from the command line, you do this:
     *
     *  cd deeper
     *  # not
     *  cd $(pwd)/deeper
     *
     * By treating every path as a directory, linking to relative paths should
     * require less contextual information and (fingers crossed) be more intuitive.
     * @param {string} to
     * @param {string} base
     * @return {string}
     */
    function resolve(to, base) {
      // /foo/bar, /baz/qux => /foo/bar
      if (startsWith(to, "/")) {
        return to;
      }

      const [toPathname, toQuery] = to.split("?");
      const [basePathname] = base.split("?");
      const toSegments = segmentize(toPathname);
      const baseSegments = segmentize(basePathname);

      // ?a=b, /users?b=c => /users?a=b
      if (toSegments[0] === "") {
        return addQuery(basePathname, toQuery);
      }

      // profile, /users/789 => /users/789/profile
      if (!startsWith(toSegments[0], ".")) {
        const pathname = baseSegments.concat(toSegments).join("/");

        return addQuery((basePathname === "/" ? "" : "/") + pathname, toQuery);
      }

      // ./       , /users/123 => /users/123
      // ../      , /users/123 => /users
      // ../..    , /users/123 => /
      // ../../one, /a/b/c/d   => /a/b/one
      // .././one , /a/b/c/d   => /a/b/c/one
      const allSegments = baseSegments.concat(toSegments);
      const segments = [];

      allSegments.forEach(segment => {
        if (segment === "..") {
          segments.pop();
        } else if (segment !== ".") {
          segments.push(segment);
        }
      });

      return addQuery("/" + segments.join("/"), toQuery);
    }

    /**
     * Combines the `basepath` and the `path` into one path.
     * @param {string} basepath
     * @param {string} path
     */
    function combinePaths(basepath, path) {
      return `${stripSlashes(
    path === "/" ? basepath : `${stripSlashes(basepath)}/${stripSlashes(path)}`
  )}/`;
    }

    /**
     * Decides whether a given `event` should result in a navigation or not.
     * @param {object} event
     */
    function shouldNavigate(event) {
      return (
        !event.defaultPrevented &&
        event.button === 0 &&
        !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)
      );
    }

    function hostMatches(anchor) {
      const host = location.host;
      return (
        anchor.host == host ||
        // svelte seems to kill anchor.host value in ie11, so fall back to checking href
        anchor.href.indexOf(`https://${host}`) === 0 ||
        anchor.href.indexOf(`http://${host}`) === 0
      )
    }

    /* node_modules/svelte-routing/src/Router.svelte generated by Svelte v3.26.0 */

    function create_fragment(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 32) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $base;
    	let $location;
    	let $routes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Router", slots, ['default']);
    	let { basepath = "/" } = $$props;
    	let { url = null } = $$props;
    	const locationContext = getContext(LOCATION);
    	const routerContext = getContext(ROUTER);
    	const routes = writable([]);
    	validate_store(routes, "routes");
    	component_subscribe($$self, routes, value => $$invalidate(10, $routes = value));
    	const activeRoute = writable(null);
    	let hasActiveRoute = false; // Used in SSR to synchronously set that a Route is active.

    	// If locationContext is not set, this is the topmost Router in the tree.
    	// If the `url` prop is given we force the location to it.
    	const location = locationContext || writable(url ? { pathname: url } : globalHistory.location);

    	validate_store(location, "location");
    	component_subscribe($$self, location, value => $$invalidate(9, $location = value));

    	// If routerContext is set, the routerBase of the parent Router
    	// will be the base for this Router's descendants.
    	// If routerContext is not set, the path and resolved uri will both
    	// have the value of the basepath prop.
    	const base = routerContext
    	? routerContext.routerBase
    	: writable({ path: basepath, uri: basepath });

    	validate_store(base, "base");
    	component_subscribe($$self, base, value => $$invalidate(8, $base = value));

    	const routerBase = derived([base, activeRoute], ([base, activeRoute]) => {
    		// If there is no activeRoute, the routerBase will be identical to the base.
    		if (activeRoute === null) {
    			return base;
    		}

    		const { path: basepath } = base;
    		const { route, uri } = activeRoute;

    		// Remove the potential /* or /*splatname from
    		// the end of the child Routes relative paths.
    		const path = route.default
    		? basepath
    		: route.path.replace(/\*.*$/, "");

    		return { path, uri };
    	});

    	function registerRoute(route) {
    		const { path: basepath } = $base;
    		let { path } = route;

    		// We store the original path in the _path property so we can reuse
    		// it when the basepath changes. The only thing that matters is that
    		// the route reference is intact, so mutation is fine.
    		route._path = path;

    		route.path = combinePaths(basepath, path);

    		if (typeof window === "undefined") {
    			// In SSR we should set the activeRoute immediately if it is a match.
    			// If there are more Routes being registered after a match is found,
    			// we just skip them.
    			if (hasActiveRoute) {
    				return;
    			}

    			const matchingRoute = match(route, $location.pathname);

    			if (matchingRoute) {
    				activeRoute.set(matchingRoute);
    				hasActiveRoute = true;
    			}
    		} else {
    			routes.update(rs => {
    				rs.push(route);
    				return rs;
    			});
    		}
    	}

    	function unregisterRoute(route) {
    		routes.update(rs => {
    			const index = rs.indexOf(route);
    			rs.splice(index, 1);
    			return rs;
    		});
    	}

    	if (!locationContext) {
    		// The topmost Router in the tree is responsible for updating
    		// the location store and supplying it through context.
    		onMount(() => {
    			const unlisten = globalHistory.listen(history => {
    				location.set(history.location);
    			});

    			return unlisten;
    		});

    		setContext(LOCATION, location);
    	}

    	setContext(ROUTER, {
    		activeRoute,
    		base,
    		routerBase,
    		registerRoute,
    		unregisterRoute
    	});

    	const writable_props = ["basepath", "url"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("basepath" in $$props) $$invalidate(3, basepath = $$props.basepath);
    		if ("url" in $$props) $$invalidate(4, url = $$props.url);
    		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		setContext,
    		onMount,
    		writable,
    		derived,
    		LOCATION,
    		ROUTER,
    		globalHistory,
    		pick,
    		match,
    		stripSlashes,
    		combinePaths,
    		basepath,
    		url,
    		locationContext,
    		routerContext,
    		routes,
    		activeRoute,
    		hasActiveRoute,
    		location,
    		base,
    		routerBase,
    		registerRoute,
    		unregisterRoute,
    		$base,
    		$location,
    		$routes
    	});

    	$$self.$inject_state = $$props => {
    		if ("basepath" in $$props) $$invalidate(3, basepath = $$props.basepath);
    		if ("url" in $$props) $$invalidate(4, url = $$props.url);
    		if ("hasActiveRoute" in $$props) hasActiveRoute = $$props.hasActiveRoute;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$base*/ 256) {
    			// This reactive statement will update all the Routes' path when
    			// the basepath changes.
    			 {
    				const { path: basepath } = $base;

    				routes.update(rs => {
    					rs.forEach(r => r.path = combinePaths(basepath, r._path));
    					return rs;
    				});
    			}
    		}

    		if ($$self.$$.dirty & /*$routes, $location*/ 1536) {
    			// This reactive statement will be run when the Router is created
    			// when there are no Routes and then again the following tick, so it
    			// will not find an active Route in SSR and in the browser it will only
    			// pick an active Route after all Routes have been registered.
    			 {
    				const bestMatch = pick($routes, $location.pathname);
    				activeRoute.set(bestMatch);
    			}
    		}
    	};

    	return [routes, location, base, basepath, url, $$scope, slots];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { basepath: 3, url: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment.name
    		});
    	}

    	get basepath() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set basepath(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get url() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set url(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-routing/src/Route.svelte generated by Svelte v3.26.0 */

    const get_default_slot_changes = dirty => ({
    	params: dirty & /*routeParams*/ 2,
    	location: dirty & /*$location*/ 16
    });

    const get_default_slot_context = ctx => ({
    	params: /*routeParams*/ ctx[1],
    	location: /*$location*/ ctx[4]
    });

    // (40:0) {#if $activeRoute !== null && $activeRoute.route === route}
    function create_if_block(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*component*/ ctx[0] !== null) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(40:0) {#if $activeRoute !== null && $activeRoute.route === route}",
    		ctx
    	});

    	return block;
    }

    // (43:2) {:else}
    function create_else_block(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, routeParams, $location*/ 530) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, get_default_slot_changes, get_default_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(43:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (41:2) {#if component !== null}
    function create_if_block_1(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{ location: /*$location*/ ctx[4] },
    		/*routeParams*/ ctx[1],
    		/*routeProps*/ ctx[2]
    	];

    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*$location, routeParams, routeProps*/ 22)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*$location*/ 16 && { location: /*$location*/ ctx[4] },
    					dirty & /*routeParams*/ 2 && get_spread_object(/*routeParams*/ ctx[1]),
    					dirty & /*routeProps*/ 4 && get_spread_object(/*routeProps*/ ctx[2])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(41:2) {#if component !== null}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$activeRoute*/ ctx[3] !== null && /*$activeRoute*/ ctx[3].route === /*route*/ ctx[7] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$activeRoute*/ ctx[3] !== null && /*$activeRoute*/ ctx[3].route === /*route*/ ctx[7]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$activeRoute*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $activeRoute;
    	let $location;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Route", slots, ['default']);
    	let { path = "" } = $$props;
    	let { component = null } = $$props;
    	const { registerRoute, unregisterRoute, activeRoute } = getContext(ROUTER);
    	validate_store(activeRoute, "activeRoute");
    	component_subscribe($$self, activeRoute, value => $$invalidate(3, $activeRoute = value));
    	const location = getContext(LOCATION);
    	validate_store(location, "location");
    	component_subscribe($$self, location, value => $$invalidate(4, $location = value));

    	const route = {
    		path,
    		// If no path prop is given, this Route will act as the default Route
    		// that is rendered if no other Route in the Router is a match.
    		default: path === ""
    	};

    	let routeParams = {};
    	let routeProps = {};
    	registerRoute(route);

    	// There is no need to unregister Routes in SSR since it will all be
    	// thrown away anyway.
    	if (typeof window !== "undefined") {
    		onDestroy(() => {
    			unregisterRoute(route);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("path" in $$new_props) $$invalidate(8, path = $$new_props.path);
    		if ("component" in $$new_props) $$invalidate(0, component = $$new_props.component);
    		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		onDestroy,
    		ROUTER,
    		LOCATION,
    		path,
    		component,
    		registerRoute,
    		unregisterRoute,
    		activeRoute,
    		location,
    		route,
    		routeParams,
    		routeProps,
    		$activeRoute,
    		$location
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), $$new_props));
    		if ("path" in $$props) $$invalidate(8, path = $$new_props.path);
    		if ("component" in $$props) $$invalidate(0, component = $$new_props.component);
    		if ("routeParams" in $$props) $$invalidate(1, routeParams = $$new_props.routeParams);
    		if ("routeProps" in $$props) $$invalidate(2, routeProps = $$new_props.routeProps);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$activeRoute*/ 8) {
    			 if ($activeRoute && $activeRoute.route === route) {
    				$$invalidate(1, routeParams = $activeRoute.params);
    			}
    		}

    		 {
    			const { path, component, ...rest } = $$props;
    			$$invalidate(2, routeProps = rest);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		component,
    		routeParams,
    		routeProps,
    		$activeRoute,
    		$location,
    		activeRoute,
    		location,
    		route,
    		path,
    		$$scope,
    		slots
    	];
    }

    class Route extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { path: 8, component: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Route",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get path() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-routing/src/Link.svelte generated by Svelte v3.26.0 */
    const file = "node_modules/svelte-routing/src/Link.svelte";

    function create_fragment$2(ctx) {
    	let a;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	let a_levels = [
    		{ href: /*href*/ ctx[0] },
    		{ "aria-current": /*ariaCurrent*/ ctx[2] },
    		/*props*/ ctx[1]
    	];

    	let a_data = {};

    	for (let i = 0; i < a_levels.length; i += 1) {
    		a_data = assign(a_data, a_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			set_attributes(a, a_data);
    			add_location(a, file, 40, 0, 1249);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(a, "click", /*onClick*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 1024) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
    				}
    			}

    			set_attributes(a, a_data = get_spread_update(a_levels, [
    				(!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] },
    				(!current || dirty & /*ariaCurrent*/ 4) && { "aria-current": /*ariaCurrent*/ ctx[2] },
    				dirty & /*props*/ 2 && /*props*/ ctx[1]
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let $base;
    	let $location;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Link", slots, ['default']);
    	let { to = "#" } = $$props;
    	let { replace = false } = $$props;
    	let { state = {} } = $$props;
    	let { getProps = () => ({}) } = $$props;
    	const { base } = getContext(ROUTER);
    	validate_store(base, "base");
    	component_subscribe($$self, base, value => $$invalidate(14, $base = value));
    	const location = getContext(LOCATION);
    	validate_store(location, "location");
    	component_subscribe($$self, location, value => $$invalidate(15, $location = value));
    	const dispatch = createEventDispatcher();
    	let href, isPartiallyCurrent, isCurrent, props;

    	function onClick(event) {
    		dispatch("click", event);

    		if (shouldNavigate(event)) {
    			event.preventDefault();

    			// Don't push another entry to the history stack when the user
    			// clicks on a Link to the page they are currently on.
    			const shouldReplace = $location.pathname === href || replace;

    			navigate(href, { state, replace: shouldReplace });
    		}
    	}

    	const writable_props = ["to", "replace", "state", "getProps"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Link> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("to" in $$props) $$invalidate(6, to = $$props.to);
    		if ("replace" in $$props) $$invalidate(7, replace = $$props.replace);
    		if ("state" in $$props) $$invalidate(8, state = $$props.state);
    		if ("getProps" in $$props) $$invalidate(9, getProps = $$props.getProps);
    		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		createEventDispatcher,
    		ROUTER,
    		LOCATION,
    		navigate,
    		startsWith,
    		resolve,
    		shouldNavigate,
    		to,
    		replace,
    		state,
    		getProps,
    		base,
    		location,
    		dispatch,
    		href,
    		isPartiallyCurrent,
    		isCurrent,
    		props,
    		onClick,
    		$base,
    		$location,
    		ariaCurrent
    	});

    	$$self.$inject_state = $$props => {
    		if ("to" in $$props) $$invalidate(6, to = $$props.to);
    		if ("replace" in $$props) $$invalidate(7, replace = $$props.replace);
    		if ("state" in $$props) $$invalidate(8, state = $$props.state);
    		if ("getProps" in $$props) $$invalidate(9, getProps = $$props.getProps);
    		if ("href" in $$props) $$invalidate(0, href = $$props.href);
    		if ("isPartiallyCurrent" in $$props) $$invalidate(12, isPartiallyCurrent = $$props.isPartiallyCurrent);
    		if ("isCurrent" in $$props) $$invalidate(13, isCurrent = $$props.isCurrent);
    		if ("props" in $$props) $$invalidate(1, props = $$props.props);
    		if ("ariaCurrent" in $$props) $$invalidate(2, ariaCurrent = $$props.ariaCurrent);
    	};

    	let ariaCurrent;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*to, $base*/ 16448) {
    			 $$invalidate(0, href = to === "/" ? $base.uri : resolve(to, $base.uri));
    		}

    		if ($$self.$$.dirty & /*$location, href*/ 32769) {
    			 $$invalidate(12, isPartiallyCurrent = startsWith($location.pathname, href));
    		}

    		if ($$self.$$.dirty & /*href, $location*/ 32769) {
    			 $$invalidate(13, isCurrent = href === $location.pathname);
    		}

    		if ($$self.$$.dirty & /*isCurrent*/ 8192) {
    			 $$invalidate(2, ariaCurrent = isCurrent ? "page" : undefined);
    		}

    		if ($$self.$$.dirty & /*getProps, $location, href, isPartiallyCurrent, isCurrent*/ 45569) {
    			 $$invalidate(1, props = getProps({
    				location: $location,
    				href,
    				isPartiallyCurrent,
    				isCurrent
    			}));
    		}
    	};

    	return [
    		href,
    		props,
    		ariaCurrent,
    		base,
    		location,
    		onClick,
    		to,
    		replace,
    		state,
    		getProps,
    		$$scope,
    		slots
    	];
    }

    class Link extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, { to: 6, replace: 7, state: 8, getProps: 9 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Link",
    			options,
    			id: create_fragment$2.name
    		});
    	}

    	get to() {
    		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set to(value) {
    		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get replace() {
    		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set replace(value) {
    		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get state() {
    		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set state(value) {
    		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getProps() {
    		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getProps(value) {
    		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * A link action that can be added to <a href=""> tags rather
     * than using the <Link> component.
     *
     * Example:
     * ```html
     * <a href="/post/{postId}" use:link>{post.title}</a>
     * ```
     */
    function link(node) {
      function onClick(event) {
        const anchor = event.currentTarget;

        if (
          anchor.target === "" &&
          hostMatches(anchor) &&
          shouldNavigate(event)
        ) {
          event.preventDefault();
          navigate(anchor.pathname + anchor.search, { replace: anchor.hasAttribute("replace") });
        }
      }

      node.addEventListener("click", onClick);

      return {
        destroy() {
          node.removeEventListener("click", onClick);
        }
      };
    }

    var top = 'top';
    var bottom = 'bottom';
    var right = 'right';
    var left = 'left';
    var auto = 'auto';
    var basePlacements = [top, bottom, right, left];
    var start = 'start';
    var end = 'end';
    var clippingParents = 'clippingParents';
    var viewport = 'viewport';
    var popper = 'popper';
    var reference = 'reference';
    var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
      return acc.concat([placement + "-" + start, placement + "-" + end]);
    }, []);
    var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
      return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
    }, []); // modifiers that need to read the DOM

    var beforeRead = 'beforeRead';
    var read = 'read';
    var afterRead = 'afterRead'; // pure-logic modifiers

    var beforeMain = 'beforeMain';
    var main = 'main';
    var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

    var beforeWrite = 'beforeWrite';
    var write = 'write';
    var afterWrite = 'afterWrite';
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

    function getNodeName(element) {
      return element ? (element.nodeName || '').toLowerCase() : null;
    }

    /*:: import type { Window } from '../types'; */

    /*:: declare function getWindow(node: Node | Window): Window; */
    function getWindow(node) {
      if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }

      return node;
    }

    /*:: declare function isElement(node: mixed): boolean %checks(node instanceof
      Element); */

    function isElement(node) {
      var OwnElement = getWindow(node).Element;
      return node instanceof OwnElement || node instanceof Element;
    }
    /*:: declare function isHTMLElement(node: mixed): boolean %checks(node instanceof
      HTMLElement); */


    function isHTMLElement(node) {
      var OwnElement = getWindow(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
    }

    // and applies them to the HTMLElements such as popper and arrow

    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function (name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        } // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe


        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (name) {
          var value = attributes[name];

          if (value === false) {
            element.removeAttribute(name);
          } else {
            element.setAttribute(name, value === true ? '' : value);
          }
        });
      });
    }

    function effect(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }

      return function () {
        Object.keys(state.elements).forEach(function (name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

          var style = styleProperties.reduce(function (style, property) {
            style[property] = '';
            return style;
          }, {}); // arrow is optional + virtual elements

          if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
          } // Flow doesn't support to extend this property, but it's the most
          // effective way to apply styles to an HTMLElement
          // $FlowFixMe


          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function (attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    } // eslint-disable-next-line import/no-unused-modules


    var applyStyles$1 = {
      name: 'applyStyles',
      enabled: true,
      phase: 'write',
      fn: applyStyles,
      effect: effect,
      requires: ['computeStyles']
    };

    function getBasePlacement(placement) {
      return placement.split('-')[0];
    }

    // Returns the layout rect of an element relative to its offsetParent. Layout
    // means it doesn't take into account transforms.
    function getLayoutRect(element) {
      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: element.offsetWidth,
        height: element.offsetHeight
      };
    }

    function contains(parent, child) {
      // $FlowFixMe: hasOwnProperty doesn't seem to work in tests
      var isShadow = Boolean(child.getRootNode && child.getRootNode().host); // First, attempt with faster native method

      if (parent.contains(child)) {
        return true;
      } // then fallback to custom implementation with Shadow DOM support
      else if (isShadow) {
          var next = child;

          do {
            if (next && parent.isSameNode(next)) {
              return true;
            } // $FlowFixMe: need a better way to handle this...


            next = next.parentNode || next.host;
          } while (next);
        } // Give up, the result is false


      return false;
    }

    function getComputedStyle(element) {
      return getWindow(element).getComputedStyle(element);
    }

    function isTableElement(element) {
      return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
    }

    function getDocumentElement(element) {
      // $FlowFixMe: assume body is always available
      return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
    }

    function getParentNode(element) {
      if (getNodeName(element) === 'html') {
        return element;
      }

      return (// $FlowFixMe: this is a quicker (but less type safe) way to save quite some bytes from the bundle
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || // DOM Element detected
        // $FlowFixMe: need a better way to handle this...
        element.host || // ShadowRoot detected
        // $FlowFixMe: HTMLElement is a Node
        getDocumentElement(element) // fallback

      );
    }

    function getTrueOffsetParent(element) {
      if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle(element).position === 'fixed') {
        return null;
      }

      var offsetParent = element.offsetParent;

      if (offsetParent) {
        var html = getDocumentElement(offsetParent);

        if (getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && getComputedStyle(html).position !== 'static') {
          return html;
        }
      }

      return offsetParent;
    } // `.offsetParent` reports `null` for fixed elements, while absolute elements
    // return the containing block


    function getContainingBlock(element) {
      var currentNode = getParentNode(element);

      while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
        var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.

        if (css.transform !== 'none' || css.perspective !== 'none' || css.willChange && css.willChange !== 'auto') {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }

      return null;
    } // Gets the closest ancestor positioned element. Handles some edge cases,
    // such as table ancestors and cross browser bugs.


    function getOffsetParent(element) {
      var window = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);

      while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent);
      }

      if (offsetParent && getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static') {
        return window;
      }

      return offsetParent || getContainingBlock(element) || window;
    }

    function getMainAxisFromPlacement(placement) {
      return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
    }

    function within(min, value, max) {
      return Math.max(min, Math.min(value, max));
    }

    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    function mergePaddingObject(paddingObject) {
      return Object.assign(Object.assign({}, getFreshSideObject()), paddingObject);
    }

    function expandToHashMap(value, keys) {
      return keys.reduce(function (hashMap, key) {
        hashMap[key] = value;
        return hashMap;
      }, {});
    }

    function arrow(_ref) {
      var _state$modifiersData$;

      var state = _ref.state,
          name = _ref.name;
      var arrowElement = state.elements.arrow;
      var popperOffsets = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len = isVertical ? 'height' : 'width';

      if (!arrowElement || !popperOffsets) {
        return;
      }

      var paddingObject = state.modifiersData[name + "#persistent"].padding;
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === 'y' ? top : left;
      var maxProp = axis === 'y' ? bottom : right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
      var startDiff = popperOffsets[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
      // outside of the popper bounds

      var min = paddingObject[minProp];
      var max = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset = within(min, center, max); // Prevents breaking syntax highlighting...

      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
    }

    function effect$1(_ref2) {
      var state = _ref2.state,
          options = _ref2.options,
          name = _ref2.name;
      var _options$element = options.element,
          arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element,
          _options$padding = options.padding,
          padding = _options$padding === void 0 ? 0 : _options$padding;

      if (arrowElement == null) {
        return;
      } // CSS selector


      if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);

        if (!arrowElement) {
          return;
        }
      }

      if (process.env.NODE_ENV !== "production") {
        if (!isHTMLElement(arrowElement)) {
          console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
        }
      }

      if (!contains(state.elements.popper, arrowElement)) {
        if (process.env.NODE_ENV !== "production") {
          console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
        }

        return;
      }

      state.elements.arrow = arrowElement;
      state.modifiersData[name + "#persistent"] = {
        padding: mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements))
      };
    } // eslint-disable-next-line import/no-unused-modules


    var arrow$1 = {
      name: 'arrow',
      enabled: true,
      phase: 'main',
      fn: arrow,
      effect: effect$1,
      requires: ['popperOffsets'],
      requiresIfExists: ['preventOverflow']
    };

    var unsetSides = {
      top: 'auto',
      right: 'auto',
      bottom: 'auto',
      left: 'auto'
    }; // Round the offsets to the nearest suitable subpixel based on the DPR.
    // Zooming can change the DPR, but it seems to report a value that will
    // cleanly divide the values into the appropriate subpixels.

    function roundOffsets(_ref) {
      var x = _ref.x,
          y = _ref.y;
      var win = window;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: Math.round(x * dpr) / dpr || 0,
        y: Math.round(y * dpr) / dpr || 0
      };
    }

    function mapToStyles(_ref2) {
      var _Object$assign2;

      var popper = _ref2.popper,
          popperRect = _ref2.popperRect,
          placement = _ref2.placement,
          offsets = _ref2.offsets,
          position = _ref2.position,
          gpuAcceleration = _ref2.gpuAcceleration,
          adaptive = _ref2.adaptive;

      var _roundOffsets = roundOffsets(offsets),
          x = _roundOffsets.x,
          y = _roundOffsets.y;

      var hasX = offsets.hasOwnProperty('x');
      var hasY = offsets.hasOwnProperty('y');
      var sideX = left;
      var sideY = top;
      var win = window;

      if (adaptive) {
        var offsetParent = getOffsetParent(popper);

        if (offsetParent === getWindow(popper)) {
          offsetParent = getDocumentElement(popper);
        } // $FlowFixMe: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

        /*:: offsetParent = (offsetParent: Element); */


        if (placement === top) {
          sideY = bottom;
          y -= offsetParent.clientHeight - popperRect.height;
          y *= gpuAcceleration ? 1 : -1;
        }

        if (placement === left) {
          sideX = right;
          x -= offsetParent.clientWidth - popperRect.width;
          x *= gpuAcceleration ? 1 : -1;
        }
      }

      var commonStyles = Object.assign({
        position: position
      }, adaptive && unsetSides);

      if (gpuAcceleration) {
        var _Object$assign;

        return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }

      return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
    }

    function computeStyles(_ref3) {
      var state = _ref3.state,
          options = _ref3.options;
      var _options$gpuAccelerat = options.gpuAcceleration,
          gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
          _options$adaptive = options.adaptive,
          adaptive = _options$adaptive === void 0 ? true : _options$adaptive;

      if (process.env.NODE_ENV !== "production") {
        var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

        if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
          return transitionProperty.indexOf(property) >= 0;
        })) {
          console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
        }
      }

      var commonStyles = {
        placement: getBasePlacement(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration
      };

      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive: adaptive
        })));
      }

      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {
          offsets: state.modifiersData.arrow,
          position: 'absolute',
          adaptive: false
        })));
      }

      state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {
        'data-popper-placement': state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var computeStyles$1 = {
      name: 'computeStyles',
      enabled: true,
      phase: 'beforeWrite',
      fn: computeStyles,
      data: {}
    };

    var passive = {
      passive: true
    };

    function effect$2(_ref) {
      var state = _ref.state,
          instance = _ref.instance,
          options = _ref.options;
      var _options$scroll = options.scroll,
          scroll = _options$scroll === void 0 ? true : _options$scroll,
          _options$resize = options.resize,
          resize = _options$resize === void 0 ? true : _options$resize;
      var window = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.addEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.addEventListener('resize', instance.update, passive);
      }

      return function () {
        if (scroll) {
          scrollParents.forEach(function (scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
          });
        }

        if (resize) {
          window.removeEventListener('resize', instance.update, passive);
        }
      };
    } // eslint-disable-next-line import/no-unused-modules


    var eventListeners = {
      name: 'eventListeners',
      enabled: true,
      phase: 'write',
      fn: function fn() {},
      effect: effect$2,
      data: {}
    };

    var hash = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash[matched];
      });
    }

    var hash$1 = {
      start: 'end',
      end: 'start'
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function (matched) {
        return hash$1[matched];
      });
    }

    function getBoundingClientRect(element) {
      var rect = element.getBoundingClientRect();
      return {
        width: rect.width,
        height: rect.height,
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        x: rect.left,
        y: rect.top
      };
    }

    function getWindowScroll(node) {
      var win = getWindow(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      };
    }

    function getWindowScrollBarX(element) {
      // If <html> has a CSS width greater than the viewport, then this will be
      // incorrect for RTL.
      // Popper 1 is broken in this case and never had a bug report so let's assume
      // it's not an issue. I don't think anyone ever specifies width on <html>
      // anyway.
      // Browsers where the left scrollbar doesn't cause an issue report `0` for
      // this (e.g. Edge 2019, IE11, Safari)
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }

    function getViewportRect(element) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
      // can be obscured underneath it.
      // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
      // if it isn't open, so if this isn't available, the popper will be detected
      // to overflow the bottom of the screen too early.

      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent

        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }

      return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX(element),
        y: y
      };
    }

    // of the `<html>` and `<body>` rect bounds if horizontally scrollable

    function getDocumentRect(element) {
      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = element.ownerDocument.body;
      var width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y = -winScroll.scrollTop;

      if (getComputedStyle(body || html).direction === 'rtl') {
        x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;
      }

      return {
        width: width,
        height: height,
        x: x,
        y: y
      };
    }

    function isScrollParent(element) {
      // Firefox wants us to check `-x` and `-y` variations as well
      var _getComputedStyle = getComputedStyle(element),
          overflow = _getComputedStyle.overflow,
          overflowX = _getComputedStyle.overflowX,
          overflowY = _getComputedStyle.overflowY;

      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }

    function getScrollParent(node) {
      if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
        // $FlowFixMe: assume body is always available
        return node.ownerDocument.body;
      }

      if (isHTMLElement(node) && isScrollParent(node)) {
        return node;
      }

      return getScrollParent(getParentNode(node));
    }

    /*
    given a DOM element, return the list of all scroll parents, up the list of ancesors
    until we get to the top window object. This list is what we attach scroll listeners
    to, because if any of these parent elements scroll, we'll need to re-calculate the 
    reference element's position.
    */

    function listScrollParents(element, list) {
      if (list === void 0) {
        list = [];
      }

      var scrollParent = getScrollParent(element);
      var isBody = getNodeName(scrollParent) === 'body';
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : // $FlowFixMe: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)));
    }

    function rectToClientRect(rect) {
      return Object.assign(Object.assign({}, rect), {}, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }

    function getInnerBoundingClientRect(element) {
      var rect = getBoundingClientRect(element);
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }

    function getClientRectFromMixedType(element, clippingParent) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    } // A "clipping parent" is an overflowable container with the characteristic of
    // clipping (or hiding) overflowing elements with a position different from
    // `initial`


    function getClippingParents(element) {
      var clippingParents = listScrollParents(getParentNode(element));
      var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

      if (!isElement(clipperElement)) {
        return [];
      } // $FlowFixMe: https://github.com/facebook/flow/issues/1414


      return clippingParents.filter(function (clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
      });
    } // Gets the maximum area that the element is visible in due to any number of
    // clipping parents


    function getClippingRect(element, boundary, rootBoundary) {
      var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
      var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents[0];
      var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = Math.max(rect.top, accRect.top);
        accRect.right = Math.min(rect.right, accRect.right);
        accRect.bottom = Math.min(rect.bottom, accRect.bottom);
        accRect.left = Math.max(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }

    function getVariation(placement) {
      return placement.split('-')[1];
    }

    function computeOffsets(_ref) {
      var reference = _ref.reference,
          element = _ref.element,
          placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference.x + reference.width / 2 - element.width / 2;
      var commonY = reference.y + reference.height / 2 - element.height / 2;
      var offsets;

      switch (basePlacement) {
        case top:
          offsets = {
            x: commonX,
            y: reference.y - element.height
          };
          break;

        case bottom:
          offsets = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;

        case right:
          offsets = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;

        case left:
          offsets = {
            x: reference.x - element.width,
            y: commonY
          };
          break;

        default:
          offsets = {
            x: reference.x,
            y: reference.y
          };
      }

      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

      if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';

        switch (variation) {
          case start:
            offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference[len] / 2 - element[len] / 2);
            break;

          case end:
            offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference[len] / 2 - element[len] / 2);
            break;
        }
      }

      return offsets;
    }

    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          _options$placement = _options.placement,
          placement = _options$placement === void 0 ? state.placement : _options$placement,
          _options$boundary = _options.boundary,
          boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
          _options$rootBoundary = _options.rootBoundary,
          rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
          _options$elementConte = _options.elementContext,
          elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
          _options$altBoundary = _options.altBoundary,
          altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
          _options$padding = _options.padding,
          padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
      var altContext = elementContext === popper ? reference : popper;
      var referenceElement = state.elements.reference;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
      var referenceClientRect = getBoundingClientRect(referenceElement);
      var popperOffsets = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
      });
      var popperClientRect = rectToClientRect(Object.assign(Object.assign({}, popperRect), popperOffsets));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
      // 0 or negative = within the clipping rect

      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

      if (elementContext === popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function (key) {
          var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
          overflowOffsets[key] += offset[axis] * multiply;
        });
      }

      return overflowOffsets;
    }

    /*:: type OverflowsMap = { [ComputedPlacement]: number }; */

    /*;; type OverflowsMap = { [key in ComputedPlacement]: number }; */
    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          placement = _options.placement,
          boundary = _options.boundary,
          rootBoundary = _options.rootBoundary,
          padding = _options.padding,
          flipVariations = _options.flipVariations,
          _options$allowedAutoP = _options.allowedAutoPlacements,
          allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
        return getVariation(placement) === variation;
      }) : basePlacements; // $FlowFixMe

      var allowedPlacements = placements$1.filter(function (placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
      });

      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;

        if (process.env.NODE_ENV !== "production") {
          console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
        }
      } // $FlowFixMe: Flow seems to have problems with two array unions...


      var overflows = allowedPlacements.reduce(function (acc, placement) {
        acc[placement] = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding
        })[getBasePlacement(placement)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function (a, b) {
        return overflows[a] - overflows[b];
      });
    }

    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement(placement) === auto) {
        return [];
      }

      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }

    function flip(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;

      if (state.modifiersData[name]._skip) {
        return;
      }

      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
          specifiedFallbackPlacements = options.fallbackPlacements,
          padding = options.padding,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          _options$flipVariatio = options.flipVariations,
          flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
          allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
        return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding,
          flipVariations: flipVariations,
          allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements[0];

      for (var i = 0; i < placements.length; i++) {
        var placement = placements[i];

        var _basePlacement = getBasePlacement(placement);

        var isStartVariation = getVariation(placement) === start;
        var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          altBoundary: altBoundary,
          padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }

        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];

        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }

        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }

        if (checks.every(function (check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }

        checksMap.set(placement, checks);
      }

      if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;

        var _loop = function _loop(_i) {
          var fittingPlacement = placements.find(function (placement) {
            var checks = checksMap.get(placement);

            if (checks) {
              return checks.slice(0, _i).every(function (check) {
                return check;
              });
            }
          });

          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };

        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);

          if (_ret === "break") break;
        }
      }

      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    } // eslint-disable-next-line import/no-unused-modules


    var flip$1 = {
      name: 'flip',
      enabled: true,
      phase: 'main',
      fn: flip,
      requiresIfExists: ['offset'],
      data: {
        _skip: false
      }
    };

    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }

      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }

    function isAnySideFullyClipped(overflow) {
      return [top, right, bottom, left].some(function (side) {
        return overflow[side] >= 0;
      });
    }

    function hide(_ref) {
      var state = _ref.state,
          name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: 'reference'
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
      };
      state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
      });
    } // eslint-disable-next-line import/no-unused-modules


    var hide$1 = {
      name: 'hide',
      enabled: true,
      phase: 'main',
      requiresIfExists: ['preventOverflow'],
      fn: hide
    };

    function distanceAndSkiddingToXY(placement, rects, offset) {
      var basePlacement = getBasePlacement(placement);
      var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

      var _ref = typeof offset === 'function' ? offset(Object.assign(Object.assign({}, rects), {}, {
        placement: placement
      })) : offset,
          skidding = _ref[0],
          distance = _ref[1];

      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }

    function offset(_ref2) {
      var state = _ref2.state,
          options = _ref2.options,
          name = _ref2.name;
      var _options$offset = options.offset,
          offset = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function (acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement],
          x = _data$state$placement.x,
          y = _data$state$placement.y;

      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var offset$1 = {
      name: 'offset',
      enabled: true,
      phase: 'main',
      requires: ['popperOffsets'],
      fn: offset
    };

    function popperOffsets(_ref) {
      var state = _ref.state,
          name = _ref.name;
      // Offsets are the actual position the popper needs to have to be
      // properly positioned near its reference element
      // This is the most basic placement, and will be adjusted by
      // the modifiers in the next step
      state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var popperOffsets$1 = {
      name: 'popperOffsets',
      enabled: true,
      phase: 'read',
      fn: popperOffsets,
      data: {}
    };

    function getAltAxis(axis) {
      return axis === 'x' ? 'y' : 'x';
    }

    function preventOverflow(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;
      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          padding = options.padding,
          _options$tether = options.tether,
          tether = _options$tether === void 0 ? true : _options$tether,
          _options$tetherOffset = options.tetherOffset,
          tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
      });
      var basePlacement = getBasePlacement(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign(Object.assign({}, state.rects), {}, {
        placement: state.placement
      })) : tetherOffset;
      var data = {
        x: 0,
        y: 0
      };

      if (!popperOffsets) {
        return;
      }

      if (checkMainAxis) {
        var mainSide = mainAxis === 'y' ? top : left;
        var altSide = mainAxis === 'y' ? bottom : right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min = popperOffsets[mainAxis] + overflow[mainSide];
        var max = popperOffsets[mainAxis] - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds

        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)

        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
        var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? Math.min(min, tetherMin) : min, offset, tether ? Math.max(max, tetherMax) : max);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
      }

      if (checkAltAxis) {
        var _mainSide = mainAxis === 'x' ? top : left;

        var _altSide = mainAxis === 'x' ? bottom : right;

        var _offset = popperOffsets[altAxis];

        var _min = _offset + overflow[_mainSide];

        var _max = _offset - overflow[_altSide];

        var _preventedOffset = within(_min, _offset, _max);

        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var preventOverflow$1 = {
      name: 'preventOverflow',
      enabled: true,
      phase: 'main',
      fn: preventOverflow,
      requiresIfExists: ['offset']
    };

    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }

    function getNodeScroll(node) {
      if (node === getWindow(node) || !isHTMLElement(node)) {
        return getWindowScroll(node);
      } else {
        return getHTMLElementScroll(node);
      }
    }

    // Composite means it takes into account transforms as well as layout.

    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }

      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement);
      var isOffsetParentAnElement = isHTMLElement(offsetParent);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };

      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }

        if (isHTMLElement(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }

      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }

    function order(modifiers) {
      var map = new Map();
      var visited = new Set();
      var result = [];
      modifiers.forEach(function (modifier) {
        map.set(modifier.name, modifier);
      }); // On visiting object, check for its dependencies and visit them recursively

      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function (dep) {
          if (!visited.has(dep)) {
            var depModifier = map.get(dep);

            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }

      modifiers.forEach(function (modifier) {
        if (!visited.has(modifier.name)) {
          // check for visited object
          sort(modifier);
        }
      });
      return result;
    }

    function orderModifiers(modifiers) {
      // order based on dependencies
      var orderedModifiers = order(modifiers); // order based on phase

      return modifierPhases.reduce(function (acc, phase) {
        return acc.concat(orderedModifiers.filter(function (modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }

    function debounce(fn) {
      var pending;
      return function () {
        if (!pending) {
          pending = new Promise(function (resolve) {
            Promise.resolve().then(function () {
              pending = undefined;
              resolve(fn());
            });
          });
        }

        return pending;
      };
    }

    function format(str) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return [].concat(args).reduce(function (p, c) {
        return p.replace(/%s/, c);
      }, str);
    }

    var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
    var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
    var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
    function validateModifiers(modifiers) {
      modifiers.forEach(function (modifier) {
        Object.keys(modifier).forEach(function (key) {
          switch (key) {
            case 'name':
              if (typeof modifier.name !== 'string') {
                console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
              }

              break;

            case 'enabled':
              if (typeof modifier.enabled !== 'boolean') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
              }

            case 'phase':
              if (modifierPhases.indexOf(modifier.phase) < 0) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
              }

              break;

            case 'fn':
              if (typeof modifier.fn !== 'function') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
              }

              break;

            case 'effect':
              if (typeof modifier.effect !== 'function') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
              }

              break;

            case 'requires':
              if (!Array.isArray(modifier.requires)) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
              }

              break;

            case 'requiresIfExists':
              if (!Array.isArray(modifier.requiresIfExists)) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
              }

              break;

            case 'options':
            case 'data':
              break;

            default:
              console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
                return "\"" + s + "\"";
              }).join(', ') + "; but \"" + key + "\" was provided.");
          }

          modifier.requires && modifier.requires.forEach(function (requirement) {
            if (modifiers.find(function (mod) {
              return mod.name === requirement;
            }) == null) {
              console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
            }
          });
        });
      });
    }

    function uniqueBy(arr, fn) {
      var identifiers = new Set();
      return arr.filter(function (item) {
        var identifier = fn(item);

        if (!identifiers.has(identifier)) {
          identifiers.add(identifier);
          return true;
        }
      });
    }

    function mergeByName(modifiers) {
      var merged = modifiers.reduce(function (merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign(Object.assign(Object.assign({}, existing), current), {}, {
          options: Object.assign(Object.assign({}, existing.options), current.options),
          data: Object.assign(Object.assign({}, existing.data), current.data)
        }) : current;
        return merged;
      }, {}); // IE11 does not support Object.values

      return Object.keys(merged).map(function (key) {
        return merged[key];
      });
    }

    var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
    var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
    var DEFAULT_OPTIONS = {
      placement: 'bottom',
      modifiers: [],
      strategy: 'absolute'
    };

    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return !args.some(function (element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
      });
    }

    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }

      var _generatorOptions = generatorOptions,
          _generatorOptions$def = _generatorOptions.defaultModifiers,
          defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
          _generatorOptions$def2 = _generatorOptions.defaultOptions,
          defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
      return function createPopper(reference, popper, options) {
        if (options === void 0) {
          options = defaultOptions;
        }

        var state = {
          placement: 'bottom',
          orderedModifiers: [],
          options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference,
            popper: popper
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state: state,
          setOptions: function setOptions(options) {
            cleanupModifierEffects();
            state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options);
            state.scrollParents = {
              reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
              popper: listScrollParents(popper)
            }; // Orders the modifiers based on their dependencies and `phase`
            // properties

            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

            state.orderedModifiers = orderedModifiers.filter(function (m) {
              return m.enabled;
            }); // Validate the provided modifiers so that the consumer will get warned
            // if one of the modifiers is invalid for any reason

            if (process.env.NODE_ENV !== "production") {
              var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
                var name = _ref.name;
                return name;
              });
              validateModifiers(modifiers);

              if (getBasePlacement(state.options.placement) === auto) {
                var flipModifier = state.orderedModifiers.find(function (_ref2) {
                  var name = _ref2.name;
                  return name === 'flip';
                });

                if (!flipModifier) {
                  console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
                }
              }

              var _getComputedStyle = getComputedStyle(popper),
                  marginTop = _getComputedStyle.marginTop,
                  marginRight = _getComputedStyle.marginRight,
                  marginBottom = _getComputedStyle.marginBottom,
                  marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
              // cause bugs with positioning, so we'll warn the consumer


              if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
                return parseFloat(margin);
              })) {
                console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
              }
            }

            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }

            var _state$elements = state.elements,
                reference = _state$elements.reference,
                popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
            // anymore

            if (!areValidElements(reference, popper)) {
              if (process.env.NODE_ENV !== "production") {
                console.error(INVALID_ELEMENT_ERROR);
              }

              return;
            } // Store the reference and popper rects to be read by modifiers


            state.rects = {
              reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
              popper: getLayoutRect(popper)
            }; // Modifiers have the ability to reset the current update cycle. The
            // most common use case for this is the `flip` modifier changing the
            // placement, which then needs to re-run all the modifiers, because the
            // logic was previously ran for the previous placement and is therefore
            // stale/incorrect

            state.reset = false;
            state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
            // is filled with the initial data specified by the modifier. This means
            // it doesn't persist and is fresh on each update.
            // To ensure persistent data, use `${name}#persistent`

            state.orderedModifiers.forEach(function (modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });
            var __debug_loops__ = 0;

            for (var index = 0; index < state.orderedModifiers.length; index++) {
              if (process.env.NODE_ENV !== "production") {
                __debug_loops__ += 1;

                if (__debug_loops__ > 100) {
                  console.error(INFINITE_LOOP_ERROR);
                  break;
                }
              }

              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }

              var _state$orderedModifie = state.orderedModifiers[index],
                  fn = _state$orderedModifie.fn,
                  _state$orderedModifie2 = _state$orderedModifie.options,
                  _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                  name = _state$orderedModifie.name;

              if (typeof fn === 'function') {
                state = fn({
                  state: state,
                  options: _options,
                  name: name,
                  instance: instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce(function () {
            return new Promise(function (resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };

        if (!areValidElements(reference, popper)) {
          if (process.env.NODE_ENV !== "production") {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return instance;
        }

        instance.setOptions(options).then(function (state) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state);
          }
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.

        function runModifierEffects() {
          state.orderedModifiers.forEach(function (_ref3) {
            var name = _ref3.name,
                _ref3$options = _ref3.options,
                options = _ref3$options === void 0 ? {} : _ref3$options,
                effect = _ref3.effect;

            if (typeof effect === 'function') {
              var cleanupFn = effect({
                state: state,
                name: name,
                instance: instance,
                options: options
              });

              var noopFn = function noopFn() {};

              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }

        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function (fn) {
            return fn();
          });
          effectCleanupFns = [];
        }

        return instance;
      };
    }

    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /*#__PURE__*/popperGenerator({
      defaultModifiers: defaultModifiers
    }); // eslint-disable-next-line import/no-unused-modules

    /* src/components/Dropdowns/UserDropdown.svelte generated by Svelte v3.26.0 */
    const file$1 = "src/components/Dropdowns/UserDropdown.svelte";

    function create_fragment$3(ctx) {
    	let div3;
    	let a0;
    	let div0;
    	let span;
    	let img;
    	let img_src_value;
    	let t0;
    	let div2;
    	let a1;
    	let t2;
    	let a2;
    	let t4;
    	let a3;
    	let t6;
    	let div1;
    	let t7;
    	let a4;
    	let div2_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			a0 = element("a");
    			div0 = element("div");
    			span = element("span");
    			img = element("img");
    			t0 = space();
    			div2 = element("div");
    			a1 = element("a");
    			a1.textContent = "Action";
    			t2 = space();
    			a2 = element("a");
    			a2.textContent = "Another action";
    			t4 = space();
    			a3 = element("a");
    			a3.textContent = "Something else here";
    			t6 = space();
    			div1 = element("div");
    			t7 = space();
    			a4 = element("a");
    			a4.textContent = "Seprated link";
    			attr_dev(img, "alt", "...");
    			attr_dev(img, "class", "w-full rounded-full align-middle border-none shadow-lg");
    			if (img.src !== (img_src_value = image)) attr_dev(img, "src", img_src_value);
    			add_location(img, file$1, 31, 8, 838);
    			attr_dev(span, "class", "w-12 h-12 text-sm text-white bg-gray-300 inline-flex items-center justify-center rounded-full");
    			add_location(span, file$1, 28, 6, 706);
    			attr_dev(div0, "class", "items-center flex");
    			add_location(div0, file$1, 27, 4, 668);
    			attr_dev(a0, "class", "text-gray-600 block");
    			attr_dev(a0, "href", "#pablo");
    			add_location(a0, file$1, 21, 2, 542);
    			attr_dev(a1, "href", "#pablo");
    			attr_dev(a1, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a1, file$1, 43, 4, 1195);
    			attr_dev(a2, "href", "#pablo");
    			attr_dev(a2, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a2, file$1, 49, 4, 1392);
    			attr_dev(a3, "href", "#pablo");
    			attr_dev(a3, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a3, file$1, 55, 4, 1597);
    			attr_dev(div1, "class", "h-0 my-2 border border-solid border-gray-200");
    			add_location(div1, file$1, 61, 4, 1807);
    			attr_dev(a4, "href", "#pablo");
    			attr_dev(a4, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a4, file$1, 62, 4, 1872);
    			attr_dev(div2, "class", div2_class_value = "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48 " + (/*dropdownPopoverShow*/ ctx[0] ? "block" : "hidden"));
    			add_location(div2, file$1, 39, 2, 1005);
    			add_location(div3, file$1, 20, 0, 534);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, a0);
    			append_dev(a0, div0);
    			append_dev(div0, span);
    			append_dev(span, img);
    			/*a0_binding*/ ctx[4](a0);
    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			append_dev(div2, a1);
    			append_dev(div2, t2);
    			append_dev(div2, a2);
    			append_dev(div2, t4);
    			append_dev(div2, a3);
    			append_dev(div2, t6);
    			append_dev(div2, div1);
    			append_dev(div2, t7);
    			append_dev(div2, a4);
    			/*div2_binding*/ ctx[5](div2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(a0, "click", /*toggleDropdown*/ ctx[3], false, false, false),
    					listen_dev(a1, "click", click_handler, false, false, false),
    					listen_dev(a2, "click", click_handler_1, false, false, false),
    					listen_dev(a3, "click", click_handler_2, false, false, false),
    					listen_dev(a4, "click", click_handler_3, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*dropdownPopoverShow*/ 1 && div2_class_value !== (div2_class_value = "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48 " + (/*dropdownPopoverShow*/ ctx[0] ? "block" : "hidden"))) {
    				attr_dev(div2, "class", div2_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			/*a0_binding*/ ctx[4](null);
    			/*div2_binding*/ ctx[5](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const image = "../assets/img/team-1-800x800.jpg";
    const click_handler = e => e.preventDefault();
    const click_handler_1 = e => e.preventDefault();
    const click_handler_2 = e => e.preventDefault();
    const click_handler_3 = e => e.preventDefault();

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("UserDropdown", slots, []);
    	let dropdownPopoverShow = false;
    	let btnDropdownRef;
    	let popoverDropdownRef;

    	const toggleDropdown = event => {
    		event.preventDefault();

    		if (dropdownPopoverShow) {
    			$$invalidate(0, dropdownPopoverShow = false);
    		} else {
    			$$invalidate(0, dropdownPopoverShow = true);
    			createPopper(btnDropdownRef, popoverDropdownRef, { placement: "bottom-start" });
    		}
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<UserDropdown> was created with unknown prop '${key}'`);
    	});

    	function a0_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			btnDropdownRef = $$value;
    			$$invalidate(1, btnDropdownRef);
    		});
    	}

    	function div2_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			popoverDropdownRef = $$value;
    			$$invalidate(2, popoverDropdownRef);
    		});
    	}

    	$$self.$capture_state = () => ({
    		createPopper,
    		image,
    		dropdownPopoverShow,
    		btnDropdownRef,
    		popoverDropdownRef,
    		toggleDropdown
    	});

    	$$self.$inject_state = $$props => {
    		if ("dropdownPopoverShow" in $$props) $$invalidate(0, dropdownPopoverShow = $$props.dropdownPopoverShow);
    		if ("btnDropdownRef" in $$props) $$invalidate(1, btnDropdownRef = $$props.btnDropdownRef);
    		if ("popoverDropdownRef" in $$props) $$invalidate(2, popoverDropdownRef = $$props.popoverDropdownRef);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dropdownPopoverShow,
    		btnDropdownRef,
    		popoverDropdownRef,
    		toggleDropdown,
    		a0_binding,
    		div2_binding
    	];
    }

    class UserDropdown extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserDropdown",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src/components/Navbars/AdminNavbar.svelte generated by Svelte v3.26.0 */
    const file$2 = "src/components/Navbars/AdminNavbar.svelte";

    function create_fragment$4(ctx) {
    	let nav;
    	let div1;
    	let a;
    	let t1;
    	let form;
    	let div0;
    	let span;
    	let i;
    	let t2;
    	let input;
    	let t3;
    	let ul;
    	let userdropdown;
    	let current;
    	let mounted;
    	let dispose;
    	userdropdown = new UserDropdown({ $$inline: true });

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			div1 = element("div");
    			a = element("a");
    			a.textContent = "Dashboard";
    			t1 = space();
    			form = element("form");
    			div0 = element("div");
    			span = element("span");
    			i = element("i");
    			t2 = space();
    			input = element("input");
    			t3 = space();
    			ul = element("ul");
    			create_component(userdropdown.$$.fragment);
    			attr_dev(a, "class", "text-white text-sm uppercase hidden lg:inline-block font-semibold");
    			attr_dev(a, "href", "#pablo");
    			add_location(a, file$2, 11, 4, 390);
    			attr_dev(i, "class", "fas fa-search");
    			add_location(i, file$2, 25, 10, 945);
    			attr_dev(span, "class", "z-10 h-full leading-snug font-normal absolute text-center text-gray-400 absolute bg-transparent rounded text-base items-center justify-center w-8 pl-3 py-3");
    			add_location(span, file$2, 22, 8, 745);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "Search here...");
    			attr_dev(input, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 relative bg-white bg-white rounded text-sm shadow outline-none focus:outline-none focus:shadow-outline w-full pl-10");
    			add_location(input, file$2, 27, 8, 999);
    			attr_dev(div0, "class", "relative flex w-full flex-wrap items-stretch");
    			add_location(div0, file$2, 21, 6, 678);
    			attr_dev(form, "class", "md:flex hidden flex-row flex-wrap items-center lg:ml-auto mr-3");
    			add_location(form, file$2, 18, 4, 583);
    			attr_dev(ul, "class", "flex-col md:flex-row list-none items-center hidden md:flex");
    			add_location(ul, file$2, 35, 4, 1304);
    			attr_dev(div1, "class", "w-full mx-autp items-center flex justify-between md:flex-no-wrap flex-wrap md:px-10 px-4");
    			add_location(div1, file$2, 7, 2, 257);
    			attr_dev(nav, "class", "absolute top-0 left-0 w-full z-10 bg-transparent md:flex-row md:flex-no-wrap md:justify-start flex items-center p-4");
    			add_location(nav, file$2, 4, 0, 122);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div1);
    			append_dev(div1, a);
    			append_dev(div1, t1);
    			append_dev(div1, form);
    			append_dev(form, div0);
    			append_dev(div0, span);
    			append_dev(span, i);
    			append_dev(div0, t2);
    			append_dev(div0, input);
    			append_dev(div1, t3);
    			append_dev(div1, ul);
    			mount_component(userdropdown, ul, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(a, "click", click_handler$1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(userdropdown.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(userdropdown.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			destroy_component(userdropdown);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const click_handler$1 = e => e.preventDefault();

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("AdminNavbar", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<AdminNavbar> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ UserDropdown });
    	return [];
    }

    class AdminNavbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AdminNavbar",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src/components/Dropdowns/NotificationDropdown.svelte generated by Svelte v3.26.0 */
    const file$3 = "src/components/Dropdowns/NotificationDropdown.svelte";

    function create_fragment$5(ctx) {
    	let div2;
    	let a0;
    	let i;
    	let t0;
    	let div1;
    	let a1;
    	let t2;
    	let a2;
    	let t4;
    	let a3;
    	let t6;
    	let div0;
    	let t7;
    	let a4;
    	let div1_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			a0 = element("a");
    			i = element("i");
    			t0 = space();
    			div1 = element("div");
    			a1 = element("a");
    			a1.textContent = "Action";
    			t2 = space();
    			a2 = element("a");
    			a2.textContent = "Another action";
    			t4 = space();
    			a3 = element("a");
    			a3.textContent = "Something else here";
    			t6 = space();
    			div0 = element("div");
    			t7 = space();
    			a4 = element("a");
    			a4.textContent = "Seprated link";
    			attr_dev(i, "class", "fas fa-bell");
    			add_location(i, file$3, 26, 4, 628);
    			attr_dev(a0, "class", "text-gray-600 block py-1 px-3");
    			attr_dev(a0, "href", "#pablo");
    			add_location(a0, file$3, 20, 2, 492);
    			attr_dev(a1, "href", "#pablo");
    			attr_dev(a1, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a1, file$3, 32, 4, 855);
    			attr_dev(a2, "href", "#pablo");
    			attr_dev(a2, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a2, file$3, 38, 4, 1052);
    			attr_dev(a3, "href", "#pablo");
    			attr_dev(a3, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a3, file$3, 44, 4, 1257);
    			attr_dev(div0, "class", "h-0 my-2 border border-solid border-gray-200");
    			add_location(div0, file$3, 50, 4, 1467);
    			attr_dev(a4, "href", "#pablo");
    			attr_dev(a4, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a4, file$3, 51, 4, 1532);
    			attr_dev(div1, "class", div1_class_value = "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48 " + (/*dropdownPopoverShow*/ ctx[0] ? "block" : "hidden"));
    			add_location(div1, file$3, 28, 2, 665);
    			add_location(div2, file$3, 19, 0, 484);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, a0);
    			append_dev(a0, i);
    			/*a0_binding*/ ctx[4](a0);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div1, a1);
    			append_dev(div1, t2);
    			append_dev(div1, a2);
    			append_dev(div1, t4);
    			append_dev(div1, a3);
    			append_dev(div1, t6);
    			append_dev(div1, div0);
    			append_dev(div1, t7);
    			append_dev(div1, a4);
    			/*div1_binding*/ ctx[5](div1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(a0, "click", /*toggleDropdown*/ ctx[3], false, false, false),
    					listen_dev(a1, "click", click_handler$2, false, false, false),
    					listen_dev(a2, "click", click_handler_1$1, false, false, false),
    					listen_dev(a3, "click", click_handler_2$1, false, false, false),
    					listen_dev(a4, "click", click_handler_3$1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*dropdownPopoverShow*/ 1 && div1_class_value !== (div1_class_value = "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48 " + (/*dropdownPopoverShow*/ ctx[0] ? "block" : "hidden"))) {
    				attr_dev(div1, "class", div1_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			/*a0_binding*/ ctx[4](null);
    			/*div1_binding*/ ctx[5](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const click_handler$2 = e => e.preventDefault();
    const click_handler_1$1 = e => e.preventDefault();
    const click_handler_2$1 = e => e.preventDefault();
    const click_handler_3$1 = e => e.preventDefault();

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("NotificationDropdown", slots, []);
    	let dropdownPopoverShow = false;
    	let btnDropdownRef;
    	let popoverDropdownRef;

    	const toggleDropdown = event => {
    		event.preventDefault();

    		if (dropdownPopoverShow) {
    			$$invalidate(0, dropdownPopoverShow = false);
    		} else {
    			$$invalidate(0, dropdownPopoverShow = true);
    			createPopper(btnDropdownRef, popoverDropdownRef, { placement: "bottom-start" });
    		}
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<NotificationDropdown> was created with unknown prop '${key}'`);
    	});

    	function a0_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			btnDropdownRef = $$value;
    			$$invalidate(1, btnDropdownRef);
    		});
    	}

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			popoverDropdownRef = $$value;
    			$$invalidate(2, popoverDropdownRef);
    		});
    	}

    	$$self.$capture_state = () => ({
    		createPopper,
    		dropdownPopoverShow,
    		btnDropdownRef,
    		popoverDropdownRef,
    		toggleDropdown
    	});

    	$$self.$inject_state = $$props => {
    		if ("dropdownPopoverShow" in $$props) $$invalidate(0, dropdownPopoverShow = $$props.dropdownPopoverShow);
    		if ("btnDropdownRef" in $$props) $$invalidate(1, btnDropdownRef = $$props.btnDropdownRef);
    		if ("popoverDropdownRef" in $$props) $$invalidate(2, popoverDropdownRef = $$props.popoverDropdownRef);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dropdownPopoverShow,
    		btnDropdownRef,
    		popoverDropdownRef,
    		toggleDropdown,
    		a0_binding,
    		div1_binding
    	];
    }

    class NotificationDropdown extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NotificationDropdown",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* src/components/Sidebar/Sidebar.svelte generated by Svelte v3.26.0 */
    const file$4 = "src/components/Sidebar/Sidebar.svelte";

    function create_fragment$6(ctx) {
    	let nav;
    	let div6;
    	let button0;
    	let i0;
    	let t0;
    	let a0;
    	let link_action;
    	let t2;
    	let ul0;
    	let li0;
    	let notificationdropdown;
    	let t3;
    	let li1;
    	let userdropdown;
    	let t4;
    	let div5;
    	let div3;
    	let div2;
    	let div0;
    	let a1;
    	let link_action_1;
    	let t6;
    	let div1;
    	let button1;
    	let i1;
    	let t7;
    	let form;
    	let div4;
    	let input;
    	let t8;
    	let hr0;
    	let t9;
    	let h60;
    	let t11;
    	let ul1;
    	let li2;
    	let a2;
    	let i2;
    	let i2_class_value;
    	let t12;
    	let a2_class_value;
    	let link_action_2;
    	let t13;
    	let li3;
    	let a3;
    	let i3;
    	let i3_class_value;
    	let t14;
    	let a3_class_value;
    	let link_action_3;
    	let t15;
    	let li4;
    	let a4;
    	let i4;
    	let i4_class_value;
    	let t16;
    	let a4_class_value;
    	let link_action_4;
    	let t17;
    	let li5;
    	let a5;
    	let i5;
    	let i5_class_value;
    	let t18;
    	let a5_class_value;
    	let link_action_5;
    	let t19;
    	let hr1;
    	let t20;
    	let h61;
    	let t22;
    	let ul2;
    	let li6;
    	let a6;
    	let i6;
    	let t23;
    	let link_action_6;
    	let t24;
    	let li7;
    	let a7;
    	let i7;
    	let t25;
    	let link_action_7;
    	let t26;
    	let hr2;
    	let t27;
    	let h62;
    	let t29;
    	let ul3;
    	let li8;
    	let a8;
    	let i8;
    	let t30;
    	let link_action_8;
    	let t31;
    	let li9;
    	let a9;
    	let i9;
    	let t32;
    	let link_action_9;
    	let t33;
    	let hr3;
    	let t34;
    	let h63;
    	let t36;
    	let ul4;
    	let li10;
    	let a10;
    	let i10;
    	let t37;
    	let t38;
    	let li11;
    	let a11;
    	let i11;
    	let t39;
    	let t40;
    	let li12;
    	let a12;
    	let i12;
    	let t41;
    	let t42;
    	let li13;
    	let a13;
    	let i13;
    	let t43;
    	let t44;
    	let li14;
    	let a14;
    	let i14;
    	let t45;
    	let t46;
    	let li15;
    	let a15;
    	let i15;
    	let t47;
    	let t48;
    	let li16;
    	let a16;
    	let i16;
    	let t49;
    	let t50;
    	let li17;
    	let a17;
    	let i17;
    	let t51;
    	let div5_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	notificationdropdown = new NotificationDropdown({ $$inline: true });
    	userdropdown = new UserDropdown({ $$inline: true });

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			div6 = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t0 = space();
    			a0 = element("a");
    			a0.textContent = "Tailwind WebApp Svelte";
    			t2 = space();
    			ul0 = element("ul");
    			li0 = element("li");
    			create_component(notificationdropdown.$$.fragment);
    			t3 = space();
    			li1 = element("li");
    			create_component(userdropdown.$$.fragment);
    			t4 = space();
    			div5 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			a1 = element("a");
    			a1.textContent = "Tailwind WebApp Svelte";
    			t6 = space();
    			div1 = element("div");
    			button1 = element("button");
    			i1 = element("i");
    			t7 = space();
    			form = element("form");
    			div4 = element("div");
    			input = element("input");
    			t8 = space();
    			hr0 = element("hr");
    			t9 = space();
    			h60 = element("h6");
    			h60.textContent = "Admin Layout Pages";
    			t11 = space();
    			ul1 = element("ul");
    			li2 = element("li");
    			a2 = element("a");
    			i2 = element("i");
    			t12 = text("\n            Dashboard");
    			t13 = space();
    			li3 = element("li");
    			a3 = element("a");
    			i3 = element("i");
    			t14 = text("\n            Settings");
    			t15 = space();
    			li4 = element("li");
    			a4 = element("a");
    			i4 = element("i");
    			t16 = text("\n            Tables");
    			t17 = space();
    			li5 = element("li");
    			a5 = element("a");
    			i5 = element("i");
    			t18 = text("\n            Maps");
    			t19 = space();
    			hr1 = element("hr");
    			t20 = space();
    			h61 = element("h6");
    			h61.textContent = "Auth Layout Pages";
    			t22 = space();
    			ul2 = element("ul");
    			li6 = element("li");
    			a6 = element("a");
    			i6 = element("i");
    			t23 = text("\n            Login");
    			t24 = space();
    			li7 = element("li");
    			a7 = element("a");
    			i7 = element("i");
    			t25 = text("\n            Register");
    			t26 = space();
    			hr2 = element("hr");
    			t27 = space();
    			h62 = element("h6");
    			h62.textContent = "No Layout Pages";
    			t29 = space();
    			ul3 = element("ul");
    			li8 = element("li");
    			a8 = element("a");
    			i8 = element("i");
    			t30 = text("\n            Landing Page");
    			t31 = space();
    			li9 = element("li");
    			a9 = element("a");
    			i9 = element("i");
    			t32 = text("\n            Profile Page");
    			t33 = space();
    			hr3 = element("hr");
    			t34 = space();
    			h63 = element("h6");
    			h63.textContent = "Documentation";
    			t36 = space();
    			ul4 = element("ul");
    			li10 = element("li");
    			a10 = element("a");
    			i10 = element("i");
    			t37 = text("\n            Styles");
    			t38 = space();
    			li11 = element("li");
    			a11 = element("a");
    			i11 = element("i");
    			t39 = text("\n            CSS Components");
    			t40 = space();
    			li12 = element("li");
    			a12 = element("a");
    			i12 = element("i");
    			t41 = text("\n            Angular");
    			t42 = space();
    			li13 = element("li");
    			a13 = element("a");
    			i13 = element("i");
    			t43 = text("\n            Javascript");
    			t44 = space();
    			li14 = element("li");
    			a14 = element("a");
    			i14 = element("i");
    			t45 = text("\n            NextJS");
    			t46 = space();
    			li15 = element("li");
    			a15 = element("a");
    			i15 = element("i");
    			t47 = text("\n            React");
    			t48 = space();
    			li16 = element("li");
    			a16 = element("a");
    			i16 = element("i");
    			t49 = text("\n            Svelte");
    			t50 = space();
    			li17 = element("li");
    			a17 = element("a");
    			i17 = element("i");
    			t51 = text("\n            VueJS");
    			attr_dev(i0, "class", "fas fa-bars");
    			add_location(i0, file$4, 22, 6, 1009);
    			attr_dev(button0, "class", "cursor-pointer text-black opacity-50 md:hidden px-3 py-1 text-xl leading-none bg-transparent rounded border border-solid border-transparent");
    			attr_dev(button0, "type", "button");
    			add_location(button0, file$4, 17, 4, 747);
    			attr_dev(a0, "class", "md:block text-left md:pb-2 text-gray-700 mr-0 inline-block whitespace-no-wrap text-sm uppercase font-bold p-4 px-0");
    			attr_dev(a0, "href", "/");
    			add_location(a0, file$4, 25, 4, 1074);
    			attr_dev(li0, "class", "inline-block relative");
    			add_location(li0, file$4, 34, 6, 1369);
    			attr_dev(li1, "class", "inline-block relative");
    			add_location(li1, file$4, 37, 6, 1455);
    			attr_dev(ul0, "class", "md:hidden items-center flex flex-wrap list-none");
    			add_location(ul0, file$4, 33, 4, 1302);
    			attr_dev(a1, "class", "md:block text-left md:pb-2 text-gray-700 mr-0 inline-block whitespace-no-wrap text-sm uppercase font-bold p-4 px-0");
    			attr_dev(a1, "href", "/");
    			add_location(a1, file$4, 51, 12, 2025);
    			attr_dev(div0, "class", "w-6/12");
    			add_location(div0, file$4, 50, 10, 1992);
    			attr_dev(i1, "class", "fas fa-times");
    			add_location(i1, file$4, 65, 14, 2642);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "cursor-pointer text-black opacity-50 md:hidden px-3 py-1 text-xl leading-none bg-transparent rounded border border-solid border-transparent");
    			add_location(button1, file$4, 60, 12, 2356);
    			attr_dev(div1, "class", "w-6/12 flex justify-end");
    			add_location(div1, file$4, 59, 10, 2306);
    			attr_dev(div2, "class", "flex flex-wrap");
    			add_location(div2, file$4, 49, 8, 1953);
    			attr_dev(div3, "class", "md:min-w-full md:hidden block pb-4 mb-4 border-b border-solid border-gray-300");
    			add_location(div3, file$4, 46, 6, 1838);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "Search");
    			attr_dev(input, "class", "px-3 py-2 h-12 border border-solid border-gray-600 placeholder-gray-400 text-gray-700 bg-white rounded text-base leading-snug shadow-none outline-none focus:outline-none w-full font-normal");
    			add_location(input, file$4, 73, 10, 2841);
    			attr_dev(div4, "class", "mb-3 pt-0");
    			add_location(div4, file$4, 72, 8, 2807);
    			attr_dev(form, "class", "mt-6 mb-4 md:hidden");
    			add_location(form, file$4, 71, 6, 2764);
    			attr_dev(hr0, "class", "my-4 md:min-w-full");
    			add_location(hr0, file$4, 82, 6, 3186);
    			attr_dev(h60, "class", "md:min-w-full text-gray-600 text-xs uppercase font-bold block pt-1 pb-4 no-underline");
    			add_location(h60, file$4, 84, 6, 3249);

    			attr_dev(i2, "class", i2_class_value = "fas fa-tv mr-2 text-sm " + (/*location*/ ctx[0].href.indexOf("/admin/dashboard") !== -1
    			? "opacity-75"
    			: "text-gray-400"));

    			add_location(i2, file$4, 98, 12, 3807);
    			attr_dev(a2, "href", "/admin/dashboard");

    			attr_dev(a2, "class", a2_class_value = "text-xs uppercase py-3 font-bold block " + (/*location*/ ctx[0].href.indexOf("/admin/dashboard") !== -1
    			? "text-red-500 hover:text-red-600"
    			: "text-gray-800 hover:text-gray-600"));

    			add_location(a2, file$4, 93, 10, 3541);
    			attr_dev(li2, "class", "items-center");
    			add_location(li2, file$4, 92, 8, 3505);

    			attr_dev(i3, "class", i3_class_value = "fas fa-tools mr-2 text-sm " + (/*location*/ ctx[0].href.indexOf("/admin/settings") !== -1
    			? "opacity-75"
    			: "text-gray-400"));

    			add_location(i3, file$4, 111, 12, 4317);
    			attr_dev(a3, "href", "/admin/settings");

    			attr_dev(a3, "class", a3_class_value = "text-xs uppercase py-3 font-bold block " + (/*location*/ ctx[0].href.indexOf("/admin/settings") !== -1
    			? "text-red-500 hover:text-red-600"
    			: "text-gray-800 hover:text-gray-600"));

    			add_location(a3, file$4, 106, 10, 4053);
    			attr_dev(li3, "class", "items-center");
    			add_location(li3, file$4, 105, 8, 4017);

    			attr_dev(i4, "class", i4_class_value = "fas fa-table mr-2 text-sm " + (/*location*/ ctx[0].href.indexOf("/admin/tables") !== -1
    			? "opacity-75"
    			: "text-gray-400"));

    			add_location(i4, file$4, 124, 12, 4824);
    			attr_dev(a4, "href", "/admin/tables");

    			attr_dev(a4, "class", a4_class_value = "text-xs uppercase py-3 font-bold block " + (/*location*/ ctx[0].href.indexOf("/admin/tables") !== -1
    			? "text-red-500 hover:text-red-600"
    			: "text-gray-800 hover:text-gray-600"));

    			add_location(a4, file$4, 119, 10, 4564);
    			attr_dev(li4, "class", "items-center");
    			add_location(li4, file$4, 118, 8, 4528);

    			attr_dev(i5, "class", i5_class_value = "fas fa-map-marked mr-2 text-sm " + (/*location*/ ctx[0].href.indexOf("/admin/maps") !== -1
    			? "opacity-75"
    			: "text-gray-400"));

    			add_location(i5, file$4, 137, 12, 5323);
    			attr_dev(a5, "href", "/admin/maps");

    			attr_dev(a5, "class", a5_class_value = "text-xs uppercase py-3 font-bold block " + (/*location*/ ctx[0].href.indexOf("/admin/maps") !== -1
    			? "text-red-500 hover:text-red-600"
    			: "text-gray-800 hover:text-gray-600"));

    			add_location(a5, file$4, 132, 10, 5067);
    			attr_dev(li5, "class", "items-center");
    			add_location(li5, file$4, 131, 8, 5031);
    			attr_dev(ul1, "class", "md:flex-col md:min-w-full flex flex-col list-none");
    			add_location(ul1, file$4, 91, 6, 3434);
    			attr_dev(hr1, "class", "my-4 md:min-w-full");
    			add_location(hr1, file$4, 146, 6, 5564);
    			attr_dev(h61, "class", "md:min-w-full text-gray-600 text-xs uppercase font-bold block pt-1 pb-4 no-underline");
    			add_location(h61, file$4, 148, 6, 5627);
    			attr_dev(i6, "class", "fas fa-fingerprint text-gray-400 mr-2 text-sm");
    			add_location(i6, file$4, 162, 12, 6098);
    			attr_dev(a6, "class", "text-gray-800 hover:text-gray-600 text-xs uppercase py-3 font-bold block");
    			attr_dev(a6, "href", "/auth/login");
    			add_location(a6, file$4, 157, 10, 5926);
    			attr_dev(li6, "class", "items-center");
    			add_location(li6, file$4, 156, 8, 5890);
    			attr_dev(i7, "class", "fas fa-clipboard-list text-gray-400 mr-2 text-sm");
    			add_location(i7, file$4, 173, 12, 6427);
    			attr_dev(a7, "class", "text-gray-800 hover:text-gray-600 text-xs uppercase py-3 font-bold block");
    			attr_dev(a7, "href", "/auth/register");
    			add_location(a7, file$4, 168, 10, 6252);
    			attr_dev(li7, "class", "items-center");
    			add_location(li7, file$4, 167, 8, 6216);
    			attr_dev(ul2, "class", "md:flex-col md:min-w-full flex flex-col list-none md:mb-4");
    			add_location(ul2, file$4, 155, 6, 5811);
    			attr_dev(hr2, "class", "my-4 md:min-w-full");
    			add_location(hr2, file$4, 180, 6, 6584);
    			attr_dev(h62, "class", "md:min-w-full text-gray-600 text-xs uppercase font-bold block pt-1 pb-4 no-underline");
    			add_location(h62, file$4, 182, 6, 6647);
    			attr_dev(i8, "class", "fas fa-newspaper text-gray-400 mr-2 text-sm");
    			add_location(i8, file$4, 196, 12, 7113);
    			attr_dev(a8, "class", "text-gray-800 hover:text-gray-600 text-xs uppercase py-3 font-bold block");
    			attr_dev(a8, "href", "/landing");
    			add_location(a8, file$4, 191, 10, 6944);
    			attr_dev(li8, "class", "items-center");
    			add_location(li8, file$4, 190, 8, 6908);
    			attr_dev(i9, "class", "fas fa-user-circle text-gray-400 mr-2 text-sm");
    			add_location(i9, file$4, 207, 12, 7441);
    			attr_dev(a9, "class", "text-gray-800 hover:text-gray-600 text-xs uppercase py-3 font-bold block");
    			attr_dev(a9, "href", "/profile");
    			add_location(a9, file$4, 202, 10, 7272);
    			attr_dev(li9, "class", "items-center");
    			add_location(li9, file$4, 201, 8, 7236);
    			attr_dev(ul3, "class", "md:flex-col md:min-w-full flex flex-col list-none md:mb-4");
    			add_location(ul3, file$4, 189, 6, 6829);
    			attr_dev(hr3, "class", "my-4 md:min-w-full");
    			add_location(hr3, file$4, 214, 6, 7599);
    			attr_dev(h63, "class", "md:min-w-full text-gray-600 text-xs uppercase font-bold block pt-1 pb-4 no-underline");
    			add_location(h63, file$4, 216, 6, 7662);
    			attr_dev(i10, "class", "fas fa-paint-brush mr-2 text-gray-400 text-base");
    			add_location(i10, file$4, 229, 12, 8201);
    			attr_dev(a10, "href", "https://www.creative-tim.com/learning-lab/tailwind/svelte/colors/webapp");
    			attr_dev(a10, "target", "_blank");
    			attr_dev(a10, "class", "text-gray-800 hover:text-gray-600 text-sm block mb-4 no-underline font-semibold");
    			add_location(a10, file$4, 224, 10, 7955);
    			attr_dev(li10, "class", "inline-flex");
    			add_location(li10, file$4, 223, 8, 7920);
    			attr_dev(i11, "class", "fab fa-css3-alt mr-2 text-gray-400 text-base");
    			add_location(i11, file$4, 240, 12, 8603);
    			attr_dev(a11, "href", "https://www.creative-tim.com/learning-lab/tailwind/svelte/alerts/webapp");
    			attr_dev(a11, "target", "_blank");
    			attr_dev(a11, "class", "text-gray-800 hover:text-gray-600 text-sm block mb-4 no-underline font-semibold");
    			add_location(a11, file$4, 235, 10, 8357);
    			attr_dev(li11, "class", "inline-flex");
    			add_location(li11, file$4, 234, 8, 8322);
    			attr_dev(i12, "class", "fab fa-angular mr-2 text-gray-400 text-base");
    			add_location(i12, file$4, 251, 12, 9013);
    			attr_dev(a12, "href", "https://www.creative-tim.com/learning-lab/tailwind/angular/overview/webapp");
    			attr_dev(a12, "target", "_blank");
    			attr_dev(a12, "class", "text-gray-800 hover:text-gray-600 text-sm block mb-4 no-underline font-semibold");
    			add_location(a12, file$4, 246, 10, 8764);
    			attr_dev(li12, "class", "inline-flex");
    			add_location(li12, file$4, 245, 8, 8729);
    			attr_dev(i13, "class", "fab fa-js-square mr-2 text-gray-400 text-base");
    			add_location(i13, file$4, 262, 12, 9410);
    			attr_dev(a13, "href", "https://www.creative-tim.com/learning-lab/tailwind/js/overview/webapp");
    			attr_dev(a13, "target", "_blank");
    			attr_dev(a13, "class", "text-gray-800 hover:text-gray-600 text-sm block mb-4 no-underline font-semibold");
    			add_location(a13, file$4, 257, 10, 9166);
    			attr_dev(li13, "class", "inline-flex");
    			add_location(li13, file$4, 256, 8, 9131);
    			attr_dev(i14, "class", "fab fa-react mr-2 text-gray-400 text-base");
    			add_location(i14, file$4, 273, 12, 9816);
    			attr_dev(a14, "href", "https://www.creative-tim.com/learning-lab/tailwind/nextjs/overview/webapp");
    			attr_dev(a14, "target", "_blank");
    			attr_dev(a14, "class", "text-gray-800 hover:text-gray-600 text-sm block mb-4 no-underline font-semibold");
    			add_location(a14, file$4, 268, 10, 9568);
    			attr_dev(li14, "class", "inline-flex");
    			add_location(li14, file$4, 267, 8, 9533);
    			attr_dev(i15, "class", "fab fa-react mr-2 text-gray-400 text-base");
    			add_location(i15, file$4, 284, 12, 10213);
    			attr_dev(a15, "href", "https://www.creative-tim.com/learning-lab/tailwind/react/overview/webapp");
    			attr_dev(a15, "target", "_blank");
    			attr_dev(a15, "class", "text-gray-800 hover:text-gray-600 text-sm block mb-4 no-underline font-semibold");
    			add_location(a15, file$4, 279, 10, 9966);
    			attr_dev(li15, "class", "inline-flex");
    			add_location(li15, file$4, 278, 8, 9931);
    			attr_dev(i16, "class", "fas fa-link mr-2 text-gray-400 text-base");
    			add_location(i16, file$4, 295, 12, 10610);
    			attr_dev(a16, "href", "https://www.creative-tim.com/learning-lab/tailwind/svelte/overview/webapp");
    			attr_dev(a16, "target", "_blank");
    			attr_dev(a16, "class", "text-gray-800 hover:text-gray-600 text-sm block mb-4 no-underline font-semibold");
    			add_location(a16, file$4, 290, 10, 10362);
    			attr_dev(li16, "class", "inline-flex");
    			add_location(li16, file$4, 289, 8, 10327);
    			attr_dev(i17, "class", "fab fa-vuejs mr-2 text-gray-400 text-base");
    			add_location(i17, file$4, 306, 12, 11004);
    			attr_dev(a17, "href", "https://www.creative-tim.com/learning-lab/tailwind/vue/overview/webapp");
    			attr_dev(a17, "target", "_blank");
    			attr_dev(a17, "class", "text-gray-800 hover:text-gray-600 text-sm block mb-4 no-underline font-semibold");
    			add_location(a17, file$4, 301, 10, 10759);
    			attr_dev(li17, "class", "inline-flex");
    			add_location(li17, file$4, 300, 8, 10724);
    			attr_dev(ul4, "class", "md:flex-col md:min-w-full flex flex-col list-none md:mb-4");
    			add_location(ul4, file$4, 222, 6, 7841);
    			attr_dev(div5, "class", div5_class_value = "md:flex md:flex-col md:items-stretch md:opacity-100 md:relative md:mt-4 md:shadow-none shadow absolute top-0 left-0 right-0 z-40 overflow-y-auto overflow-x-hidden h-auto items-center flex-1 rounded " + /*collapseShow*/ ctx[1]);
    			add_location(div5, file$4, 42, 4, 1563);
    			attr_dev(div6, "class", "md:flex-col md:items-stretch md:min-h-full md:flex-no-wrap px-0 flex flex-wrap items-center justify-between w-full mx-auto");
    			add_location(div6, file$4, 13, 2, 578);
    			attr_dev(nav, "class", "md:left-0 md:block md:fixed md:top-0 md:bottom-0 md:overflow-y-auto md:flex-row md:flex-no-wrap md:overflow-hidden shadow-xl bg-white flex flex-wrap items-center justify-between relative md:w-64 z-10 py-4 px-6");
    			add_location(nav, file$4, 10, 0, 349);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div6);
    			append_dev(div6, button0);
    			append_dev(button0, i0);
    			append_dev(div6, t0);
    			append_dev(div6, a0);
    			append_dev(div6, t2);
    			append_dev(div6, ul0);
    			append_dev(ul0, li0);
    			mount_component(notificationdropdown, li0, null);
    			append_dev(ul0, t3);
    			append_dev(ul0, li1);
    			mount_component(userdropdown, li1, null);
    			append_dev(div6, t4);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, a1);
    			append_dev(div2, t6);
    			append_dev(div2, div1);
    			append_dev(div1, button1);
    			append_dev(button1, i1);
    			append_dev(div5, t7);
    			append_dev(div5, form);
    			append_dev(form, div4);
    			append_dev(div4, input);
    			append_dev(div5, t8);
    			append_dev(div5, hr0);
    			append_dev(div5, t9);
    			append_dev(div5, h60);
    			append_dev(div5, t11);
    			append_dev(div5, ul1);
    			append_dev(ul1, li2);
    			append_dev(li2, a2);
    			append_dev(a2, i2);
    			append_dev(a2, t12);
    			append_dev(ul1, t13);
    			append_dev(ul1, li3);
    			append_dev(li3, a3);
    			append_dev(a3, i3);
    			append_dev(a3, t14);
    			append_dev(ul1, t15);
    			append_dev(ul1, li4);
    			append_dev(li4, a4);
    			append_dev(a4, i4);
    			append_dev(a4, t16);
    			append_dev(ul1, t17);
    			append_dev(ul1, li5);
    			append_dev(li5, a5);
    			append_dev(a5, i5);
    			append_dev(a5, t18);
    			append_dev(div5, t19);
    			append_dev(div5, hr1);
    			append_dev(div5, t20);
    			append_dev(div5, h61);
    			append_dev(div5, t22);
    			append_dev(div5, ul2);
    			append_dev(ul2, li6);
    			append_dev(li6, a6);
    			append_dev(a6, i6);
    			append_dev(a6, t23);
    			append_dev(ul2, t24);
    			append_dev(ul2, li7);
    			append_dev(li7, a7);
    			append_dev(a7, i7);
    			append_dev(a7, t25);
    			append_dev(div5, t26);
    			append_dev(div5, hr2);
    			append_dev(div5, t27);
    			append_dev(div5, h62);
    			append_dev(div5, t29);
    			append_dev(div5, ul3);
    			append_dev(ul3, li8);
    			append_dev(li8, a8);
    			append_dev(a8, i8);
    			append_dev(a8, t30);
    			append_dev(ul3, t31);
    			append_dev(ul3, li9);
    			append_dev(li9, a9);
    			append_dev(a9, i9);
    			append_dev(a9, t32);
    			append_dev(div5, t33);
    			append_dev(div5, hr3);
    			append_dev(div5, t34);
    			append_dev(div5, h63);
    			append_dev(div5, t36);
    			append_dev(div5, ul4);
    			append_dev(ul4, li10);
    			append_dev(li10, a10);
    			append_dev(a10, i10);
    			append_dev(a10, t37);
    			append_dev(ul4, t38);
    			append_dev(ul4, li11);
    			append_dev(li11, a11);
    			append_dev(a11, i11);
    			append_dev(a11, t39);
    			append_dev(ul4, t40);
    			append_dev(ul4, li12);
    			append_dev(li12, a12);
    			append_dev(a12, i12);
    			append_dev(a12, t41);
    			append_dev(ul4, t42);
    			append_dev(ul4, li13);
    			append_dev(li13, a13);
    			append_dev(a13, i13);
    			append_dev(a13, t43);
    			append_dev(ul4, t44);
    			append_dev(ul4, li14);
    			append_dev(li14, a14);
    			append_dev(a14, i14);
    			append_dev(a14, t45);
    			append_dev(ul4, t46);
    			append_dev(ul4, li15);
    			append_dev(li15, a15);
    			append_dev(a15, i15);
    			append_dev(a15, t47);
    			append_dev(ul4, t48);
    			append_dev(ul4, li16);
    			append_dev(li16, a16);
    			append_dev(a16, i16);
    			append_dev(a16, t49);
    			append_dev(ul4, t50);
    			append_dev(ul4, li17);
    			append_dev(li17, a17);
    			append_dev(a17, i17);
    			append_dev(a17, t51);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[3], false, false, false),
    					action_destroyer(link_action = link.call(null, a0)),
    					action_destroyer(link_action_1 = link.call(null, a1)),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[4], false, false, false),
    					action_destroyer(link_action_2 = link.call(null, a2)),
    					action_destroyer(link_action_3 = link.call(null, a3)),
    					action_destroyer(link_action_4 = link.call(null, a4)),
    					action_destroyer(link_action_5 = link.call(null, a5)),
    					action_destroyer(link_action_6 = link.call(null, a6)),
    					action_destroyer(link_action_7 = link.call(null, a7)),
    					action_destroyer(link_action_8 = link.call(null, a8)),
    					action_destroyer(link_action_9 = link.call(null, a9))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*location*/ 1 && i2_class_value !== (i2_class_value = "fas fa-tv mr-2 text-sm " + (/*location*/ ctx[0].href.indexOf("/admin/dashboard") !== -1
    			? "opacity-75"
    			: "text-gray-400"))) {
    				attr_dev(i2, "class", i2_class_value);
    			}

    			if (!current || dirty & /*location*/ 1 && a2_class_value !== (a2_class_value = "text-xs uppercase py-3 font-bold block " + (/*location*/ ctx[0].href.indexOf("/admin/dashboard") !== -1
    			? "text-red-500 hover:text-red-600"
    			: "text-gray-800 hover:text-gray-600"))) {
    				attr_dev(a2, "class", a2_class_value);
    			}

    			if (!current || dirty & /*location*/ 1 && i3_class_value !== (i3_class_value = "fas fa-tools mr-2 text-sm " + (/*location*/ ctx[0].href.indexOf("/admin/settings") !== -1
    			? "opacity-75"
    			: "text-gray-400"))) {
    				attr_dev(i3, "class", i3_class_value);
    			}

    			if (!current || dirty & /*location*/ 1 && a3_class_value !== (a3_class_value = "text-xs uppercase py-3 font-bold block " + (/*location*/ ctx[0].href.indexOf("/admin/settings") !== -1
    			? "text-red-500 hover:text-red-600"
    			: "text-gray-800 hover:text-gray-600"))) {
    				attr_dev(a3, "class", a3_class_value);
    			}

    			if (!current || dirty & /*location*/ 1 && i4_class_value !== (i4_class_value = "fas fa-table mr-2 text-sm " + (/*location*/ ctx[0].href.indexOf("/admin/tables") !== -1
    			? "opacity-75"
    			: "text-gray-400"))) {
    				attr_dev(i4, "class", i4_class_value);
    			}

    			if (!current || dirty & /*location*/ 1 && a4_class_value !== (a4_class_value = "text-xs uppercase py-3 font-bold block " + (/*location*/ ctx[0].href.indexOf("/admin/tables") !== -1
    			? "text-red-500 hover:text-red-600"
    			: "text-gray-800 hover:text-gray-600"))) {
    				attr_dev(a4, "class", a4_class_value);
    			}

    			if (!current || dirty & /*location*/ 1 && i5_class_value !== (i5_class_value = "fas fa-map-marked mr-2 text-sm " + (/*location*/ ctx[0].href.indexOf("/admin/maps") !== -1
    			? "opacity-75"
    			: "text-gray-400"))) {
    				attr_dev(i5, "class", i5_class_value);
    			}

    			if (!current || dirty & /*location*/ 1 && a5_class_value !== (a5_class_value = "text-xs uppercase py-3 font-bold block " + (/*location*/ ctx[0].href.indexOf("/admin/maps") !== -1
    			? "text-red-500 hover:text-red-600"
    			: "text-gray-800 hover:text-gray-600"))) {
    				attr_dev(a5, "class", a5_class_value);
    			}

    			if (!current || dirty & /*collapseShow*/ 2 && div5_class_value !== (div5_class_value = "md:flex md:flex-col md:items-stretch md:opacity-100 md:relative md:mt-4 md:shadow-none shadow absolute top-0 left-0 right-0 z-40 overflow-y-auto overflow-x-hidden h-auto items-center flex-1 rounded " + /*collapseShow*/ ctx[1])) {
    				attr_dev(div5, "class", div5_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(notificationdropdown.$$.fragment, local);
    			transition_in(userdropdown.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(notificationdropdown.$$.fragment, local);
    			transition_out(userdropdown.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			destroy_component(notificationdropdown);
    			destroy_component(userdropdown);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Sidebar", slots, []);
    	let collapseShow = "hidden";

    	function toggleCollapseShow(classes) {
    		$$invalidate(1, collapseShow = classes);
    	}

    	let { location } = $$props;
    	const writable_props = ["location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Sidebar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => toggleCollapseShow("bg-white m-2 py-3 px-6");
    	const click_handler_1 = () => toggleCollapseShow("hidden");

    	$$self.$$set = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({
    		link,
    		NotificationDropdown,
    		UserDropdown,
    		collapseShow,
    		toggleCollapseShow,
    		location
    	});

    	$$self.$inject_state = $$props => {
    		if ("collapseShow" in $$props) $$invalidate(1, collapseShow = $$props.collapseShow);
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [location, collapseShow, toggleCollapseShow, click_handler, click_handler_1];
    }

    class Sidebar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { location: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sidebar",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[0] === undefined && !("location" in props)) {
    			console.warn("<Sidebar> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<Sidebar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Sidebar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Cards/CardStats.svelte generated by Svelte v3.26.0 */

    const file$5 = "src/components/Cards/CardStats.svelte";

    function create_fragment$7(ctx) {
    	let div5;
    	let div4;
    	let div3;
    	let div0;
    	let h5;
    	let t0;
    	let t1;
    	let span0;
    	let t2;
    	let t3;
    	let div2;
    	let div1;
    	let i0;
    	let div1_class_value;
    	let t4;
    	let p;
    	let span1;
    	let i1;
    	let i1_class_value;
    	let t5;
    	let t6;
    	let t7;
    	let span1_class_value;
    	let t8;
    	let span2;
    	let t9;

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			h5 = element("h5");
    			t0 = text(/*statSubtitle*/ ctx[0]);
    			t1 = space();
    			span0 = element("span");
    			t2 = text(/*statTitle*/ ctx[1]);
    			t3 = space();
    			div2 = element("div");
    			div1 = element("div");
    			i0 = element("i");
    			t4 = space();
    			p = element("p");
    			span1 = element("span");
    			i1 = element("i");
    			t5 = space();
    			t6 = text(/*statPercent*/ ctx[3]);
    			t7 = text("%");
    			t8 = space();
    			span2 = element("span");
    			t9 = text(/*statDescripiron*/ ctx[5]);
    			attr_dev(h5, "class", "text-gray-500 uppercase font-bold text-xs");
    			add_location(h5, file$5, 23, 8, 806);
    			attr_dev(span0, "class", "font-semibold text-xl text-gray-800");
    			add_location(span0, file$5, 26, 8, 908);
    			attr_dev(div0, "class", "relative w-full pr-4 max-w-full flex-grow flex-1");
    			add_location(div0, file$5, 22, 6, 735);
    			attr_dev(i0, "class", /*statIconName*/ ctx[6]);
    			add_location(i0, file$5, 34, 10, 1231);
    			attr_dev(div1, "class", div1_class_value = "text-white p-3 text-center inline-flex items-center justify-center w-12 h-12 shadow-lg rounded-full " + /*statIconColor*/ ctx[7]);
    			add_location(div1, file$5, 31, 8, 1072);
    			attr_dev(div2, "class", "relative w-auto pl-4 flex-initial");
    			add_location(div2, file$5, 30, 6, 1016);
    			attr_dev(div3, "class", "flex flex-wrap");
    			add_location(div3, file$5, 21, 4, 700);

    			attr_dev(i1, "class", i1_class_value = /*statArrow*/ ctx[2] === "up"
    			? "fas fa-arrow-up"
    			: "fas fa-arrow-down");

    			add_location(i1, file$5, 40, 8, 1397);
    			attr_dev(span1, "class", span1_class_value = "mr-2 " + /*statPercentColor*/ ctx[4]);
    			add_location(span1, file$5, 39, 6, 1350);
    			attr_dev(span2, "class", "whitespace-no-wrap");
    			add_location(span2, file$5, 45, 6, 1538);
    			attr_dev(p, "class", "text-sm text-gray-500 mt-4");
    			add_location(p, file$5, 38, 4, 1305);
    			attr_dev(div4, "class", "flex-auto p-4");
    			add_location(div4, file$5, 20, 2, 668);
    			attr_dev(div5, "class", "relative flex flex-col min-w-0 break-words bg-white rounded mb-6 xl:mb-0 shadow-lg");
    			add_location(div5, file$5, 17, 0, 566);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div0);
    			append_dev(div0, h5);
    			append_dev(h5, t0);
    			append_dev(div0, t1);
    			append_dev(div0, span0);
    			append_dev(span0, t2);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, i0);
    			append_dev(div4, t4);
    			append_dev(div4, p);
    			append_dev(p, span1);
    			append_dev(span1, i1);
    			append_dev(span1, t5);
    			append_dev(span1, t6);
    			append_dev(span1, t7);
    			append_dev(p, t8);
    			append_dev(p, span2);
    			append_dev(span2, t9);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*statSubtitle*/ 1) set_data_dev(t0, /*statSubtitle*/ ctx[0]);
    			if (dirty & /*statTitle*/ 2) set_data_dev(t2, /*statTitle*/ ctx[1]);

    			if (dirty & /*statIconName*/ 64) {
    				attr_dev(i0, "class", /*statIconName*/ ctx[6]);
    			}

    			if (dirty & /*statIconColor*/ 128 && div1_class_value !== (div1_class_value = "text-white p-3 text-center inline-flex items-center justify-center w-12 h-12 shadow-lg rounded-full " + /*statIconColor*/ ctx[7])) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (dirty & /*statArrow*/ 4 && i1_class_value !== (i1_class_value = /*statArrow*/ ctx[2] === "up"
    			? "fas fa-arrow-up"
    			: "fas fa-arrow-down")) {
    				attr_dev(i1, "class", i1_class_value);
    			}

    			if (dirty & /*statPercent*/ 8) set_data_dev(t6, /*statPercent*/ ctx[3]);

    			if (dirty & /*statPercentColor*/ 16 && span1_class_value !== (span1_class_value = "mr-2 " + /*statPercentColor*/ ctx[4])) {
    				attr_dev(span1, "class", span1_class_value);
    			}

    			if (dirty & /*statDescripiron*/ 32) set_data_dev(t9, /*statDescripiron*/ ctx[5]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("CardStats", slots, []);
    	let { statSubtitle = "Traffic" } = $$props;
    	let { statTitle = "350,897" } = $$props;
    	let { statArrow = "up" } = $$props;
    	let { statPercent = "3.48" } = $$props;
    	let { statPercentColor = "text-green-500" } = $$props;
    	let { statDescripiron = "Since last month" } = $$props;
    	let { statIconName = "far fa-chart-bar" } = $$props;
    	let { statIconColor = "bg-red-500" } = $$props;

    	const writable_props = [
    		"statSubtitle",
    		"statTitle",
    		"statArrow",
    		"statPercent",
    		"statPercentColor",
    		"statDescripiron",
    		"statIconName",
    		"statIconColor"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CardStats> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("statSubtitle" in $$props) $$invalidate(0, statSubtitle = $$props.statSubtitle);
    		if ("statTitle" in $$props) $$invalidate(1, statTitle = $$props.statTitle);
    		if ("statArrow" in $$props) $$invalidate(2, statArrow = $$props.statArrow);
    		if ("statPercent" in $$props) $$invalidate(3, statPercent = $$props.statPercent);
    		if ("statPercentColor" in $$props) $$invalidate(4, statPercentColor = $$props.statPercentColor);
    		if ("statDescripiron" in $$props) $$invalidate(5, statDescripiron = $$props.statDescripiron);
    		if ("statIconName" in $$props) $$invalidate(6, statIconName = $$props.statIconName);
    		if ("statIconColor" in $$props) $$invalidate(7, statIconColor = $$props.statIconColor);
    	};

    	$$self.$capture_state = () => ({
    		statSubtitle,
    		statTitle,
    		statArrow,
    		statPercent,
    		statPercentColor,
    		statDescripiron,
    		statIconName,
    		statIconColor
    	});

    	$$self.$inject_state = $$props => {
    		if ("statSubtitle" in $$props) $$invalidate(0, statSubtitle = $$props.statSubtitle);
    		if ("statTitle" in $$props) $$invalidate(1, statTitle = $$props.statTitle);
    		if ("statArrow" in $$props) $$invalidate(2, statArrow = $$props.statArrow);
    		if ("statPercent" in $$props) $$invalidate(3, statPercent = $$props.statPercent);
    		if ("statPercentColor" in $$props) $$invalidate(4, statPercentColor = $$props.statPercentColor);
    		if ("statDescripiron" in $$props) $$invalidate(5, statDescripiron = $$props.statDescripiron);
    		if ("statIconName" in $$props) $$invalidate(6, statIconName = $$props.statIconName);
    		if ("statIconColor" in $$props) $$invalidate(7, statIconColor = $$props.statIconColor);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		statSubtitle,
    		statTitle,
    		statArrow,
    		statPercent,
    		statPercentColor,
    		statDescripiron,
    		statIconName,
    		statIconColor
    	];
    }

    class CardStats extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			statSubtitle: 0,
    			statTitle: 1,
    			statArrow: 2,
    			statPercent: 3,
    			statPercentColor: 4,
    			statDescripiron: 5,
    			statIconName: 6,
    			statIconColor: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CardStats",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get statSubtitle() {
    		throw new Error("<CardStats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set statSubtitle(value) {
    		throw new Error("<CardStats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get statTitle() {
    		throw new Error("<CardStats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set statTitle(value) {
    		throw new Error("<CardStats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get statArrow() {
    		throw new Error("<CardStats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set statArrow(value) {
    		throw new Error("<CardStats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get statPercent() {
    		throw new Error("<CardStats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set statPercent(value) {
    		throw new Error("<CardStats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get statPercentColor() {
    		throw new Error("<CardStats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set statPercentColor(value) {
    		throw new Error("<CardStats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get statDescripiron() {
    		throw new Error("<CardStats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set statDescripiron(value) {
    		throw new Error("<CardStats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get statIconName() {
    		throw new Error("<CardStats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set statIconName(value) {
    		throw new Error("<CardStats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get statIconColor() {
    		throw new Error("<CardStats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set statIconColor(value) {
    		throw new Error("<CardStats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Headers/HeaderStats.svelte generated by Svelte v3.26.0 */
    const file$6 = "src/components/Headers/HeaderStats.svelte";

    function create_fragment$8(ctx) {
    	let div7;
    	let div6;
    	let div5;
    	let div4;
    	let div0;
    	let cardstats0;
    	let t0;
    	let div1;
    	let cardstats1;
    	let t1;
    	let div2;
    	let cardstats2;
    	let t2;
    	let div3;
    	let cardstats3;
    	let current;

    	cardstats0 = new CardStats({
    			props: {
    				statSubtitle: "TRAFFIC",
    				statTitle: "350,897",
    				statArrow: "up",
    				statPercent: "3.48",
    				statPercentColor: "text-green-500",
    				statDescripiron: "Since last month",
    				statIconName: "far fa-chart-bar",
    				statIconColor: "bg-red-500"
    			},
    			$$inline: true
    		});

    	cardstats1 = new CardStats({
    			props: {
    				statSubtitle: "NEW USERS",
    				statTitle: "2,356",
    				statArrow: "down",
    				statPercent: "3.48",
    				statPercentColor: "text-red-500",
    				statDescripiron: "Since last week",
    				statIconName: "fas fa-chart-pie",
    				statIconColor: "bg-orange-500"
    			},
    			$$inline: true
    		});

    	cardstats2 = new CardStats({
    			props: {
    				statSubtitle: "SALES",
    				statTitle: "924",
    				statArrow: "down",
    				statPercent: "1.10",
    				statPercentColor: "text-orange-500",
    				statDescripiron: "Since yesterday",
    				statIconName: "fas fa-users",
    				statIconColor: "bg-pink-500"
    			},
    			$$inline: true
    		});

    	cardstats3 = new CardStats({
    			props: {
    				statSubtitle: "PERFORMANCE",
    				statTitle: "49,65%",
    				statArrow: "up",
    				statPercent: "12",
    				statPercentColor: "text-green-500",
    				statDescripiron: "Since last month",
    				statIconName: "fas fa-percent",
    				statIconColor: "bg-green-500"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div7 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div0 = element("div");
    			create_component(cardstats0.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(cardstats1.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			create_component(cardstats2.$$.fragment);
    			t2 = space();
    			div3 = element("div");
    			create_component(cardstats3.$$.fragment);
    			attr_dev(div0, "class", "w-full lg:w-6/12 xl:w-3/12 px-4");
    			add_location(div0, file$6, 9, 8, 291);
    			attr_dev(div1, "class", "w-full lg:w-6/12 xl:w-3/12 px-4");
    			add_location(div1, file$6, 21, 8, 695);
    			attr_dev(div2, "class", "w-full lg:w-6/12 xl:w-3/12 px-4");
    			add_location(div2, file$6, 33, 8, 1101);
    			attr_dev(div3, "class", "w-full lg:w-6/12 xl:w-3/12 px-4");
    			add_location(div3, file$6, 45, 8, 1498);
    			attr_dev(div4, "class", "flex flex-wrap");
    			add_location(div4, file$6, 8, 6, 254);
    			add_location(div5, file$6, 6, 4, 216);
    			attr_dev(div6, "class", "px-4 md:px-10 mx-auto w-full");
    			add_location(div6, file$6, 5, 2, 169);
    			attr_dev(div7, "class", "relative bg-red-500 md:pt-32 pb-32 pt-12");
    			add_location(div7, file$6, 4, 0, 112);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div0);
    			mount_component(cardstats0, div0, null);
    			append_dev(div4, t0);
    			append_dev(div4, div1);
    			mount_component(cardstats1, div1, null);
    			append_dev(div4, t1);
    			append_dev(div4, div2);
    			mount_component(cardstats2, div2, null);
    			append_dev(div4, t2);
    			append_dev(div4, div3);
    			mount_component(cardstats3, div3, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cardstats0.$$.fragment, local);
    			transition_in(cardstats1.$$.fragment, local);
    			transition_in(cardstats2.$$.fragment, local);
    			transition_in(cardstats3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cardstats0.$$.fragment, local);
    			transition_out(cardstats1.$$.fragment, local);
    			transition_out(cardstats2.$$.fragment, local);
    			transition_out(cardstats3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div7);
    			destroy_component(cardstats0);
    			destroy_component(cardstats1);
    			destroy_component(cardstats2);
    			destroy_component(cardstats3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("HeaderStats", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<HeaderStats> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ CardStats });
    	return [];
    }

    class HeaderStats extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HeaderStats",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    /* src/components/Footers/FooterAdmin.svelte generated by Svelte v3.26.0 */

    const file$7 = "src/components/Footers/FooterAdmin.svelte";

    function create_fragment$9(ctx) {
    	let footer;
    	let div4;
    	let hr;
    	let t0;
    	let div3;
    	let div1;
    	let div0;
    	let t1;
    	let t2;
    	let t3;
    	let a0;
    	let t5;
    	let div2;
    	let ul;
    	let li0;
    	let a1;
    	let t7;
    	let li1;
    	let a2;
    	let t9;
    	let li2;
    	let a3;
    	let t11;
    	let li3;
    	let a4;

    	const block = {
    		c: function create() {
    			footer = element("footer");
    			div4 = element("div");
    			hr = element("hr");
    			t0 = space();
    			div3 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			t1 = text("Copyright © ");
    			t2 = text(/*date*/ ctx[0]);
    			t3 = space();
    			a0 = element("a");
    			a0.textContent = "Creative Tim";
    			t5 = space();
    			div2 = element("div");
    			ul = element("ul");
    			li0 = element("li");
    			a1 = element("a");
    			a1.textContent = "Creative Tim";
    			t7 = space();
    			li1 = element("li");
    			a2 = element("a");
    			a2.textContent = "About Us";
    			t9 = space();
    			li2 = element("li");
    			a3 = element("a");
    			a3.textContent = "Blog";
    			t11 = space();
    			li3 = element("li");
    			a4 = element("a");
    			a4.textContent = "MIT License";
    			attr_dev(hr, "class", "mb-4 border-b-1 border-gray-300");
    			add_location(hr, file$7, 6, 4, 188);
    			attr_dev(a0, "href", "https://www.creative-tim.com?ref=tws-footer-admin");
    			attr_dev(a0, "class", "text-gray-600 hover:text-gray-800 text-sm font-semibold py-1");
    			add_location(a0, file$7, 13, 10, 503);
    			attr_dev(div0, "class", "text-sm text-gray-600 font-semibold py-1 text-center md:text-left");
    			add_location(div0, file$7, 9, 8, 365);
    			attr_dev(div1, "class", "w-full md:w-4/12 px-4");
    			add_location(div1, file$7, 8, 6, 321);
    			attr_dev(a1, "href", "https://www.creative-tim.com?ref=tws-footer-admin");
    			attr_dev(a1, "class", "text-gray-700 hover:text-gray-900 text-sm font-semibold block py-1 px-3");
    			add_location(a1, file$7, 24, 12, 881);
    			add_location(li0, file$7, 23, 10, 864);
    			attr_dev(a2, "href", "https://www.creative-tim.com/presentation?ref=tws-footer-admin");
    			attr_dev(a2, "class", "text-gray-700 hover:text-gray-900 text-sm font-semibold block py-1 px-3");
    			add_location(a2, file$7, 32, 12, 1150);
    			add_location(li1, file$7, 31, 10, 1133);
    			attr_dev(a3, "href", "http://blog.creative-tim.com?ref=tws-footer-admin");
    			attr_dev(a3, "class", "text-gray-700 hover:text-gray-900 text-sm font-semibold block py-1 px-3");
    			add_location(a3, file$7, 40, 12, 1428);
    			add_location(li2, file$7, 39, 10, 1411);
    			attr_dev(a4, "href", "https://github.com/creativetimofficial/vue-tailwind-webapp/blob/master/LICENSE.md?ref=tws-footer-admin");
    			attr_dev(a4, "class", "text-gray-700 hover:text-gray-900 text-sm font-semibold block py-1 px-3");
    			add_location(a4, file$7, 48, 12, 1689);
    			add_location(li3, file$7, 47, 10, 1672);
    			attr_dev(ul, "class", "flex flex-wrap list-none md:justify-end justify-center");
    			add_location(ul, file$7, 22, 8, 786);
    			attr_dev(div2, "class", "w-full md:w-8/12 px-4");
    			add_location(div2, file$7, 21, 6, 742);
    			attr_dev(div3, "class", "flex flex-wrap items-center md:justify-between justify-center");
    			add_location(div3, file$7, 7, 4, 239);
    			attr_dev(div4, "class", "container mx-auto px-4");
    			add_location(div4, file$7, 5, 2, 147);
    			attr_dev(footer, "class", "block py-4");
    			add_location(footer, file$7, 4, 0, 117);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, footer, anchor);
    			append_dev(footer, div4);
    			append_dev(div4, hr);
    			append_dev(div4, t0);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			append_dev(div1, div0);
    			append_dev(div0, t1);
    			append_dev(div0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, a0);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			append_dev(div2, ul);
    			append_dev(ul, li0);
    			append_dev(li0, a1);
    			append_dev(ul, t7);
    			append_dev(ul, li1);
    			append_dev(li1, a2);
    			append_dev(ul, t9);
    			append_dev(ul, li2);
    			append_dev(li2, a3);
    			append_dev(ul, t11);
    			append_dev(ul, li3);
    			append_dev(li3, a4);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(footer);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("FooterAdmin", slots, []);
    	let date = new Date().getFullYear();
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FooterAdmin> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ date });

    	$$self.$inject_state = $$props => {
    		if ("date" in $$props) $$invalidate(0, date = $$props.date);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [date];
    }

    class FooterAdmin extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FooterAdmin",
    			options,
    			id: create_fragment$9.name
    		});
    	}
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, basedir, module) {
    	return module = {
    		path: basedir,
    		exports: {},
    		require: function (path, base) {
    			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    		}
    	}, fn(module, module.exports), module.exports;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var moment = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
         module.exports = factory() ;
    }(commonjsGlobal, (function () {
        var hookCallback;

        function hooks() {
            return hookCallback.apply(null, arguments);
        }

        // This is done to register the method called with moment()
        // without creating circular dependencies.
        function setHookCallback(callback) {
            hookCallback = callback;
        }

        function isArray(input) {
            return (
                input instanceof Array ||
                Object.prototype.toString.call(input) === '[object Array]'
            );
        }

        function isObject(input) {
            // IE8 will treat undefined and null as object if it wasn't for
            // input != null
            return (
                input != null &&
                Object.prototype.toString.call(input) === '[object Object]'
            );
        }

        function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
        }

        function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
                return Object.getOwnPropertyNames(obj).length === 0;
            } else {
                var k;
                for (k in obj) {
                    if (hasOwnProp(obj, k)) {
                        return false;
                    }
                }
                return true;
            }
        }

        function isUndefined(input) {
            return input === void 0;
        }

        function isNumber(input) {
            return (
                typeof input === 'number' ||
                Object.prototype.toString.call(input) === '[object Number]'
            );
        }

        function isDate(input) {
            return (
                input instanceof Date ||
                Object.prototype.toString.call(input) === '[object Date]'
            );
        }

        function map(arr, fn) {
            var res = [],
                i;
            for (i = 0; i < arr.length; ++i) {
                res.push(fn(arr[i], i));
            }
            return res;
        }

        function extend(a, b) {
            for (var i in b) {
                if (hasOwnProp(b, i)) {
                    a[i] = b[i];
                }
            }

            if (hasOwnProp(b, 'toString')) {
                a.toString = b.toString;
            }

            if (hasOwnProp(b, 'valueOf')) {
                a.valueOf = b.valueOf;
            }

            return a;
        }

        function createUTC(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
        }

        function defaultParsingFlags() {
            // We need to deep clone this object.
            return {
                empty: false,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: false,
                invalidEra: null,
                invalidMonth: null,
                invalidFormat: false,
                userInvalidated: false,
                iso: false,
                parsedDateParts: [],
                era: null,
                meridiem: null,
                rfc2822: false,
                weekdayMismatch: false,
            };
        }

        function getParsingFlags(m) {
            if (m._pf == null) {
                m._pf = defaultParsingFlags();
            }
            return m._pf;
        }

        var some;
        if (Array.prototype.some) {
            some = Array.prototype.some;
        } else {
            some = function (fun) {
                var t = Object(this),
                    len = t.length >>> 0,
                    i;

                for (i = 0; i < len; i++) {
                    if (i in t && fun.call(this, t[i], i, t)) {
                        return true;
                    }
                }

                return false;
            };
        }

        function isValid(m) {
            if (m._isValid == null) {
                var flags = getParsingFlags(m),
                    parsedParts = some.call(flags.parsedDateParts, function (i) {
                        return i != null;
                    }),
                    isNowValid =
                        !isNaN(m._d.getTime()) &&
                        flags.overflow < 0 &&
                        !flags.empty &&
                        !flags.invalidEra &&
                        !flags.invalidMonth &&
                        !flags.invalidWeekday &&
                        !flags.weekdayMismatch &&
                        !flags.nullInput &&
                        !flags.invalidFormat &&
                        !flags.userInvalidated &&
                        (!flags.meridiem || (flags.meridiem && parsedParts));

                if (m._strict) {
                    isNowValid =
                        isNowValid &&
                        flags.charsLeftOver === 0 &&
                        flags.unusedTokens.length === 0 &&
                        flags.bigHour === undefined;
                }

                if (Object.isFrozen == null || !Object.isFrozen(m)) {
                    m._isValid = isNowValid;
                } else {
                    return isNowValid;
                }
            }
            return m._isValid;
        }

        function createInvalid(flags) {
            var m = createUTC(NaN);
            if (flags != null) {
                extend(getParsingFlags(m), flags);
            } else {
                getParsingFlags(m).userInvalidated = true;
            }

            return m;
        }

        // Plugins that add properties should also add the key here (null value),
        // so we can properly clone ourselves.
        var momentProperties = (hooks.momentProperties = []),
            updateInProgress = false;

        function copyConfig(to, from) {
            var i, prop, val;

            if (!isUndefined(from._isAMomentObject)) {
                to._isAMomentObject = from._isAMomentObject;
            }
            if (!isUndefined(from._i)) {
                to._i = from._i;
            }
            if (!isUndefined(from._f)) {
                to._f = from._f;
            }
            if (!isUndefined(from._l)) {
                to._l = from._l;
            }
            if (!isUndefined(from._strict)) {
                to._strict = from._strict;
            }
            if (!isUndefined(from._tzm)) {
                to._tzm = from._tzm;
            }
            if (!isUndefined(from._isUTC)) {
                to._isUTC = from._isUTC;
            }
            if (!isUndefined(from._offset)) {
                to._offset = from._offset;
            }
            if (!isUndefined(from._pf)) {
                to._pf = getParsingFlags(from);
            }
            if (!isUndefined(from._locale)) {
                to._locale = from._locale;
            }

            if (momentProperties.length > 0) {
                for (i = 0; i < momentProperties.length; i++) {
                    prop = momentProperties[i];
                    val = from[prop];
                    if (!isUndefined(val)) {
                        to[prop] = val;
                    }
                }
            }

            return to;
        }

        // Moment prototype object
        function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);
            if (!this.isValid()) {
                this._d = new Date(NaN);
            }
            // Prevent infinite loop in case updateOffset creates new moment
            // objects.
            if (updateInProgress === false) {
                updateInProgress = true;
                hooks.updateOffset(this);
                updateInProgress = false;
            }
        }

        function isMoment(obj) {
            return (
                obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
            );
        }

        function warn(msg) {
            if (
                hooks.suppressDeprecationWarnings === false &&
                typeof console !== 'undefined' &&
                console.warn
            ) {
                console.warn('Deprecation warning: ' + msg);
            }
        }

        function deprecate(msg, fn) {
            var firstTime = true;

            return extend(function () {
                if (hooks.deprecationHandler != null) {
                    hooks.deprecationHandler(null, msg);
                }
                if (firstTime) {
                    var args = [],
                        arg,
                        i,
                        key;
                    for (i = 0; i < arguments.length; i++) {
                        arg = '';
                        if (typeof arguments[i] === 'object') {
                            arg += '\n[' + i + '] ';
                            for (key in arguments[0]) {
                                if (hasOwnProp(arguments[0], key)) {
                                    arg += key + ': ' + arguments[0][key] + ', ';
                                }
                            }
                            arg = arg.slice(0, -2); // Remove trailing comma and space
                        } else {
                            arg = arguments[i];
                        }
                        args.push(arg);
                    }
                    warn(
                        msg +
                            '\nArguments: ' +
                            Array.prototype.slice.call(args).join('') +
                            '\n' +
                            new Error().stack
                    );
                    firstTime = false;
                }
                return fn.apply(this, arguments);
            }, fn);
        }

        var deprecations = {};

        function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(name, msg);
            }
            if (!deprecations[name]) {
                warn(msg);
                deprecations[name] = true;
            }
        }

        hooks.suppressDeprecationWarnings = false;
        hooks.deprecationHandler = null;

        function isFunction(input) {
            return (
                (typeof Function !== 'undefined' && input instanceof Function) ||
                Object.prototype.toString.call(input) === '[object Function]'
            );
        }

        function set(config) {
            var prop, i;
            for (i in config) {
                if (hasOwnProp(config, i)) {
                    prop = config[i];
                    if (isFunction(prop)) {
                        this[i] = prop;
                    } else {
                        this['_' + i] = prop;
                    }
                }
            }
            this._config = config;
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
            // TODO: Remove "ordinalParse" fallback in next major release.
            this._dayOfMonthOrdinalParseLenient = new RegExp(
                (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                    '|' +
                    /\d{1,2}/.source
            );
        }

        function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig),
                prop;
            for (prop in childConfig) {
                if (hasOwnProp(childConfig, prop)) {
                    if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                        res[prop] = {};
                        extend(res[prop], parentConfig[prop]);
                        extend(res[prop], childConfig[prop]);
                    } else if (childConfig[prop] != null) {
                        res[prop] = childConfig[prop];
                    } else {
                        delete res[prop];
                    }
                }
            }
            for (prop in parentConfig) {
                if (
                    hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])
                ) {
                    // make sure changes to properties don't modify parent config
                    res[prop] = extend({}, res[prop]);
                }
            }
            return res;
        }

        function Locale(config) {
            if (config != null) {
                this.set(config);
            }
        }

        var keys;

        if (Object.keys) {
            keys = Object.keys;
        } else {
            keys = function (obj) {
                var i,
                    res = [];
                for (i in obj) {
                    if (hasOwnProp(obj, i)) {
                        res.push(i);
                    }
                }
                return res;
            };
        }

        var defaultCalendar = {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        };

        function calendar(key, mom, now) {
            var output = this._calendar[key] || this._calendar['sameElse'];
            return isFunction(output) ? output.call(mom, now) : output;
        }

        function zeroFill(number, targetLength, forceSign) {
            var absNumber = '' + Math.abs(number),
                zerosToFill = targetLength - absNumber.length,
                sign = number >= 0;
            return (
                (sign ? (forceSign ? '+' : '') : '-') +
                Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
                absNumber
            );
        }

        var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
            formatFunctions = {},
            formatTokenFunctions = {};

        // token:    'M'
        // padded:   ['MM', 2]
        // ordinal:  'Mo'
        // callback: function () { this.month() + 1 }
        function addFormatToken(token, padded, ordinal, callback) {
            var func = callback;
            if (typeof callback === 'string') {
                func = function () {
                    return this[callback]();
                };
            }
            if (token) {
                formatTokenFunctions[token] = func;
            }
            if (padded) {
                formatTokenFunctions[padded[0]] = function () {
                    return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                };
            }
            if (ordinal) {
                formatTokenFunctions[ordinal] = function () {
                    return this.localeData().ordinal(
                        func.apply(this, arguments),
                        token
                    );
                };
            }
        }

        function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, '');
            }
            return input.replace(/\\/g, '');
        }

        function makeFormatFunction(format) {
            var array = format.match(formattingTokens),
                i,
                length;

            for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                    array[i] = formatTokenFunctions[array[i]];
                } else {
                    array[i] = removeFormattingTokens(array[i]);
                }
            }

            return function (mom) {
                var output = '',
                    i;
                for (i = 0; i < length; i++) {
                    output += isFunction(array[i])
                        ? array[i].call(mom, format)
                        : array[i];
                }
                return output;
            };
        }

        // format date using native date object
        function formatMoment(m, format) {
            if (!m.isValid()) {
                return m.localeData().invalidDate();
            }

            format = expandFormat(format, m.localeData());
            formatFunctions[format] =
                formatFunctions[format] || makeFormatFunction(format);

            return formatFunctions[format](m);
        }

        function expandFormat(format, locale) {
            var i = 5;

            function replaceLongDateFormatTokens(input) {
                return locale.longDateFormat(input) || input;
            }

            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(
                    localFormattingTokens,
                    replaceLongDateFormatTokens
                );
                localFormattingTokens.lastIndex = 0;
                i -= 1;
            }

            return format;
        }

        var defaultLongDateFormat = {
            LTS: 'h:mm:ss A',
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A',
        };

        function longDateFormat(key) {
            var format = this._longDateFormat[key],
                formatUpper = this._longDateFormat[key.toUpperCase()];

            if (format || !formatUpper) {
                return format;
            }

            this._longDateFormat[key] = formatUpper
                .match(formattingTokens)
                .map(function (tok) {
                    if (
                        tok === 'MMMM' ||
                        tok === 'MM' ||
                        tok === 'DD' ||
                        tok === 'dddd'
                    ) {
                        return tok.slice(1);
                    }
                    return tok;
                })
                .join('');

            return this._longDateFormat[key];
        }

        var defaultInvalidDate = 'Invalid date';

        function invalidDate() {
            return this._invalidDate;
        }

        var defaultOrdinal = '%d',
            defaultDayOfMonthOrdinalParse = /\d{1,2}/;

        function ordinal(number) {
            return this._ordinal.replace('%d', number);
        }

        var defaultRelativeTime = {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            w: 'a week',
            ww: '%d weeks',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        };

        function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output)
                ? output(number, withoutSuffix, string, isFuture)
                : output.replace(/%d/i, number);
        }

        function pastFuture(diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
        }

        var aliases = {};

        function addUnitAlias(unit, shorthand) {
            var lowerCase = unit.toLowerCase();
            aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
        }

        function normalizeUnits(units) {
            return typeof units === 'string'
                ? aliases[units] || aliases[units.toLowerCase()]
                : undefined;
        }

        function normalizeObjectUnits(inputObject) {
            var normalizedInput = {},
                normalizedProp,
                prop;

            for (prop in inputObject) {
                if (hasOwnProp(inputObject, prop)) {
                    normalizedProp = normalizeUnits(prop);
                    if (normalizedProp) {
                        normalizedInput[normalizedProp] = inputObject[prop];
                    }
                }
            }

            return normalizedInput;
        }

        var priorities = {};

        function addUnitPriority(unit, priority) {
            priorities[unit] = priority;
        }

        function getPrioritizedUnits(unitsObj) {
            var units = [],
                u;
            for (u in unitsObj) {
                if (hasOwnProp(unitsObj, u)) {
                    units.push({ unit: u, priority: priorities[u] });
                }
            }
            units.sort(function (a, b) {
                return a.priority - b.priority;
            });
            return units;
        }

        function isLeapYear(year) {
            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
        }

        function absFloor(number) {
            if (number < 0) {
                // -0 -> 0
                return Math.ceil(number) || 0;
            } else {
                return Math.floor(number);
            }
        }

        function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion,
                value = 0;

            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                value = absFloor(coercedNumber);
            }

            return value;
        }

        function makeGetSet(unit, keepTime) {
            return function (value) {
                if (value != null) {
                    set$1(this, unit, value);
                    hooks.updateOffset(this, keepTime);
                    return this;
                } else {
                    return get(this, unit);
                }
            };
        }

        function get(mom, unit) {
            return mom.isValid()
                ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
                : NaN;
        }

        function set$1(mom, unit, value) {
            if (mom.isValid() && !isNaN(value)) {
                if (
                    unit === 'FullYear' &&
                    isLeapYear(mom.year()) &&
                    mom.month() === 1 &&
                    mom.date() === 29
                ) {
                    value = toInt(value);
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                        value,
                        mom.month(),
                        daysInMonth(value, mom.month())
                    );
                } else {
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
                }
            }
        }

        // MOMENTS

        function stringGet(units) {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units]();
            }
            return this;
        }

        function stringSet(units, value) {
            if (typeof units === 'object') {
                units = normalizeObjectUnits(units);
                var prioritized = getPrioritizedUnits(units),
                    i;
                for (i = 0; i < prioritized.length; i++) {
                    this[prioritized[i].unit](units[prioritized[i].unit]);
                }
            } else {
                units = normalizeUnits(units);
                if (isFunction(this[units])) {
                    return this[units](value);
                }
            }
            return this;
        }

        var match1 = /\d/, //       0 - 9
            match2 = /\d\d/, //      00 - 99
            match3 = /\d{3}/, //     000 - 999
            match4 = /\d{4}/, //    0000 - 9999
            match6 = /[+-]?\d{6}/, // -999999 - 999999
            match1to2 = /\d\d?/, //       0 - 99
            match3to4 = /\d\d\d\d?/, //     999 - 9999
            match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
            match1to3 = /\d{1,3}/, //       0 - 999
            match1to4 = /\d{1,4}/, //       0 - 9999
            match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
            matchUnsigned = /\d+/, //       0 - inf
            matchSigned = /[+-]?\d+/, //    -inf - inf
            matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
            matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
            matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
            // any word (or two) characters or numbers including two/three word month in arabic.
            // includes scottish gaelic two word and hyphenated months
            matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
            regexes;

        regexes = {};

        function addRegexToken(token, regex, strictRegex) {
            regexes[token] = isFunction(regex)
                ? regex
                : function (isStrict, localeData) {
                      return isStrict && strictRegex ? strictRegex : regex;
                  };
        }

        function getParseRegexForToken(token, config) {
            if (!hasOwnProp(regexes, token)) {
                return new RegExp(unescapeFormat(token));
            }

            return regexes[token](config._strict, config._locale);
        }

        // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
        function unescapeFormat(s) {
            return regexEscape(
                s
                    .replace('\\', '')
                    .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
                        matched,
                        p1,
                        p2,
                        p3,
                        p4
                    ) {
                        return p1 || p2 || p3 || p4;
                    })
            );
        }

        function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        }

        var tokens = {};

        function addParseToken(token, callback) {
            var i,
                func = callback;
            if (typeof token === 'string') {
                token = [token];
            }
            if (isNumber(callback)) {
                func = function (input, array) {
                    array[callback] = toInt(input);
                };
            }
            for (i = 0; i < token.length; i++) {
                tokens[token[i]] = func;
            }
        }

        function addWeekParseToken(token, callback) {
            addParseToken(token, function (input, array, config, token) {
                config._w = config._w || {};
                callback(input, config._w, config, token);
            });
        }

        function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
                tokens[token](input, config._a, config, token);
            }
        }

        var YEAR = 0,
            MONTH = 1,
            DATE = 2,
            HOUR = 3,
            MINUTE = 4,
            SECOND = 5,
            MILLISECOND = 6,
            WEEK = 7,
            WEEKDAY = 8;

        function mod(n, x) {
            return ((n % x) + x) % x;
        }

        var indexOf;

        if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
        } else {
            indexOf = function (o) {
                // I know
                var i;
                for (i = 0; i < this.length; ++i) {
                    if (this[i] === o) {
                        return i;
                    }
                }
                return -1;
            };
        }

        function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
                return NaN;
            }
            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1
                ? isLeapYear(year)
                    ? 29
                    : 28
                : 31 - ((modMonth % 7) % 2);
        }

        // FORMATTING

        addFormatToken('M', ['MM', 2], 'Mo', function () {
            return this.month() + 1;
        });

        addFormatToken('MMM', 0, 0, function (format) {
            return this.localeData().monthsShort(this, format);
        });

        addFormatToken('MMMM', 0, 0, function (format) {
            return this.localeData().months(this, format);
        });

        // ALIASES

        addUnitAlias('month', 'M');

        // PRIORITY

        addUnitPriority('month', 8);

        // PARSING

        addRegexToken('M', match1to2);
        addRegexToken('MM', match1to2, match2);
        addRegexToken('MMM', function (isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
        });
        addRegexToken('MMMM', function (isStrict, locale) {
            return locale.monthsRegex(isStrict);
        });

        addParseToken(['M', 'MM'], function (input, array) {
            array[MONTH] = toInt(input) - 1;
        });

        addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
            var month = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (month != null) {
                array[MONTH] = month;
            } else {
                getParsingFlags(config).invalidMonth = input;
            }
        });

        // LOCALES

        var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
                '_'
            ),
            defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
                '_'
            ),
            MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
            defaultMonthsShortRegex = matchWord,
            defaultMonthsRegex = matchWord;

        function localeMonths(m, format) {
            if (!m) {
                return isArray(this._months)
                    ? this._months
                    : this._months['standalone'];
            }
            return isArray(this._months)
                ? this._months[m.month()]
                : this._months[
                      (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                          ? 'format'
                          : 'standalone'
                  ][m.month()];
        }

        function localeMonthsShort(m, format) {
            if (!m) {
                return isArray(this._monthsShort)
                    ? this._monthsShort
                    : this._monthsShort['standalone'];
            }
            return isArray(this._monthsShort)
                ? this._monthsShort[m.month()]
                : this._monthsShort[
                      MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
                  ][m.month()];
        }

        function handleStrictParse(monthName, format, strict) {
            var i,
                ii,
                mom,
                llc = monthName.toLocaleLowerCase();
            if (!this._monthsParse) {
                // this is not used
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
                for (i = 0; i < 12; ++i) {
                    mom = createUTC([2000, i]);
                    this._shortMonthsParse[i] = this.monthsShort(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeMonthsParse(monthName, format, strict) {
            var i, mom, regex;

            if (this._monthsParseExact) {
                return handleStrictParse.call(this, monthName, format, strict);
            }

            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
            }

            // TODO: add sorting
            // Sorting makes sure if one month (or abbr) is a prefix of another
            // see sorting in computeMonthsParse
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                if (strict && !this._longMonthsParse[i]) {
                    this._longMonthsParse[i] = new RegExp(
                        '^' + this.months(mom, '').replace('.', '') + '$',
                        'i'
                    );
                    this._shortMonthsParse[i] = new RegExp(
                        '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                        'i'
                    );
                }
                if (!strict && !this._monthsParse[i]) {
                    regex =
                        '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (
                    strict &&
                    format === 'MMMM' &&
                    this._longMonthsParse[i].test(monthName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'MMM' &&
                    this._shortMonthsParse[i].test(monthName)
                ) {
                    return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        }

        // MOMENTS

        function setMonth(mom, value) {
            var dayOfMonth;

            if (!mom.isValid()) {
                // No op
                return mom;
            }

            if (typeof value === 'string') {
                if (/^\d+$/.test(value)) {
                    value = toInt(value);
                } else {
                    value = mom.localeData().monthsParse(value);
                    // TODO: Another silent failure?
                    if (!isNumber(value)) {
                        return mom;
                    }
                }
            }

            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
            return mom;
        }

        function getSetMonth(value) {
            if (value != null) {
                setMonth(this, value);
                hooks.updateOffset(this, true);
                return this;
            } else {
                return get(this, 'Month');
            }
        }

        function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
        }

        function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsShortStrictRegex;
                } else {
                    return this._monthsShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsShortRegex')) {
                    this._monthsShortRegex = defaultMonthsShortRegex;
                }
                return this._monthsShortStrictRegex && isStrict
                    ? this._monthsShortStrictRegex
                    : this._monthsShortRegex;
            }
        }

        function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsStrictRegex;
                } else {
                    return this._monthsRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    this._monthsRegex = defaultMonthsRegex;
                }
                return this._monthsStrictRegex && isStrict
                    ? this._monthsStrictRegex
                    : this._monthsRegex;
            }
        }

        function computeMonthsParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom;
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                shortPieces.push(this.monthsShort(mom, ''));
                longPieces.push(this.months(mom, ''));
                mixedPieces.push(this.months(mom, ''));
                mixedPieces.push(this.monthsShort(mom, ''));
            }
            // Sorting makes sure if one month (or abbr) is a prefix of another it
            // will match the longer piece.
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            for (i = 0; i < 12; i++) {
                shortPieces[i] = regexEscape(shortPieces[i]);
                longPieces[i] = regexEscape(longPieces[i]);
            }
            for (i = 0; i < 24; i++) {
                mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp(
                '^(' + longPieces.join('|') + ')',
                'i'
            );
            this._monthsShortStrictRegex = new RegExp(
                '^(' + shortPieces.join('|') + ')',
                'i'
            );
        }

        // FORMATTING

        addFormatToken('Y', 0, 0, function () {
            var y = this.year();
            return y <= 9999 ? zeroFill(y, 4) : '+' + y;
        });

        addFormatToken(0, ['YY', 2], 0, function () {
            return this.year() % 100;
        });

        addFormatToken(0, ['YYYY', 4], 0, 'year');
        addFormatToken(0, ['YYYYY', 5], 0, 'year');
        addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

        // ALIASES

        addUnitAlias('year', 'y');

        // PRIORITIES

        addUnitPriority('year', 1);

        // PARSING

        addRegexToken('Y', matchSigned);
        addRegexToken('YY', match1to2, match2);
        addRegexToken('YYYY', match1to4, match4);
        addRegexToken('YYYYY', match1to6, match6);
        addRegexToken('YYYYYY', match1to6, match6);

        addParseToken(['YYYYY', 'YYYYYY'], YEAR);
        addParseToken('YYYY', function (input, array) {
            array[YEAR] =
                input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
        });
        addParseToken('YY', function (input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
        });
        addParseToken('Y', function (input, array) {
            array[YEAR] = parseInt(input, 10);
        });

        // HELPERS

        function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
        }

        // HOOKS

        hooks.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
        };

        // MOMENTS

        var getSetYear = makeGetSet('FullYear', true);

        function getIsLeapYear() {
            return isLeapYear(this.year());
        }

        function createDate(y, m, d, h, M, s, ms) {
            // can't just apply() to create a date:
            // https://stackoverflow.com/q/181348
            var date;
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                date = new Date(y + 400, m, d, h, M, s, ms);
                if (isFinite(date.getFullYear())) {
                    date.setFullYear(y);
                }
            } else {
                date = new Date(y, m, d, h, M, s, ms);
            }

            return date;
        }

        function createUTCDate(y) {
            var date, args;
            // the Date.UTC function remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                args = Array.prototype.slice.call(arguments);
                // preserve leap years using a full 400 year cycle, then reset
                args[0] = y + 400;
                date = new Date(Date.UTC.apply(null, args));
                if (isFinite(date.getUTCFullYear())) {
                    date.setUTCFullYear(y);
                }
            } else {
                date = new Date(Date.UTC.apply(null, arguments));
            }

            return date;
        }

        // start-of-first-week - start-of-year
        function firstWeekOffset(year, dow, doy) {
            var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
                fwd = 7 + dow - doy,
                // first-week day local weekday -- which local weekday is fwd
                fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

            return -fwdlw + fwd - 1;
        }

        // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7,
                weekOffset = firstWeekOffset(year, dow, doy),
                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                resYear,
                resDayOfYear;

            if (dayOfYear <= 0) {
                resYear = year - 1;
                resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
                resYear = year + 1;
                resDayOfYear = dayOfYear - daysInYear(year);
            } else {
                resYear = year;
                resDayOfYear = dayOfYear;
            }

            return {
                year: resYear,
                dayOfYear: resDayOfYear,
            };
        }

        function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                resWeek,
                resYear;

            if (week < 1) {
                resYear = mom.year() - 1;
                resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
                resWeek = week - weeksInYear(mom.year(), dow, doy);
                resYear = mom.year() + 1;
            } else {
                resYear = mom.year();
                resWeek = week;
            }

            return {
                week: resWeek,
                year: resYear,
            };
        }

        function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy),
                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
        }

        // FORMATTING

        addFormatToken('w', ['ww', 2], 'wo', 'week');
        addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

        // ALIASES

        addUnitAlias('week', 'w');
        addUnitAlias('isoWeek', 'W');

        // PRIORITIES

        addUnitPriority('week', 5);
        addUnitPriority('isoWeek', 5);

        // PARSING

        addRegexToken('w', match1to2);
        addRegexToken('ww', match1to2, match2);
        addRegexToken('W', match1to2);
        addRegexToken('WW', match1to2, match2);

        addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
            input,
            week,
            config,
            token
        ) {
            week[token.substr(0, 1)] = toInt(input);
        });

        // HELPERS

        // LOCALES

        function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        }

        var defaultLocaleWeek = {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        };

        function localeFirstDayOfWeek() {
            return this._week.dow;
        }

        function localeFirstDayOfYear() {
            return this._week.doy;
        }

        // MOMENTS

        function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        // FORMATTING

        addFormatToken('d', 0, 'do', 'day');

        addFormatToken('dd', 0, 0, function (format) {
            return this.localeData().weekdaysMin(this, format);
        });

        addFormatToken('ddd', 0, 0, function (format) {
            return this.localeData().weekdaysShort(this, format);
        });

        addFormatToken('dddd', 0, 0, function (format) {
            return this.localeData().weekdays(this, format);
        });

        addFormatToken('e', 0, 0, 'weekday');
        addFormatToken('E', 0, 0, 'isoWeekday');

        // ALIASES

        addUnitAlias('day', 'd');
        addUnitAlias('weekday', 'e');
        addUnitAlias('isoWeekday', 'E');

        // PRIORITY
        addUnitPriority('day', 11);
        addUnitPriority('weekday', 11);
        addUnitPriority('isoWeekday', 11);

        // PARSING

        addRegexToken('d', match1to2);
        addRegexToken('e', match1to2);
        addRegexToken('E', match1to2);
        addRegexToken('dd', function (isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
        });
        addRegexToken('ddd', function (isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
        });
        addRegexToken('dddd', function (isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
        });

        addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
            var weekday = config._locale.weekdaysParse(input, token, config._strict);
            // if we didn't get a weekday name, mark the date as invalid
            if (weekday != null) {
                week.d = weekday;
            } else {
                getParsingFlags(config).invalidWeekday = input;
            }
        });

        addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
            week[token] = toInt(input);
        });

        // HELPERS

        function parseWeekday(input, locale) {
            if (typeof input !== 'string') {
                return input;
            }

            if (!isNaN(input)) {
                return parseInt(input, 10);
            }

            input = locale.weekdaysParse(input);
            if (typeof input === 'number') {
                return input;
            }

            return null;
        }

        function parseIsoWeekday(input, locale) {
            if (typeof input === 'string') {
                return locale.weekdaysParse(input) % 7 || 7;
            }
            return isNaN(input) ? null : input;
        }

        // LOCALES
        function shiftWeekdays(ws, n) {
            return ws.slice(n, 7).concat(ws.slice(0, n));
        }

        var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
                '_'
            ),
            defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
            defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
            defaultWeekdaysRegex = matchWord,
            defaultWeekdaysShortRegex = matchWord,
            defaultWeekdaysMinRegex = matchWord;

        function localeWeekdays(m, format) {
            var weekdays = isArray(this._weekdays)
                ? this._weekdays
                : this._weekdays[
                      m && m !== true && this._weekdays.isFormat.test(format)
                          ? 'format'
                          : 'standalone'
                  ];
            return m === true
                ? shiftWeekdays(weekdays, this._week.dow)
                : m
                ? weekdays[m.day()]
                : weekdays;
        }

        function localeWeekdaysShort(m) {
            return m === true
                ? shiftWeekdays(this._weekdaysShort, this._week.dow)
                : m
                ? this._weekdaysShort[m.day()]
                : this._weekdaysShort;
        }

        function localeWeekdaysMin(m) {
            return m === true
                ? shiftWeekdays(this._weekdaysMin, this._week.dow)
                : m
                ? this._weekdaysMin[m.day()]
                : this._weekdaysMin;
        }

        function handleStrictParse$1(weekdayName, format, strict) {
            var i,
                ii,
                mom,
                llc = weekdayName.toLocaleLowerCase();
            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._minWeekdaysParse = [];

                for (i = 0; i < 7; ++i) {
                    mom = createUTC([2000, 1]).day(i);
                    this._minWeekdaysParse[i] = this.weekdaysMin(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._shortWeekdaysParse[i] = this.weekdaysShort(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeWeekdaysParse(weekdayName, format, strict) {
            var i, mom, regex;

            if (this._weekdaysParseExact) {
                return handleStrictParse$1.call(this, weekdayName, format, strict);
            }

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._minWeekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._fullWeekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already

                mom = createUTC([2000, 1]).day(i);
                if (strict && !this._fullWeekdaysParse[i]) {
                    this._fullWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                    this._shortWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                    this._minWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                }
                if (!this._weekdaysParse[i]) {
                    regex =
                        '^' +
                        this.weekdays(mom, '') +
                        '|^' +
                        this.weekdaysShort(mom, '') +
                        '|^' +
                        this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (
                    strict &&
                    format === 'dddd' &&
                    this._fullWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'ddd' &&
                    this._shortWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'dd' &&
                    this._minWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        }

        // MOMENTS

        function getSetDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        }

        function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        }

        function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.

            if (input != null) {
                var weekday = parseIsoWeekday(input, this.localeData());
                return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
                return this.day() || 7;
            }
        }

        function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysStrictRegex;
                } else {
                    return this._weekdaysRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    this._weekdaysRegex = defaultWeekdaysRegex;
                }
                return this._weekdaysStrictRegex && isStrict
                    ? this._weekdaysStrictRegex
                    : this._weekdaysRegex;
            }
        }

        function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysShortStrictRegex;
                } else {
                    return this._weekdaysShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                    this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                }
                return this._weekdaysShortStrictRegex && isStrict
                    ? this._weekdaysShortStrictRegex
                    : this._weekdaysShortRegex;
            }
        }

        function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysMinStrictRegex;
                } else {
                    return this._weekdaysMinRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                    this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                }
                return this._weekdaysMinStrictRegex && isStrict
                    ? this._weekdaysMinStrictRegex
                    : this._weekdaysMinRegex;
            }
        }

        function computeWeekdaysParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var minPieces = [],
                shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom,
                minp,
                shortp,
                longp;
            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, 1]).day(i);
                minp = regexEscape(this.weekdaysMin(mom, ''));
                shortp = regexEscape(this.weekdaysShort(mom, ''));
                longp = regexEscape(this.weekdays(mom, ''));
                minPieces.push(minp);
                shortPieces.push(shortp);
                longPieces.push(longp);
                mixedPieces.push(minp);
                mixedPieces.push(shortp);
                mixedPieces.push(longp);
            }
            // Sorting makes sure if one weekday (or abbr) is a prefix of another it
            // will match the longer piece.
            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);

            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;

            this._weekdaysStrictRegex = new RegExp(
                '^(' + longPieces.join('|') + ')',
                'i'
            );
            this._weekdaysShortStrictRegex = new RegExp(
                '^(' + shortPieces.join('|') + ')',
                'i'
            );
            this._weekdaysMinStrictRegex = new RegExp(
                '^(' + minPieces.join('|') + ')',
                'i'
            );
        }

        // FORMATTING

        function hFormat() {
            return this.hours() % 12 || 12;
        }

        function kFormat() {
            return this.hours() || 24;
        }

        addFormatToken('H', ['HH', 2], 0, 'hour');
        addFormatToken('h', ['hh', 2], 0, hFormat);
        addFormatToken('k', ['kk', 2], 0, kFormat);

        addFormatToken('hmm', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
        });

        addFormatToken('hmmss', 0, 0, function () {
            return (
                '' +
                hFormat.apply(this) +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2)
            );
        });

        addFormatToken('Hmm', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2);
        });

        addFormatToken('Hmmss', 0, 0, function () {
            return (
                '' +
                this.hours() +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2)
            );
        });

        function meridiem(token, lowercase) {
            addFormatToken(token, 0, 0, function () {
                return this.localeData().meridiem(
                    this.hours(),
                    this.minutes(),
                    lowercase
                );
            });
        }

        meridiem('a', true);
        meridiem('A', false);

        // ALIASES

        addUnitAlias('hour', 'h');

        // PRIORITY
        addUnitPriority('hour', 13);

        // PARSING

        function matchMeridiem(isStrict, locale) {
            return locale._meridiemParse;
        }

        addRegexToken('a', matchMeridiem);
        addRegexToken('A', matchMeridiem);
        addRegexToken('H', match1to2);
        addRegexToken('h', match1to2);
        addRegexToken('k', match1to2);
        addRegexToken('HH', match1to2, match2);
        addRegexToken('hh', match1to2, match2);
        addRegexToken('kk', match1to2, match2);

        addRegexToken('hmm', match3to4);
        addRegexToken('hmmss', match5to6);
        addRegexToken('Hmm', match3to4);
        addRegexToken('Hmmss', match5to6);

        addParseToken(['H', 'HH'], HOUR);
        addParseToken(['k', 'kk'], function (input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
        });
        addParseToken(['a', 'A'], function (input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
        });
        addParseToken(['h', 'hh'], function (input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
                pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('Hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
        });
        addParseToken('Hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
                pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
        });

        // LOCALES

        function localeIsPM(input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return (input + '').toLowerCase().charAt(0) === 'p';
        }

        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
            // Setting the hour should keep the time, because the user explicitly
            // specified which hour they want. So trying to maintain the same hour (in
            // a new timezone) makes sense. Adding/subtracting hours does not follow
            // this rule.
            getSetHour = makeGetSet('Hours', true);

        function localeMeridiem(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        }

        var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,

            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,

            week: defaultLocaleWeek,

            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,

            meridiemParse: defaultLocaleMeridiemParse,
        };

        // internal storage for locale config files
        var locales = {},
            localeFamilies = {},
            globalLocale;

        function commonPrefix(arr1, arr2) {
            var i,
                minl = Math.min(arr1.length, arr2.length);
            for (i = 0; i < minl; i += 1) {
                if (arr1[i] !== arr2[i]) {
                    return i;
                }
            }
            return minl;
        }

        function normalizeLocale(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
        }

        // pick the locale from the array
        // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
        // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
        function chooseLocale(names) {
            var i = 0,
                j,
                next,
                locale,
                split;

            while (i < names.length) {
                split = normalizeLocale(names[i]).split('-');
                j = split.length;
                next = normalizeLocale(names[i + 1]);
                next = next ? next.split('-') : null;
                while (j > 0) {
                    locale = loadLocale(split.slice(0, j).join('-'));
                    if (locale) {
                        return locale;
                    }
                    if (
                        next &&
                        next.length >= j &&
                        commonPrefix(split, next) >= j - 1
                    ) {
                        //the next array item is better than a shallower substring of this one
                        break;
                    }
                    j--;
                }
                i++;
            }
            return globalLocale;
        }

        function loadLocale(name) {
            var oldLocale = null,
                aliasedRequire;
            // TODO: Find a better way to register and load all the locales in Node
            if (
                locales[name] === undefined &&
                'object' !== 'undefined' &&
                module &&
                module.exports
            ) {
                try {
                    oldLocale = globalLocale._abbr;
                    aliasedRequire = commonjsRequire;
                    aliasedRequire('./locale/' + name);
                    getSetGlobalLocale(oldLocale);
                } catch (e) {
                    // mark as not found to avoid repeating expensive file require call causing high CPU
                    // when trying to find en-US, en_US, en-us for every format call
                    locales[name] = null; // null means not found
                }
            }
            return locales[name];
        }

        // This function will load locale and then set the global locale.  If
        // no arguments are passed in, it will simply return the current global
        // locale key.
        function getSetGlobalLocale(key, values) {
            var data;
            if (key) {
                if (isUndefined(values)) {
                    data = getLocale(key);
                } else {
                    data = defineLocale(key, values);
                }

                if (data) {
                    // moment.duration._locale = moment._locale = data;
                    globalLocale = data;
                } else {
                    if (typeof console !== 'undefined' && console.warn) {
                        //warn user if arguments are passed but the locale could not be set
                        console.warn(
                            'Locale ' + key + ' not found. Did you forget to load it?'
                        );
                    }
                }
            }

            return globalLocale._abbr;
        }

        function defineLocale(name, config) {
            if (config !== null) {
                var locale,
                    parentConfig = baseConfig;
                config.abbr = name;
                if (locales[name] != null) {
                    deprecateSimple(
                        'defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                            'an existing locale. moment.defineLocale(localeName, ' +
                            'config) should only be used for creating a new locale ' +
                            'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                    );
                    parentConfig = locales[name]._config;
                } else if (config.parentLocale != null) {
                    if (locales[config.parentLocale] != null) {
                        parentConfig = locales[config.parentLocale]._config;
                    } else {
                        locale = loadLocale(config.parentLocale);
                        if (locale != null) {
                            parentConfig = locale._config;
                        } else {
                            if (!localeFamilies[config.parentLocale]) {
                                localeFamilies[config.parentLocale] = [];
                            }
                            localeFamilies[config.parentLocale].push({
                                name: name,
                                config: config,
                            });
                            return null;
                        }
                    }
                }
                locales[name] = new Locale(mergeConfigs(parentConfig, config));

                if (localeFamilies[name]) {
                    localeFamilies[name].forEach(function (x) {
                        defineLocale(x.name, x.config);
                    });
                }

                // backwards compat for now: also set the locale
                // make sure we set the locale AFTER all child locales have been
                // created, so we won't end up with the child locale set.
                getSetGlobalLocale(name);

                return locales[name];
            } else {
                // useful for testing
                delete locales[name];
                return null;
            }
        }

        function updateLocale(name, config) {
            if (config != null) {
                var locale,
                    tmpLocale,
                    parentConfig = baseConfig;

                if (locales[name] != null && locales[name].parentLocale != null) {
                    // Update existing child locale in-place to avoid memory-leaks
                    locales[name].set(mergeConfigs(locales[name]._config, config));
                } else {
                    // MERGE
                    tmpLocale = loadLocale(name);
                    if (tmpLocale != null) {
                        parentConfig = tmpLocale._config;
                    }
                    config = mergeConfigs(parentConfig, config);
                    if (tmpLocale == null) {
                        // updateLocale is called for creating a new locale
                        // Set abbr so it will have a name (getters return
                        // undefined otherwise).
                        config.abbr = name;
                    }
                    locale = new Locale(config);
                    locale.parentLocale = locales[name];
                    locales[name] = locale;
                }

                // backwards compat for now: also set the locale
                getSetGlobalLocale(name);
            } else {
                // pass null for config to unupdate, useful for tests
                if (locales[name] != null) {
                    if (locales[name].parentLocale != null) {
                        locales[name] = locales[name].parentLocale;
                        if (name === getSetGlobalLocale()) {
                            getSetGlobalLocale(name);
                        }
                    } else if (locales[name] != null) {
                        delete locales[name];
                    }
                }
            }
            return locales[name];
        }

        // returns locale data
        function getLocale(key) {
            var locale;

            if (key && key._locale && key._locale._abbr) {
                key = key._locale._abbr;
            }

            if (!key) {
                return globalLocale;
            }

            if (!isArray(key)) {
                //short-circuit everything else
                locale = loadLocale(key);
                if (locale) {
                    return locale;
                }
                key = [key];
            }

            return chooseLocale(key);
        }

        function listLocales() {
            return keys(locales);
        }

        function checkOverflow(m) {
            var overflow,
                a = m._a;

            if (a && getParsingFlags(m).overflow === -2) {
                overflow =
                    a[MONTH] < 0 || a[MONTH] > 11
                        ? MONTH
                        : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                        ? DATE
                        : a[HOUR] < 0 ||
                          a[HOUR] > 24 ||
                          (a[HOUR] === 24 &&
                              (a[MINUTE] !== 0 ||
                                  a[SECOND] !== 0 ||
                                  a[MILLISECOND] !== 0))
                        ? HOUR
                        : a[MINUTE] < 0 || a[MINUTE] > 59
                        ? MINUTE
                        : a[SECOND] < 0 || a[SECOND] > 59
                        ? SECOND
                        : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                        ? MILLISECOND
                        : -1;

                if (
                    getParsingFlags(m)._overflowDayOfYear &&
                    (overflow < YEAR || overflow > DATE)
                ) {
                    overflow = DATE;
                }
                if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                    overflow = WEEK;
                }
                if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                    overflow = WEEKDAY;
                }

                getParsingFlags(m).overflow = overflow;
            }

            return m;
        }

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
            isoDates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/],
                ['YYYYMM', /\d{6}/, false],
                ['YYYY', /\d{4}/, false],
            ],
            // iso time formats and regexes
            isoTimes = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/],
            ],
            aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
            // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
            rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
            obsOffsets = {
                UT: 0,
                GMT: 0,
                EDT: -4 * 60,
                EST: -5 * 60,
                CDT: -5 * 60,
                CST: -6 * 60,
                MDT: -6 * 60,
                MST: -7 * 60,
                PDT: -7 * 60,
                PST: -8 * 60,
            };

        // date from iso format
        function configFromISO(config) {
            var i,
                l,
                string = config._i,
                match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                allowTime,
                dateFormat,
                timeFormat,
                tzFormat;

            if (match) {
                getParsingFlags(config).iso = true;

                for (i = 0, l = isoDates.length; i < l; i++) {
                    if (isoDates[i][1].exec(match[1])) {
                        dateFormat = isoDates[i][0];
                        allowTime = isoDates[i][2] !== false;
                        break;
                    }
                }
                if (dateFormat == null) {
                    config._isValid = false;
                    return;
                }
                if (match[3]) {
                    for (i = 0, l = isoTimes.length; i < l; i++) {
                        if (isoTimes[i][1].exec(match[3])) {
                            // match[2] should be 'T' or space
                            timeFormat = (match[2] || ' ') + isoTimes[i][0];
                            break;
                        }
                    }
                    if (timeFormat == null) {
                        config._isValid = false;
                        return;
                    }
                }
                if (!allowTime && timeFormat != null) {
                    config._isValid = false;
                    return;
                }
                if (match[4]) {
                    if (tzRegex.exec(match[4])) {
                        tzFormat = 'Z';
                    } else {
                        config._isValid = false;
                        return;
                    }
                }
                config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                configFromStringAndFormat(config);
            } else {
                config._isValid = false;
            }
        }

        function extractFromRFC2822Strings(
            yearStr,
            monthStr,
            dayStr,
            hourStr,
            minuteStr,
            secondStr
        ) {
            var result = [
                untruncateYear(yearStr),
                defaultLocaleMonthsShort.indexOf(monthStr),
                parseInt(dayStr, 10),
                parseInt(hourStr, 10),
                parseInt(minuteStr, 10),
            ];

            if (secondStr) {
                result.push(parseInt(secondStr, 10));
            }

            return result;
        }

        function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);
            if (year <= 49) {
                return 2000 + year;
            } else if (year <= 999) {
                return 1900 + year;
            }
            return year;
        }

        function preprocessRFC2822(s) {
            // Remove comments and folding whitespace and replace multiple-spaces with a single space
            return s
                .replace(/\([^)]*\)|[\n\t]/g, ' ')
                .replace(/(\s\s+)/g, ' ')
                .replace(/^\s\s*/, '')
                .replace(/\s\s*$/, '');
        }

        function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
                // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
                var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                    weekdayActual = new Date(
                        parsedInput[0],
                        parsedInput[1],
                        parsedInput[2]
                    ).getDay();
                if (weekdayProvided !== weekdayActual) {
                    getParsingFlags(config).weekdayMismatch = true;
                    config._isValid = false;
                    return false;
                }
            }
            return true;
        }

        function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
                return obsOffsets[obsOffset];
            } else if (militaryOffset) {
                // the only allowed military tz is Z
                return 0;
            } else {
                var hm = parseInt(numOffset, 10),
                    m = hm % 100,
                    h = (hm - m) / 100;
                return h * 60 + m;
            }
        }

        // date and time from ref 2822 format
        function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i)),
                parsedArray;
            if (match) {
                parsedArray = extractFromRFC2822Strings(
                    match[4],
                    match[3],
                    match[2],
                    match[5],
                    match[6],
                    match[7]
                );
                if (!checkWeekday(match[1], parsedArray, config)) {
                    return;
                }

                config._a = parsedArray;
                config._tzm = calculateOffset(match[8], match[9], match[10]);

                config._d = createUTCDate.apply(null, config._a);
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

                getParsingFlags(config).rfc2822 = true;
            } else {
                config._isValid = false;
            }
        }

        // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
        function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);
            if (matched !== null) {
                config._d = new Date(+matched[1]);
                return;
            }

            configFromISO(config);
            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            configFromRFC2822(config);
            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            if (config._strict) {
                config._isValid = false;
            } else {
                // Final attempt, use Input Fallback
                hooks.createFromInputFallback(config);
            }
        }

        hooks.createFromInputFallback = deprecate(
            'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
                'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
                'discouraged and will be removed in an upcoming major release. Please refer to ' +
                'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
            function (config) {
                config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
            }
        );

        // Pick the first defined of two or three arguments.
        function defaults(a, b, c) {
            if (a != null) {
                return a;
            }
            if (b != null) {
                return b;
            }
            return c;
        }

        function currentDateArray(config) {
            // hooks is actually the exported moment object
            var nowValue = new Date(hooks.now());
            if (config._useUTC) {
                return [
                    nowValue.getUTCFullYear(),
                    nowValue.getUTCMonth(),
                    nowValue.getUTCDate(),
                ];
            }
            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
        }

        // convert an array to a date.
        // the array should mirror the parameters below
        // note: all values past the year are optional and will default to the lowest possible value.
        // [year, month, day , hour, minute, second, millisecond]
        function configFromArray(config) {
            var i,
                date,
                input = [],
                currentDate,
                expectedWeekday,
                yearToUse;

            if (config._d) {
                return;
            }

            currentDate = currentDateArray(config);

            //compute day of the year from weeks and weekdays
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                dayOfYearFromWeekInfo(config);
            }

            //if the day of the year is set, figure out what it is
            if (config._dayOfYear != null) {
                yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

                if (
                    config._dayOfYear > daysInYear(yearToUse) ||
                    config._dayOfYear === 0
                ) {
                    getParsingFlags(config)._overflowDayOfYear = true;
                }

                date = createUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
            }

            // Default to current date.
            // * if no year, month, day of month are given, default to today
            // * if day of month is given, default month and year
            // * if month is given, default only year
            // * if year is given, don't default anything
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
            }

            // Zero out whatever was not defaulted, including time
            for (; i < 7; i++) {
                config._a[i] = input[i] =
                    config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
            }

            // Check for 24:00:00.000
            if (
                config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0
            ) {
                config._nextDay = true;
                config._a[HOUR] = 0;
            }

            config._d = (config._useUTC ? createUTCDate : createDate).apply(
                null,
                input
            );
            expectedWeekday = config._useUTC
                ? config._d.getUTCDay()
                : config._d.getDay();

            // Apply timezone offset from input. The actual utcOffset can be changed
            // with parseZone.
            if (config._tzm != null) {
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }

            if (config._nextDay) {
                config._a[HOUR] = 24;
            }

            // check for mismatching day of week
            if (
                config._w &&
                typeof config._w.d !== 'undefined' &&
                config._w.d !== expectedWeekday
            ) {
                getParsingFlags(config).weekdayMismatch = true;
            }
        }

        function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;

                // TODO: We need to take the current isoWeekYear, but that depends on
                // how we interpret now (local, utc, fixed offset). So create
                // a now version of current config (take local/utc/offset flags, and
                // create now).
                weekYear = defaults(
                    w.GG,
                    config._a[YEAR],
                    weekOfYear(createLocal(), 1, 4).year
                );
                week = defaults(w.W, 1);
                weekday = defaults(w.E, 1);
                if (weekday < 1 || weekday > 7) {
                    weekdayOverflow = true;
                }
            } else {
                dow = config._locale._week.dow;
                doy = config._locale._week.doy;

                curWeek = weekOfYear(createLocal(), dow, doy);

                weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

                // Default to current week.
                week = defaults(w.w, curWeek.week);

                if (w.d != null) {
                    // weekday -- low day numbers are considered next week
                    weekday = w.d;
                    if (weekday < 0 || weekday > 6) {
                        weekdayOverflow = true;
                    }
                } else if (w.e != null) {
                    // local weekday -- counting starts from beginning of week
                    weekday = w.e + dow;
                    if (w.e < 0 || w.e > 6) {
                        weekdayOverflow = true;
                    }
                } else {
                    // default to beginning of week
                    weekday = dow;
                }
            }
            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
                getParsingFlags(config)._overflowWeekday = true;
            } else {
                temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                config._a[YEAR] = temp.year;
                config._dayOfYear = temp.dayOfYear;
            }
        }

        // constant that refers to the ISO standard
        hooks.ISO_8601 = function () {};

        // constant that refers to the RFC 2822 form
        hooks.RFC_2822 = function () {};

        // date from string and format string
        function configFromStringAndFormat(config) {
            // TODO: Move this to another part of the creation flow to prevent circular deps
            if (config._f === hooks.ISO_8601) {
                configFromISO(config);
                return;
            }
            if (config._f === hooks.RFC_2822) {
                configFromRFC2822(config);
                return;
            }
            config._a = [];
            getParsingFlags(config).empty = true;

            // This array is used to make a Date, either with `new Date` or `Date.UTC`
            var string = '' + config._i,
                i,
                parsedInput,
                tokens,
                token,
                skipped,
                stringLength = string.length,
                totalParsedInputLength = 0,
                era;

            tokens =
                expandFormat(config._f, config._locale).match(formattingTokens) || [];

            for (i = 0; i < tokens.length; i++) {
                token = tokens[i];
                parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                    [])[0];
                if (parsedInput) {
                    skipped = string.substr(0, string.indexOf(parsedInput));
                    if (skipped.length > 0) {
                        getParsingFlags(config).unusedInput.push(skipped);
                    }
                    string = string.slice(
                        string.indexOf(parsedInput) + parsedInput.length
                    );
                    totalParsedInputLength += parsedInput.length;
                }
                // don't parse if it's not a known token
                if (formatTokenFunctions[token]) {
                    if (parsedInput) {
                        getParsingFlags(config).empty = false;
                    } else {
                        getParsingFlags(config).unusedTokens.push(token);
                    }
                    addTimeToArrayFromToken(token, parsedInput, config);
                } else if (config._strict && !parsedInput) {
                    getParsingFlags(config).unusedTokens.push(token);
                }
            }

            // add remaining unparsed input length to the string
            getParsingFlags(config).charsLeftOver =
                stringLength - totalParsedInputLength;
            if (string.length > 0) {
                getParsingFlags(config).unusedInput.push(string);
            }

            // clear _12h flag if hour is <= 12
            if (
                config._a[HOUR] <= 12 &&
                getParsingFlags(config).bigHour === true &&
                config._a[HOUR] > 0
            ) {
                getParsingFlags(config).bigHour = undefined;
            }

            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            // handle meridiem
            config._a[HOUR] = meridiemFixWrap(
                config._locale,
                config._a[HOUR],
                config._meridiem
            );

            // handle era
            era = getParsingFlags(config).era;
            if (era !== null) {
                config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
            }

            configFromArray(config);
            checkOverflow(config);
        }

        function meridiemFixWrap(locale, hour, meridiem) {
            var isPm;

            if (meridiem == null) {
                // nothing to do
                return hour;
            }
            if (locale.meridiemHour != null) {
                return locale.meridiemHour(hour, meridiem);
            } else if (locale.isPM != null) {
                // Fallback
                isPm = locale.isPM(meridiem);
                if (isPm && hour < 12) {
                    hour += 12;
                }
                if (!isPm && hour === 12) {
                    hour = 0;
                }
                return hour;
            } else {
                // this is not supposed to happen
                return hour;
            }
        }

        // date from string and array of format strings
        function configFromStringAndArray(config) {
            var tempConfig,
                bestMoment,
                scoreToBeat,
                i,
                currentScore,
                validFormatFound,
                bestFormatIsValid = false;

            if (config._f.length === 0) {
                getParsingFlags(config).invalidFormat = true;
                config._d = new Date(NaN);
                return;
            }

            for (i = 0; i < config._f.length; i++) {
                currentScore = 0;
                validFormatFound = false;
                tempConfig = copyConfig({}, config);
                if (config._useUTC != null) {
                    tempConfig._useUTC = config._useUTC;
                }
                tempConfig._f = config._f[i];
                configFromStringAndFormat(tempConfig);

                if (isValid(tempConfig)) {
                    validFormatFound = true;
                }

                // if there is any input that was not parsed add a penalty for that format
                currentScore += getParsingFlags(tempConfig).charsLeftOver;

                //or tokens
                currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

                getParsingFlags(tempConfig).score = currentScore;

                if (!bestFormatIsValid) {
                    if (
                        scoreToBeat == null ||
                        currentScore < scoreToBeat ||
                        validFormatFound
                    ) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig;
                        if (validFormatFound) {
                            bestFormatIsValid = true;
                        }
                    }
                } else {
                    if (currentScore < scoreToBeat) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig;
                    }
                }
            }

            extend(config, bestMoment || tempConfig);
        }

        function configFromObject(config) {
            if (config._d) {
                return;
            }

            var i = normalizeObjectUnits(config._i),
                dayOrDate = i.day === undefined ? i.date : i.day;
            config._a = map(
                [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
                function (obj) {
                    return obj && parseInt(obj, 10);
                }
            );

            configFromArray(config);
        }

        function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));
            if (res._nextDay) {
                // Adding is smart enough around DST
                res.add(1, 'd');
                res._nextDay = undefined;
            }

            return res;
        }

        function prepareConfig(config) {
            var input = config._i,
                format = config._f;

            config._locale = config._locale || getLocale(config._l);

            if (input === null || (format === undefined && input === '')) {
                return createInvalid({ nullInput: true });
            }

            if (typeof input === 'string') {
                config._i = input = config._locale.preparse(input);
            }

            if (isMoment(input)) {
                return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
                config._d = input;
            } else if (isArray(format)) {
                configFromStringAndArray(config);
            } else if (format) {
                configFromStringAndFormat(config);
            } else {
                configFromInput(config);
            }

            if (!isValid(config)) {
                config._d = null;
            }

            return config;
        }

        function configFromInput(config) {
            var input = config._i;
            if (isUndefined(input)) {
                config._d = new Date(hooks.now());
            } else if (isDate(input)) {
                config._d = new Date(input.valueOf());
            } else if (typeof input === 'string') {
                configFromString(config);
            } else if (isArray(input)) {
                config._a = map(input.slice(0), function (obj) {
                    return parseInt(obj, 10);
                });
                configFromArray(config);
            } else if (isObject(input)) {
                configFromObject(config);
            } else if (isNumber(input)) {
                // from milliseconds
                config._d = new Date(input);
            } else {
                hooks.createFromInputFallback(config);
            }
        }

        function createLocalOrUTC(input, format, locale, strict, isUTC) {
            var c = {};

            if (format === true || format === false) {
                strict = format;
                format = undefined;
            }

            if (locale === true || locale === false) {
                strict = locale;
                locale = undefined;
            }

            if (
                (isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)
            ) {
                input = undefined;
            }
            // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423
            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;

            return createFromConfig(c);
        }

        function createLocal(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
        }

        var prototypeMin = deprecate(
                'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
                function () {
                    var other = createLocal.apply(null, arguments);
                    if (this.isValid() && other.isValid()) {
                        return other < this ? this : other;
                    } else {
                        return createInvalid();
                    }
                }
            ),
            prototypeMax = deprecate(
                'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
                function () {
                    var other = createLocal.apply(null, arguments);
                    if (this.isValid() && other.isValid()) {
                        return other > this ? this : other;
                    } else {
                        return createInvalid();
                    }
                }
            );

        // Pick a moment m from moments so that m[fn](other) is true for all
        // other. This relies on the function fn to be transitive.
        //
        // moments should either be an array of moment objects or an array, whose
        // first element is an array of moment objects.
        function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
            }
            if (!moments.length) {
                return createLocal();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
                if (!moments[i].isValid() || moments[i][fn](res)) {
                    res = moments[i];
                }
            }
            return res;
        }

        // TODO: Use [].sort instead?
        function min() {
            var args = [].slice.call(arguments, 0);

            return pickBy('isBefore', args);
        }

        function max() {
            var args = [].slice.call(arguments, 0);

            return pickBy('isAfter', args);
        }

        var now = function () {
            return Date.now ? Date.now() : +new Date();
        };

        var ordering = [
            'year',
            'quarter',
            'month',
            'week',
            'day',
            'hour',
            'minute',
            'second',
            'millisecond',
        ];

        function isDurationValid(m) {
            var key,
                unitHasDecimal = false,
                i;
            for (key in m) {
                if (
                    hasOwnProp(m, key) &&
                    !(
                        indexOf.call(ordering, key) !== -1 &&
                        (m[key] == null || !isNaN(m[key]))
                    )
                ) {
                    return false;
                }
            }

            for (i = 0; i < ordering.length; ++i) {
                if (m[ordering[i]]) {
                    if (unitHasDecimal) {
                        return false; // only allow non-integers for smallest unit
                    }
                    if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                        unitHasDecimal = true;
                    }
                }
            }

            return true;
        }

        function isValid$1() {
            return this._isValid;
        }

        function createInvalid$1() {
            return createDuration(NaN);
        }

        function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration),
                years = normalizedInput.year || 0,
                quarters = normalizedInput.quarter || 0,
                months = normalizedInput.month || 0,
                weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
                days = normalizedInput.day || 0,
                hours = normalizedInput.hour || 0,
                minutes = normalizedInput.minute || 0,
                seconds = normalizedInput.second || 0,
                milliseconds = normalizedInput.millisecond || 0;

            this._isValid = isDurationValid(normalizedInput);

            // representation for dateAddRemove
            this._milliseconds =
                +milliseconds +
                seconds * 1e3 + // 1000
                minutes * 6e4 + // 1000 * 60
                hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately
            this._days = +days + weeks * 7;
            // It is impossible to translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.
            this._months = +months + quarters * 3 + years * 12;

            this._data = {};

            this._locale = getLocale();

            this._bubble();
        }

        function isDuration(obj) {
            return obj instanceof Duration;
        }

        function absRound(number) {
            if (number < 0) {
                return Math.round(-1 * number) * -1;
            } else {
                return Math.round(number);
            }
        }

        // compare two arrays, return the number of differences
        function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length),
                lengthDiff = Math.abs(array1.length - array2.length),
                diffs = 0,
                i;
            for (i = 0; i < len; i++) {
                if (
                    (dontConvert && array1[i] !== array2[i]) ||
                    (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
                ) {
                    diffs++;
                }
            }
            return diffs + lengthDiff;
        }

        // FORMATTING

        function offset(token, separator) {
            addFormatToken(token, 0, 0, function () {
                var offset = this.utcOffset(),
                    sign = '+';
                if (offset < 0) {
                    offset = -offset;
                    sign = '-';
                }
                return (
                    sign +
                    zeroFill(~~(offset / 60), 2) +
                    separator +
                    zeroFill(~~offset % 60, 2)
                );
            });
        }

        offset('Z', ':');
        offset('ZZ', '');

        // PARSING

        addRegexToken('Z', matchShortOffset);
        addRegexToken('ZZ', matchShortOffset);
        addParseToken(['Z', 'ZZ'], function (input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
        });

        // HELPERS

        // timezone chunker
        // '+10:00' > ['10',  '00']
        // '-1530'  > ['-15', '30']
        var chunkOffset = /([\+\-]|\d\d)/gi;

        function offsetFromString(matcher, string) {
            var matches = (string || '').match(matcher),
                chunk,
                parts,
                minutes;

            if (matches === null) {
                return null;
            }

            chunk = matches[matches.length - 1] || [];
            parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
            minutes = +(parts[1] * 60) + toInt(parts[2]);

            return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
        }

        // Return a moment from input, that is local/utc/zone equivalent to model.
        function cloneWithOffset(input, model) {
            var res, diff;
            if (model._isUTC) {
                res = model.clone();
                diff =
                    (isMoment(input) || isDate(input)
                        ? input.valueOf()
                        : createLocal(input).valueOf()) - res.valueOf();
                // Use low-level api, because this fn is low-level api.
                res._d.setTime(res._d.valueOf() + diff);
                hooks.updateOffset(res, false);
                return res;
            } else {
                return createLocal(input).local();
            }
        }

        function getDateOffset(m) {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(m._d.getTimezoneOffset());
        }

        // HOOKS

        // This function will be called whenever a moment is mutated.
        // It is intended to keep the offset in sync with the timezone.
        hooks.updateOffset = function () {};

        // MOMENTS

        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0,
                localAdjust;
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            if (input != null) {
                if (typeof input === 'string') {
                    input = offsetFromString(matchShortOffset, input);
                    if (input === null) {
                        return this;
                    }
                } else if (Math.abs(input) < 16 && !keepMinutes) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = getDateOffset(this);
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.add(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addSubtract(
                            this,
                            createDuration(input - offset, 'm'),
                            1,
                            false
                        );
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        hooks.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }
                return this;
            } else {
                return this._isUTC ? offset : getDateOffset(this);
            }
        }

        function getSetZone(input, keepLocalTime) {
            if (input != null) {
                if (typeof input !== 'string') {
                    input = -input;
                }

                this.utcOffset(input, keepLocalTime);

                return this;
            } else {
                return -this.utcOffset();
            }
        }

        function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
        }

        function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.subtract(getDateOffset(this), 'm');
                }
            }
            return this;
        }

        function setOffsetToParsedOffset() {
            if (this._tzm != null) {
                this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === 'string') {
                var tZone = offsetFromString(matchOffset, this._i);
                if (tZone != null) {
                    this.utcOffset(tZone);
                } else {
                    this.utcOffset(0, true);
                }
            }
            return this;
        }

        function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
                return false;
            }
            input = input ? createLocal(input).utcOffset() : 0;

            return (this.utcOffset() - input) % 60 === 0;
        }

        function isDaylightSavingTime() {
            return (
                this.utcOffset() > this.clone().month(0).utcOffset() ||
                this.utcOffset() > this.clone().month(5).utcOffset()
            );
        }

        function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
                return this._isDSTShifted;
            }

            var c = {},
                other;

            copyConfig(c, this);
            c = prepareConfig(c);

            if (c._a) {
                other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                this._isDSTShifted =
                    this.isValid() && compareArrays(c._a, other.toArray()) > 0;
            } else {
                this._isDSTShifted = false;
            }

            return this._isDSTShifted;
        }

        function isLocal() {
            return this.isValid() ? !this._isUTC : false;
        }

        function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
        }

        function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
        }

        // ASP.NET json date format regex
        var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
            // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
            // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
            // and further modified to allow for strings containing both week and day
            isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

        function createDuration(input, key) {
            var duration = input,
                // matching against regexp is expensive, do it on demand
                match = null,
                sign,
                ret,
                diffRes;

            if (isDuration(input)) {
                duration = {
                    ms: input._milliseconds,
                    d: input._days,
                    M: input._months,
                };
            } else if (isNumber(input) || !isNaN(+input)) {
                duration = {};
                if (key) {
                    duration[key] = +input;
                } else {
                    duration.milliseconds = +input;
                }
            } else if ((match = aspNetRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: 0,
                    d: toInt(match[DATE]) * sign,
                    h: toInt(match[HOUR]) * sign,
                    m: toInt(match[MINUTE]) * sign,
                    s: toInt(match[SECOND]) * sign,
                    ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
                };
            } else if ((match = isoRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: parseIso(match[2], sign),
                    M: parseIso(match[3], sign),
                    w: parseIso(match[4], sign),
                    d: parseIso(match[5], sign),
                    h: parseIso(match[6], sign),
                    m: parseIso(match[7], sign),
                    s: parseIso(match[8], sign),
                };
            } else if (duration == null) {
                // checks for null or undefined
                duration = {};
            } else if (
                typeof duration === 'object' &&
                ('from' in duration || 'to' in duration)
            ) {
                diffRes = momentsDifference(
                    createLocal(duration.from),
                    createLocal(duration.to)
                );

                duration = {};
                duration.ms = diffRes.milliseconds;
                duration.M = diffRes.months;
            }

            ret = new Duration(duration);

            if (isDuration(input) && hasOwnProp(input, '_locale')) {
                ret._locale = input._locale;
            }

            if (isDuration(input) && hasOwnProp(input, '_isValid')) {
                ret._isValid = input._isValid;
            }

            return ret;
        }

        createDuration.fn = Duration.prototype;
        createDuration.invalid = createInvalid$1;

        function parseIso(inp, sign) {
            // We'd normally use ~~inp for this, but unfortunately it also
            // converts floats to ints.
            // inp may be undefined, so careful calling replace on it.
            var res = inp && parseFloat(inp.replace(',', '.'));
            // apply sign while we're at it
            return (isNaN(res) ? 0 : res) * sign;
        }

        function positiveMomentsDifference(base, other) {
            var res = {};

            res.months =
                other.month() - base.month() + (other.year() - base.year()) * 12;
            if (base.clone().add(res.months, 'M').isAfter(other)) {
                --res.months;
            }

            res.milliseconds = +other - +base.clone().add(res.months, 'M');

            return res;
        }

        function momentsDifference(base, other) {
            var res;
            if (!(base.isValid() && other.isValid())) {
                return { milliseconds: 0, months: 0 };
            }

            other = cloneWithOffset(other, base);
            if (base.isBefore(other)) {
                res = positiveMomentsDifference(base, other);
            } else {
                res = positiveMomentsDifference(other, base);
                res.milliseconds = -res.milliseconds;
                res.months = -res.months;
            }

            return res;
        }

        // TODO: remove 'name' arg after deprecation is removed
        function createAdder(direction, name) {
            return function (val, period) {
                var dur, tmp;
                //invert the arguments, but complain about it
                if (period !== null && !isNaN(+period)) {
                    deprecateSimple(
                        name,
                        'moment().' +
                            name +
                            '(period, number) is deprecated. Please use moment().' +
                            name +
                            '(number, period). ' +
                            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                    );
                    tmp = val;
                    val = period;
                    period = tmp;
                }

                dur = createDuration(val, period);
                addSubtract(this, dur, direction);
                return this;
            };
        }

        function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds,
                days = absRound(duration._days),
                months = absRound(duration._months);

            if (!mom.isValid()) {
                // No op
                return;
            }

            updateOffset = updateOffset == null ? true : updateOffset;

            if (months) {
                setMonth(mom, get(mom, 'Month') + months * isAdding);
            }
            if (days) {
                set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
            }
            if (milliseconds) {
                mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }
            if (updateOffset) {
                hooks.updateOffset(mom, days || months);
            }
        }

        var add = createAdder(1, 'add'),
            subtract = createAdder(-1, 'subtract');

        function isString(input) {
            return typeof input === 'string' || input instanceof String;
        }

        // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
        function isMomentInput(input) {
            return (
                isMoment(input) ||
                isDate(input) ||
                isString(input) ||
                isNumber(input) ||
                isNumberOrStringArray(input) ||
                isMomentInputObject(input) ||
                input === null ||
                input === undefined
            );
        }

        function isMomentInputObject(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = [
                    'years',
                    'year',
                    'y',
                    'months',
                    'month',
                    'M',
                    'days',
                    'day',
                    'd',
                    'dates',
                    'date',
                    'D',
                    'hours',
                    'hour',
                    'h',
                    'minutes',
                    'minute',
                    'm',
                    'seconds',
                    'second',
                    's',
                    'milliseconds',
                    'millisecond',
                    'ms',
                ],
                i,
                property;

            for (i = 0; i < properties.length; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
            }

            return objectTest && propertyTest;
        }

        function isNumberOrStringArray(input) {
            var arrayTest = isArray(input),
                dataTypeTest = false;
            if (arrayTest) {
                dataTypeTest =
                    input.filter(function (item) {
                        return !isNumber(item) && isString(input);
                    }).length === 0;
            }
            return arrayTest && dataTypeTest;
        }

        function isCalendarSpec(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = [
                    'sameDay',
                    'nextDay',
                    'lastDay',
                    'nextWeek',
                    'lastWeek',
                    'sameElse',
                ],
                i,
                property;

            for (i = 0; i < properties.length; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
            }

            return objectTest && propertyTest;
        }

        function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, 'days', true);
            return diff < -6
                ? 'sameElse'
                : diff < -1
                ? 'lastWeek'
                : diff < 0
                ? 'lastDay'
                : diff < 1
                ? 'sameDay'
                : diff < 2
                ? 'nextDay'
                : diff < 7
                ? 'nextWeek'
                : 'sameElse';
        }

        function calendar$1(time, formats) {
            // Support for single parameter, formats only overload to the calendar function
            if (arguments.length === 1) {
                if (!arguments[0]) {
                    time = undefined;
                    formats = undefined;
                } else if (isMomentInput(arguments[0])) {
                    time = arguments[0];
                    formats = undefined;
                } else if (isCalendarSpec(arguments[0])) {
                    formats = arguments[0];
                    time = undefined;
                }
            }
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're local/utc/offset or not.
            var now = time || createLocal(),
                sod = cloneWithOffset(now, this).startOf('day'),
                format = hooks.calendarFormat(this, sod) || 'sameElse',
                output =
                    formats &&
                    (isFunction(formats[format])
                        ? formats[format].call(this, now)
                        : formats[format]);

            return this.format(
                output || this.localeData().calendar(format, this, createLocal(now))
            );
        }

        function clone() {
            return new Moment(this);
        }

        function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() > localInput.valueOf();
            } else {
                return localInput.valueOf() < this.clone().startOf(units).valueOf();
            }
        }

        function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() < localInput.valueOf();
            } else {
                return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
        }

        function isBetween(from, to, units, inclusivity) {
            var localFrom = isMoment(from) ? from : createLocal(from),
                localTo = isMoment(to) ? to : createLocal(to);
            if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
                return false;
            }
            inclusivity = inclusivity || '()';
            return (
                (inclusivity[0] === '('
                    ? this.isAfter(localFrom, units)
                    : !this.isBefore(localFrom, units)) &&
                (inclusivity[1] === ')'
                    ? this.isBefore(localTo, units)
                    : !this.isAfter(localTo, units))
            );
        }

        function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input),
                inputMs;
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() === localInput.valueOf();
            } else {
                inputMs = localInput.valueOf();
                return (
                    this.clone().startOf(units).valueOf() <= inputMs &&
                    inputMs <= this.clone().endOf(units).valueOf()
                );
            }
        }

        function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
        }

        function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
        }

        function diff(input, units, asFloat) {
            var that, zoneDelta, output;

            if (!this.isValid()) {
                return NaN;
            }

            that = cloneWithOffset(input, this);

            if (!that.isValid()) {
                return NaN;
            }

            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

            units = normalizeUnits(units);

            switch (units) {
                case 'year':
                    output = monthDiff(this, that) / 12;
                    break;
                case 'month':
                    output = monthDiff(this, that);
                    break;
                case 'quarter':
                    output = monthDiff(this, that) / 3;
                    break;
                case 'second':
                    output = (this - that) / 1e3;
                    break; // 1000
                case 'minute':
                    output = (this - that) / 6e4;
                    break; // 1000 * 60
                case 'hour':
                    output = (this - that) / 36e5;
                    break; // 1000 * 60 * 60
                case 'day':
                    output = (this - that - zoneDelta) / 864e5;
                    break; // 1000 * 60 * 60 * 24, negate dst
                case 'week':
                    output = (this - that - zoneDelta) / 6048e5;
                    break; // 1000 * 60 * 60 * 24 * 7, negate dst
                default:
                    output = this - that;
            }

            return asFloat ? output : absFloor(output);
        }

        function monthDiff(a, b) {
            if (a.date() < b.date()) {
                // end-of-month calculations work correct when the start month has more
                // days than the end month.
                return -monthDiff(b, a);
            }
            // difference in months
            var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
                // b is in (anchor - 1 month, anchor + 1 month)
                anchor = a.clone().add(wholeMonthDiff, 'months'),
                anchor2,
                adjust;

            if (b - anchor < 0) {
                anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor - anchor2);
            } else {
                anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor2 - anchor);
            }

            //check for negative zero, return zero if negative zero
            return -(wholeMonthDiff + adjust) || 0;
        }

        hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
        hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

        function toString() {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        }

        function toISOString(keepOffset) {
            if (!this.isValid()) {
                return null;
            }
            var utc = keepOffset !== true,
                m = utc ? this.clone().utc() : this;
            if (m.year() < 0 || m.year() > 9999) {
                return formatMoment(
                    m,
                    utc
                        ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                        : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
                );
            }
            if (isFunction(Date.prototype.toISOString)) {
                // native implementation is ~50x faster, use it when we can
                if (utc) {
                    return this.toDate().toISOString();
                } else {
                    return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                        .toISOString()
                        .replace('Z', formatMoment(m, 'Z'));
                }
            }
            return formatMoment(
                m,
                utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }

        /**
         * Return a human readable representation of a moment that can
         * also be evaluated to get a new moment which is the same
         *
         * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
         */
        function inspect() {
            if (!this.isValid()) {
                return 'moment.invalid(/* ' + this._i + ' */)';
            }
            var func = 'moment',
                zone = '',
                prefix,
                year,
                datetime,
                suffix;
            if (!this.isLocal()) {
                func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                zone = 'Z';
            }
            prefix = '[' + func + '("]';
            year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
            datetime = '-MM-DD[T]HH:mm:ss.SSS';
            suffix = zone + '[")]';

            return this.format(prefix + year + datetime + suffix);
        }

        function format(inputString) {
            if (!inputString) {
                inputString = this.isUtc()
                    ? hooks.defaultFormatUtc
                    : hooks.defaultFormat;
            }
            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
        }

        function from(time, withoutSuffix) {
            if (
                this.isValid() &&
                ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
            ) {
                return createDuration({ to: this, from: time })
                    .locale(this.locale())
                    .humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
        }

        function to(time, withoutSuffix) {
            if (
                this.isValid() &&
                ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
            ) {
                return createDuration({ from: this, to: time })
                    .locale(this.locale())
                    .humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
        }

        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        function locale(key) {
            var newLocaleData;

            if (key === undefined) {
                return this._locale._abbr;
            } else {
                newLocaleData = getLocale(key);
                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }
                return this;
            }
        }

        var lang = deprecate(
            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
            function (key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    return this.locale(key);
                }
            }
        );

        function localeData() {
            return this._locale;
        }

        var MS_PER_SECOND = 1000,
            MS_PER_MINUTE = 60 * MS_PER_SECOND,
            MS_PER_HOUR = 60 * MS_PER_MINUTE,
            MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

        // actual modulo - handles negative numbers (for dates before 1970):
        function mod$1(dividend, divisor) {
            return ((dividend % divisor) + divisor) % divisor;
        }

        function localStartOfDate(y, m, d) {
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return new Date(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
                return new Date(y, m, d).valueOf();
            }
        }

        function utcStartOfDate(y, m, d) {
            // Date.UTC remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
                return Date.UTC(y, m, d);
            }
        }

        function startOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }

            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
                case 'year':
                    time = startOfDate(this.year(), 0, 1);
                    break;
                case 'quarter':
                    time = startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3),
                        1
                    );
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month(), 1);
                    break;
                case 'week':
                    time = startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday()
                    );
                    break;
                case 'isoWeek':
                    time = startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1)
                    );
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date());
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time -= mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    );
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_MINUTE);
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_SECOND);
                    break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }

        function endOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }

            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
                case 'year':
                    time = startOfDate(this.year() + 1, 0, 1) - 1;
                    break;
                case 'quarter':
                    time =
                        startOfDate(
                            this.year(),
                            this.month() - (this.month() % 3) + 3,
                            1
                        ) - 1;
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                    break;
                case 'week':
                    time =
                        startOfDate(
                            this.year(),
                            this.month(),
                            this.date() - this.weekday() + 7
                        ) - 1;
                    break;
                case 'isoWeek':
                    time =
                        startOfDate(
                            this.year(),
                            this.month(),
                            this.date() - (this.isoWeekday() - 1) + 7
                        ) - 1;
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time +=
                        MS_PER_HOUR -
                        mod$1(
                            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                            MS_PER_HOUR
                        ) -
                        1;
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                    break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }

        function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 60000;
        }

        function unix() {
            return Math.floor(this.valueOf() / 1000);
        }

        function toDate() {
            return new Date(this.valueOf());
        }

        function toArray() {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hour(),
                m.minute(),
                m.second(),
                m.millisecond(),
            ];
        }

        function toObject() {
            var m = this;
            return {
                years: m.year(),
                months: m.month(),
                date: m.date(),
                hours: m.hours(),
                minutes: m.minutes(),
                seconds: m.seconds(),
                milliseconds: m.milliseconds(),
            };
        }

        function toJSON() {
            // new Date(NaN).toJSON() === null
            return this.isValid() ? this.toISOString() : null;
        }

        function isValid$2() {
            return isValid(this);
        }

        function parsingFlags() {
            return extend({}, getParsingFlags(this));
        }

        function invalidAt() {
            return getParsingFlags(this).overflow;
        }

        function creationData() {
            return {
                input: this._i,
                format: this._f,
                locale: this._locale,
                isUTC: this._isUTC,
                strict: this._strict,
            };
        }

        addFormatToken('N', 0, 0, 'eraAbbr');
        addFormatToken('NN', 0, 0, 'eraAbbr');
        addFormatToken('NNN', 0, 0, 'eraAbbr');
        addFormatToken('NNNN', 0, 0, 'eraName');
        addFormatToken('NNNNN', 0, 0, 'eraNarrow');

        addFormatToken('y', ['y', 1], 'yo', 'eraYear');
        addFormatToken('y', ['yy', 2], 0, 'eraYear');
        addFormatToken('y', ['yyy', 3], 0, 'eraYear');
        addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

        addRegexToken('N', matchEraAbbr);
        addRegexToken('NN', matchEraAbbr);
        addRegexToken('NNN', matchEraAbbr);
        addRegexToken('NNNN', matchEraName);
        addRegexToken('NNNNN', matchEraNarrow);

        addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
            input,
            array,
            config,
            token
        ) {
            var era = config._locale.erasParse(input, token, config._strict);
            if (era) {
                getParsingFlags(config).era = era;
            } else {
                getParsingFlags(config).invalidEra = input;
            }
        });

        addRegexToken('y', matchUnsigned);
        addRegexToken('yy', matchUnsigned);
        addRegexToken('yyy', matchUnsigned);
        addRegexToken('yyyy', matchUnsigned);
        addRegexToken('yo', matchEraYearOrdinal);

        addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
        addParseToken(['yo'], function (input, array, config, token) {
            var match;
            if (config._locale._eraYearOrdinalRegex) {
                match = input.match(config._locale._eraYearOrdinalRegex);
            }

            if (config._locale.eraYearOrdinalParse) {
                array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
            } else {
                array[YEAR] = parseInt(input, 10);
            }
        });

        function localeEras(m, format) {
            var i,
                l,
                date,
                eras = this._eras || getLocale('en')._eras;
            for (i = 0, l = eras.length; i < l; ++i) {
                switch (typeof eras[i].since) {
                    case 'string':
                        // truncate time
                        date = hooks(eras[i].since).startOf('day');
                        eras[i].since = date.valueOf();
                        break;
                }

                switch (typeof eras[i].until) {
                    case 'undefined':
                        eras[i].until = +Infinity;
                        break;
                    case 'string':
                        // truncate time
                        date = hooks(eras[i].until).startOf('day').valueOf();
                        eras[i].until = date.valueOf();
                        break;
                }
            }
            return eras;
        }

        function localeErasParse(eraName, format, strict) {
            var i,
                l,
                eras = this.eras(),
                name,
                abbr,
                narrow;
            eraName = eraName.toUpperCase();

            for (i = 0, l = eras.length; i < l; ++i) {
                name = eras[i].name.toUpperCase();
                abbr = eras[i].abbr.toUpperCase();
                narrow = eras[i].narrow.toUpperCase();

                if (strict) {
                    switch (format) {
                        case 'N':
                        case 'NN':
                        case 'NNN':
                            if (abbr === eraName) {
                                return eras[i];
                            }
                            break;

                        case 'NNNN':
                            if (name === eraName) {
                                return eras[i];
                            }
                            break;

                        case 'NNNNN':
                            if (narrow === eraName) {
                                return eras[i];
                            }
                            break;
                    }
                } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                    return eras[i];
                }
            }
        }

        function localeErasConvertYear(era, year) {
            var dir = era.since <= era.until ? +1 : -1;
            if (year === undefined) {
                return hooks(era.since).year();
            } else {
                return hooks(era.since).year() + (year - era.offset) * dir;
            }
        }

        function getEraName() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].name;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].name;
                }
            }

            return '';
        }

        function getEraNarrow() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].narrow;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].narrow;
                }
            }

            return '';
        }

        function getEraAbbr() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].abbr;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].abbr;
                }
            }

            return '';
        }

        function getEraYear() {
            var i,
                l,
                dir,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                dir = eras[i].since <= eras[i].until ? +1 : -1;

                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (
                    (eras[i].since <= val && val <= eras[i].until) ||
                    (eras[i].until <= val && val <= eras[i].since)
                ) {
                    return (
                        (this.year() - hooks(eras[i].since).year()) * dir +
                        eras[i].offset
                    );
                }
            }

            return this.year();
        }

        function erasNameRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNameRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasNameRegex : this._erasRegex;
        }

        function erasAbbrRegex(isStrict) {
            if (!hasOwnProp(this, '_erasAbbrRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasAbbrRegex : this._erasRegex;
        }

        function erasNarrowRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNarrowRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasNarrowRegex : this._erasRegex;
        }

        function matchEraAbbr(isStrict, locale) {
            return locale.erasAbbrRegex(isStrict);
        }

        function matchEraName(isStrict, locale) {
            return locale.erasNameRegex(isStrict);
        }

        function matchEraNarrow(isStrict, locale) {
            return locale.erasNarrowRegex(isStrict);
        }

        function matchEraYearOrdinal(isStrict, locale) {
            return locale._eraYearOrdinalRegex || matchUnsigned;
        }

        function computeErasParse() {
            var abbrPieces = [],
                namePieces = [],
                narrowPieces = [],
                mixedPieces = [],
                i,
                l,
                eras = this.eras();

            for (i = 0, l = eras.length; i < l; ++i) {
                namePieces.push(regexEscape(eras[i].name));
                abbrPieces.push(regexEscape(eras[i].abbr));
                narrowPieces.push(regexEscape(eras[i].narrow));

                mixedPieces.push(regexEscape(eras[i].name));
                mixedPieces.push(regexEscape(eras[i].abbr));
                mixedPieces.push(regexEscape(eras[i].narrow));
            }

            this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
            this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
            this._erasNarrowRegex = new RegExp(
                '^(' + narrowPieces.join('|') + ')',
                'i'
            );
        }

        // FORMATTING

        addFormatToken(0, ['gg', 2], 0, function () {
            return this.weekYear() % 100;
        });

        addFormatToken(0, ['GG', 2], 0, function () {
            return this.isoWeekYear() % 100;
        });

        function addWeekYearFormatToken(token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
        }

        addWeekYearFormatToken('gggg', 'weekYear');
        addWeekYearFormatToken('ggggg', 'weekYear');
        addWeekYearFormatToken('GGGG', 'isoWeekYear');
        addWeekYearFormatToken('GGGGG', 'isoWeekYear');

        // ALIASES

        addUnitAlias('weekYear', 'gg');
        addUnitAlias('isoWeekYear', 'GG');

        // PRIORITY

        addUnitPriority('weekYear', 1);
        addUnitPriority('isoWeekYear', 1);

        // PARSING

        addRegexToken('G', matchSigned);
        addRegexToken('g', matchSigned);
        addRegexToken('GG', match1to2, match2);
        addRegexToken('gg', match1to2, match2);
        addRegexToken('GGGG', match1to4, match4);
        addRegexToken('gggg', match1to4, match4);
        addRegexToken('GGGGG', match1to6, match6);
        addRegexToken('ggggg', match1to6, match6);

        addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
            input,
            week,
            config,
            token
        ) {
            week[token.substr(0, 2)] = toInt(input);
        });

        addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
            week[token] = hooks.parseTwoDigitYear(input);
        });

        // MOMENTS

        function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(
                this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy
            );
        }

        function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(
                this,
                input,
                this.isoWeek(),
                this.isoWeekday(),
                1,
                4
            );
        }

        function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
        }

        function getISOWeeksInISOWeekYear() {
            return weeksInYear(this.isoWeekYear(), 1, 4);
        }

        function getWeeksInYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        }

        function getWeeksInWeekYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
        }

        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;
            if (input == null) {
                return weekOfYear(this, dow, doy).year;
            } else {
                weeksTarget = weeksInYear(input, dow, doy);
                if (week > weeksTarget) {
                    week = weeksTarget;
                }
                return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
        }

        function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
        }

        // FORMATTING

        addFormatToken('Q', 0, 'Qo', 'quarter');

        // ALIASES

        addUnitAlias('quarter', 'Q');

        // PRIORITY

        addUnitPriority('quarter', 7);

        // PARSING

        addRegexToken('Q', match1);
        addParseToken('Q', function (input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
        });

        // MOMENTS

        function getSetQuarter(input) {
            return input == null
                ? Math.ceil((this.month() + 1) / 3)
                : this.month((input - 1) * 3 + (this.month() % 3));
        }

        // FORMATTING

        addFormatToken('D', ['DD', 2], 'Do', 'date');

        // ALIASES

        addUnitAlias('date', 'D');

        // PRIORITY
        addUnitPriority('date', 9);

        // PARSING

        addRegexToken('D', match1to2);
        addRegexToken('DD', match1to2, match2);
        addRegexToken('Do', function (isStrict, locale) {
            // TODO: Remove "ordinalParse" fallback in next major release.
            return isStrict
                ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
                : locale._dayOfMonthOrdinalParseLenient;
        });

        addParseToken(['D', 'DD'], DATE);
        addParseToken('Do', function (input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
        });

        // MOMENTS

        var getSetDayOfMonth = makeGetSet('Date', true);

        // FORMATTING

        addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

        // ALIASES

        addUnitAlias('dayOfYear', 'DDD');

        // PRIORITY
        addUnitPriority('dayOfYear', 4);

        // PARSING

        addRegexToken('DDD', match1to3);
        addRegexToken('DDDD', match3);
        addParseToken(['DDD', 'DDDD'], function (input, array, config) {
            config._dayOfYear = toInt(input);
        });

        // HELPERS

        // MOMENTS

        function getSetDayOfYear(input) {
            var dayOfYear =
                Math.round(
                    (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
                ) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
        }

        // FORMATTING

        addFormatToken('m', ['mm', 2], 0, 'minute');

        // ALIASES

        addUnitAlias('minute', 'm');

        // PRIORITY

        addUnitPriority('minute', 14);

        // PARSING

        addRegexToken('m', match1to2);
        addRegexToken('mm', match1to2, match2);
        addParseToken(['m', 'mm'], MINUTE);

        // MOMENTS

        var getSetMinute = makeGetSet('Minutes', false);

        // FORMATTING

        addFormatToken('s', ['ss', 2], 0, 'second');

        // ALIASES

        addUnitAlias('second', 's');

        // PRIORITY

        addUnitPriority('second', 15);

        // PARSING

        addRegexToken('s', match1to2);
        addRegexToken('ss', match1to2, match2);
        addParseToken(['s', 'ss'], SECOND);

        // MOMENTS

        var getSetSecond = makeGetSet('Seconds', false);

        // FORMATTING

        addFormatToken('S', 0, 0, function () {
            return ~~(this.millisecond() / 100);
        });

        addFormatToken(0, ['SS', 2], 0, function () {
            return ~~(this.millisecond() / 10);
        });

        addFormatToken(0, ['SSS', 3], 0, 'millisecond');
        addFormatToken(0, ['SSSS', 4], 0, function () {
            return this.millisecond() * 10;
        });
        addFormatToken(0, ['SSSSS', 5], 0, function () {
            return this.millisecond() * 100;
        });
        addFormatToken(0, ['SSSSSS', 6], 0, function () {
            return this.millisecond() * 1000;
        });
        addFormatToken(0, ['SSSSSSS', 7], 0, function () {
            return this.millisecond() * 10000;
        });
        addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
            return this.millisecond() * 100000;
        });
        addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
            return this.millisecond() * 1000000;
        });

        // ALIASES

        addUnitAlias('millisecond', 'ms');

        // PRIORITY

        addUnitPriority('millisecond', 16);

        // PARSING

        addRegexToken('S', match1to3, match1);
        addRegexToken('SS', match1to3, match2);
        addRegexToken('SSS', match1to3, match3);

        var token, getSetMillisecond;
        for (token = 'SSSS'; token.length <= 9; token += 'S') {
            addRegexToken(token, matchUnsigned);
        }

        function parseMs(input, array) {
            array[MILLISECOND] = toInt(('0.' + input) * 1000);
        }

        for (token = 'S'; token.length <= 9; token += 'S') {
            addParseToken(token, parseMs);
        }

        getSetMillisecond = makeGetSet('Milliseconds', false);

        // FORMATTING

        addFormatToken('z', 0, 0, 'zoneAbbr');
        addFormatToken('zz', 0, 0, 'zoneName');

        // MOMENTS

        function getZoneAbbr() {
            return this._isUTC ? 'UTC' : '';
        }

        function getZoneName() {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        }

        var proto = Moment.prototype;

        proto.add = add;
        proto.calendar = calendar$1;
        proto.clone = clone;
        proto.diff = diff;
        proto.endOf = endOf;
        proto.format = format;
        proto.from = from;
        proto.fromNow = fromNow;
        proto.to = to;
        proto.toNow = toNow;
        proto.get = stringGet;
        proto.invalidAt = invalidAt;
        proto.isAfter = isAfter;
        proto.isBefore = isBefore;
        proto.isBetween = isBetween;
        proto.isSame = isSame;
        proto.isSameOrAfter = isSameOrAfter;
        proto.isSameOrBefore = isSameOrBefore;
        proto.isValid = isValid$2;
        proto.lang = lang;
        proto.locale = locale;
        proto.localeData = localeData;
        proto.max = prototypeMax;
        proto.min = prototypeMin;
        proto.parsingFlags = parsingFlags;
        proto.set = stringSet;
        proto.startOf = startOf;
        proto.subtract = subtract;
        proto.toArray = toArray;
        proto.toObject = toObject;
        proto.toDate = toDate;
        proto.toISOString = toISOString;
        proto.inspect = inspect;
        if (typeof Symbol !== 'undefined' && Symbol.for != null) {
            proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
                return 'Moment<' + this.format() + '>';
            };
        }
        proto.toJSON = toJSON;
        proto.toString = toString;
        proto.unix = unix;
        proto.valueOf = valueOf;
        proto.creationData = creationData;
        proto.eraName = getEraName;
        proto.eraNarrow = getEraNarrow;
        proto.eraAbbr = getEraAbbr;
        proto.eraYear = getEraYear;
        proto.year = getSetYear;
        proto.isLeapYear = getIsLeapYear;
        proto.weekYear = getSetWeekYear;
        proto.isoWeekYear = getSetISOWeekYear;
        proto.quarter = proto.quarters = getSetQuarter;
        proto.month = getSetMonth;
        proto.daysInMonth = getDaysInMonth;
        proto.week = proto.weeks = getSetWeek;
        proto.isoWeek = proto.isoWeeks = getSetISOWeek;
        proto.weeksInYear = getWeeksInYear;
        proto.weeksInWeekYear = getWeeksInWeekYear;
        proto.isoWeeksInYear = getISOWeeksInYear;
        proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
        proto.date = getSetDayOfMonth;
        proto.day = proto.days = getSetDayOfWeek;
        proto.weekday = getSetLocaleDayOfWeek;
        proto.isoWeekday = getSetISODayOfWeek;
        proto.dayOfYear = getSetDayOfYear;
        proto.hour = proto.hours = getSetHour;
        proto.minute = proto.minutes = getSetMinute;
        proto.second = proto.seconds = getSetSecond;
        proto.millisecond = proto.milliseconds = getSetMillisecond;
        proto.utcOffset = getSetOffset;
        proto.utc = setOffsetToUTC;
        proto.local = setOffsetToLocal;
        proto.parseZone = setOffsetToParsedOffset;
        proto.hasAlignedHourOffset = hasAlignedHourOffset;
        proto.isDST = isDaylightSavingTime;
        proto.isLocal = isLocal;
        proto.isUtcOffset = isUtcOffset;
        proto.isUtc = isUtc;
        proto.isUTC = isUtc;
        proto.zoneAbbr = getZoneAbbr;
        proto.zoneName = getZoneName;
        proto.dates = deprecate(
            'dates accessor is deprecated. Use date instead.',
            getSetDayOfMonth
        );
        proto.months = deprecate(
            'months accessor is deprecated. Use month instead',
            getSetMonth
        );
        proto.years = deprecate(
            'years accessor is deprecated. Use year instead',
            getSetYear
        );
        proto.zone = deprecate(
            'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
            getSetZone
        );
        proto.isDSTShifted = deprecate(
            'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
            isDaylightSavingTimeShifted
        );

        function createUnix(input) {
            return createLocal(input * 1000);
        }

        function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
        }

        function preParsePostFormat(string) {
            return string;
        }

        var proto$1 = Locale.prototype;

        proto$1.calendar = calendar;
        proto$1.longDateFormat = longDateFormat;
        proto$1.invalidDate = invalidDate;
        proto$1.ordinal = ordinal;
        proto$1.preparse = preParsePostFormat;
        proto$1.postformat = preParsePostFormat;
        proto$1.relativeTime = relativeTime;
        proto$1.pastFuture = pastFuture;
        proto$1.set = set;
        proto$1.eras = localeEras;
        proto$1.erasParse = localeErasParse;
        proto$1.erasConvertYear = localeErasConvertYear;
        proto$1.erasAbbrRegex = erasAbbrRegex;
        proto$1.erasNameRegex = erasNameRegex;
        proto$1.erasNarrowRegex = erasNarrowRegex;

        proto$1.months = localeMonths;
        proto$1.monthsShort = localeMonthsShort;
        proto$1.monthsParse = localeMonthsParse;
        proto$1.monthsRegex = monthsRegex;
        proto$1.monthsShortRegex = monthsShortRegex;
        proto$1.week = localeWeek;
        proto$1.firstDayOfYear = localeFirstDayOfYear;
        proto$1.firstDayOfWeek = localeFirstDayOfWeek;

        proto$1.weekdays = localeWeekdays;
        proto$1.weekdaysMin = localeWeekdaysMin;
        proto$1.weekdaysShort = localeWeekdaysShort;
        proto$1.weekdaysParse = localeWeekdaysParse;

        proto$1.weekdaysRegex = weekdaysRegex;
        proto$1.weekdaysShortRegex = weekdaysShortRegex;
        proto$1.weekdaysMinRegex = weekdaysMinRegex;

        proto$1.isPM = localeIsPM;
        proto$1.meridiem = localeMeridiem;

        function get$1(format, index, field, setter) {
            var locale = getLocale(),
                utc = createUTC().set(setter, index);
            return locale[field](utc, format);
        }

        function listMonthsImpl(format, index, field) {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';

            if (index != null) {
                return get$1(format, index, field, 'month');
            }

            var i,
                out = [];
            for (i = 0; i < 12; i++) {
                out[i] = get$1(format, i, field, 'month');
            }
            return out;
        }

        // ()
        // (5)
        // (fmt, 5)
        // (fmt)
        // (true)
        // (true, 5)
        // (true, fmt, 5)
        // (true, fmt)
        function listWeekdaysImpl(localeSorted, format, index, field) {
            if (typeof localeSorted === 'boolean') {
                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            } else {
                format = localeSorted;
                index = format;
                localeSorted = false;

                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            }

            var locale = getLocale(),
                shift = localeSorted ? locale._week.dow : 0,
                i,
                out = [];

            if (index != null) {
                return get$1(format, (index + shift) % 7, field, 'day');
            }

            for (i = 0; i < 7; i++) {
                out[i] = get$1(format, (i + shift) % 7, field, 'day');
            }
            return out;
        }

        function listMonths(format, index) {
            return listMonthsImpl(format, index, 'months');
        }

        function listMonthsShort(format, index) {
            return listMonthsImpl(format, index, 'monthsShort');
        }

        function listWeekdays(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
        }

        function listWeekdaysShort(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
        }

        function listWeekdaysMin(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
        }

        getSetGlobalLocale('en', {
            eras: [
                {
                    since: '0001-01-01',
                    until: +Infinity,
                    offset: 1,
                    name: 'Anno Domini',
                    narrow: 'AD',
                    abbr: 'AD',
                },
                {
                    since: '0000-12-31',
                    until: -Infinity,
                    offset: 1,
                    name: 'Before Christ',
                    narrow: 'BC',
                    abbr: 'BC',
                },
            ],
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function (number) {
                var b = number % 10,
                    output =
                        toInt((number % 100) / 10) === 1
                            ? 'th'
                            : b === 1
                            ? 'st'
                            : b === 2
                            ? 'nd'
                            : b === 3
                            ? 'rd'
                            : 'th';
                return number + output;
            },
        });

        // Side effect imports

        hooks.lang = deprecate(
            'moment.lang is deprecated. Use moment.locale instead.',
            getSetGlobalLocale
        );
        hooks.langData = deprecate(
            'moment.langData is deprecated. Use moment.localeData instead.',
            getLocale
        );

        var mathAbs = Math.abs;

        function abs() {
            var data = this._data;

            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);

            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);

            return this;
        }

        function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);

            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;

            return duration._bubble();
        }

        // supports only 2.0-style add(1, 's') or add(duration)
        function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
        }

        // supports only 2.0-style subtract(1, 's') or subtract(duration)
        function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
        }

        function absCeil(number) {
            if (number < 0) {
                return Math.floor(number);
            } else {
                return Math.ceil(number);
            }
        }

        function bubble() {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds,
                minutes,
                hours,
                years,
                monthsFromDays;

            // if we have a mix of positive and negative values, bubble down first
            // check: https://github.com/moment/moment/issues/2166
            if (
                !(
                    (milliseconds >= 0 && days >= 0 && months >= 0) ||
                    (milliseconds <= 0 && days <= 0 && months <= 0)
                )
            ) {
                milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                days = 0;
                months = 0;
            }

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absFloor(seconds / 60);
            data.minutes = minutes % 60;

            hours = absFloor(minutes / 60);
            data.hours = hours % 24;

            days += absFloor(hours / 24);

            // convert days to months
            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays));

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;

            return this;
        }

        function daysToMonths(days) {
            // 400 years have 146097 days (taking into account leap year rules)
            // 400 years have 12 months === 4800
            return (days * 4800) / 146097;
        }

        function monthsToDays(months) {
            // the reverse of daysToMonths
            return (months * 146097) / 4800;
        }

        function as(units) {
            if (!this.isValid()) {
                return NaN;
            }
            var days,
                months,
                milliseconds = this._milliseconds;

            units = normalizeUnits(units);

            if (units === 'month' || units === 'quarter' || units === 'year') {
                days = this._days + milliseconds / 864e5;
                months = this._months + daysToMonths(days);
                switch (units) {
                    case 'month':
                        return months;
                    case 'quarter':
                        return months / 3;
                    case 'year':
                        return months / 12;
                }
            } else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + Math.round(monthsToDays(this._months));
                switch (units) {
                    case 'week':
                        return days / 7 + milliseconds / 6048e5;
                    case 'day':
                        return days + milliseconds / 864e5;
                    case 'hour':
                        return days * 24 + milliseconds / 36e5;
                    case 'minute':
                        return days * 1440 + milliseconds / 6e4;
                    case 'second':
                        return days * 86400 + milliseconds / 1000;
                    // Math.floor prevents floating point math errors here
                    case 'millisecond':
                        return Math.floor(days * 864e5) + milliseconds;
                    default:
                        throw new Error('Unknown unit ' + units);
                }
            }
        }

        // TODO: Use this.as('ms')?
        function valueOf$1() {
            if (!this.isValid()) {
                return NaN;
            }
            return (
                this._milliseconds +
                this._days * 864e5 +
                (this._months % 12) * 2592e6 +
                toInt(this._months / 12) * 31536e6
            );
        }

        function makeAs(alias) {
            return function () {
                return this.as(alias);
            };
        }

        var asMilliseconds = makeAs('ms'),
            asSeconds = makeAs('s'),
            asMinutes = makeAs('m'),
            asHours = makeAs('h'),
            asDays = makeAs('d'),
            asWeeks = makeAs('w'),
            asMonths = makeAs('M'),
            asQuarters = makeAs('Q'),
            asYears = makeAs('y');

        function clone$1() {
            return createDuration(this);
        }

        function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + 's']() : NaN;
        }

        function makeGetter(name) {
            return function () {
                return this.isValid() ? this._data[name] : NaN;
            };
        }

        var milliseconds = makeGetter('milliseconds'),
            seconds = makeGetter('seconds'),
            minutes = makeGetter('minutes'),
            hours = makeGetter('hours'),
            days = makeGetter('days'),
            months = makeGetter('months'),
            years = makeGetter('years');

        function weeks() {
            return absFloor(this.days() / 7);
        }

        var round = Math.round,
            thresholds = {
                ss: 44, // a few seconds to seconds
                s: 45, // seconds to minute
                m: 45, // minutes to hour
                h: 22, // hours to day
                d: 26, // days to month/week
                w: null, // weeks to month
                M: 11, // months to year
            };

        // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
        function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }

        function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
            var duration = createDuration(posNegDuration).abs(),
                seconds = round(duration.as('s')),
                minutes = round(duration.as('m')),
                hours = round(duration.as('h')),
                days = round(duration.as('d')),
                months = round(duration.as('M')),
                weeks = round(duration.as('w')),
                years = round(duration.as('y')),
                a =
                    (seconds <= thresholds.ss && ['s', seconds]) ||
                    (seconds < thresholds.s && ['ss', seconds]) ||
                    (minutes <= 1 && ['m']) ||
                    (minutes < thresholds.m && ['mm', minutes]) ||
                    (hours <= 1 && ['h']) ||
                    (hours < thresholds.h && ['hh', hours]) ||
                    (days <= 1 && ['d']) ||
                    (days < thresholds.d && ['dd', days]);

            if (thresholds.w != null) {
                a =
                    a ||
                    (weeks <= 1 && ['w']) ||
                    (weeks < thresholds.w && ['ww', weeks]);
            }
            a = a ||
                (months <= 1 && ['M']) ||
                (months < thresholds.M && ['MM', months]) ||
                (years <= 1 && ['y']) || ['yy', years];

            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
        }

        // This function allows you to set the rounding function for relative time strings
        function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === undefined) {
                return round;
            }
            if (typeof roundingFunction === 'function') {
                round = roundingFunction;
                return true;
            }
            return false;
        }

        // This function allows you to set a threshold for relative time strings
        function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === undefined) {
                return false;
            }
            if (limit === undefined) {
                return thresholds[threshold];
            }
            thresholds[threshold] = limit;
            if (threshold === 's') {
                thresholds.ss = limit - 1;
            }
            return true;
        }

        function humanize(argWithSuffix, argThresholds) {
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var withSuffix = false,
                th = thresholds,
                locale,
                output;

            if (typeof argWithSuffix === 'object') {
                argThresholds = argWithSuffix;
                argWithSuffix = false;
            }
            if (typeof argWithSuffix === 'boolean') {
                withSuffix = argWithSuffix;
            }
            if (typeof argThresholds === 'object') {
                th = Object.assign({}, thresholds, argThresholds);
                if (argThresholds.s != null && argThresholds.ss == null) {
                    th.ss = argThresholds.s - 1;
                }
            }

            locale = this.localeData();
            output = relativeTime$1(this, !withSuffix, th, locale);

            if (withSuffix) {
                output = locale.pastFuture(+this, output);
            }

            return locale.postformat(output);
        }

        var abs$1 = Math.abs;

        function sign(x) {
            return (x > 0) - (x < 0) || +x;
        }

        function toISOString$1() {
            // for ISO strings we do not use the normal bubbling rules:
            //  * milliseconds bubble up until they become hours
            //  * days do not bubble at all
            //  * months bubble up until they become years
            // This is because there is no context-free conversion between hours and days
            // (think of clock changes)
            // and also not between days and months (28-31 days per month)
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var seconds = abs$1(this._milliseconds) / 1000,
                days = abs$1(this._days),
                months = abs$1(this._months),
                minutes,
                hours,
                years,
                s,
                total = this.asSeconds(),
                totalSign,
                ymSign,
                daysSign,
                hmsSign;

            if (!total) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            // 3600 seconds -> 60 minutes -> 1 hour
            minutes = absFloor(seconds / 60);
            hours = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60;

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

            totalSign = total < 0 ? '-' : '';
            ymSign = sign(this._months) !== sign(total) ? '-' : '';
            daysSign = sign(this._days) !== sign(total) ? '-' : '';
            hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

            return (
                totalSign +
                'P' +
                (years ? ymSign + years + 'Y' : '') +
                (months ? ymSign + months + 'M' : '') +
                (days ? daysSign + days + 'D' : '') +
                (hours || minutes || seconds ? 'T' : '') +
                (hours ? hmsSign + hours + 'H' : '') +
                (minutes ? hmsSign + minutes + 'M' : '') +
                (seconds ? hmsSign + s + 'S' : '')
            );
        }

        var proto$2 = Duration.prototype;

        proto$2.isValid = isValid$1;
        proto$2.abs = abs;
        proto$2.add = add$1;
        proto$2.subtract = subtract$1;
        proto$2.as = as;
        proto$2.asMilliseconds = asMilliseconds;
        proto$2.asSeconds = asSeconds;
        proto$2.asMinutes = asMinutes;
        proto$2.asHours = asHours;
        proto$2.asDays = asDays;
        proto$2.asWeeks = asWeeks;
        proto$2.asMonths = asMonths;
        proto$2.asQuarters = asQuarters;
        proto$2.asYears = asYears;
        proto$2.valueOf = valueOf$1;
        proto$2._bubble = bubble;
        proto$2.clone = clone$1;
        proto$2.get = get$2;
        proto$2.milliseconds = milliseconds;
        proto$2.seconds = seconds;
        proto$2.minutes = minutes;
        proto$2.hours = hours;
        proto$2.days = days;
        proto$2.weeks = weeks;
        proto$2.months = months;
        proto$2.years = years;
        proto$2.humanize = humanize;
        proto$2.toISOString = toISOString$1;
        proto$2.toString = toISOString$1;
        proto$2.toJSON = toISOString$1;
        proto$2.locale = locale;
        proto$2.localeData = localeData;

        proto$2.toIsoString = deprecate(
            'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
            toISOString$1
        );
        proto$2.lang = lang;

        // FORMATTING

        addFormatToken('X', 0, 0, 'unix');
        addFormatToken('x', 0, 0, 'valueOf');

        // PARSING

        addRegexToken('x', matchSigned);
        addRegexToken('X', matchTimestamp);
        addParseToken('X', function (input, array, config) {
            config._d = new Date(parseFloat(input) * 1000);
        });
        addParseToken('x', function (input, array, config) {
            config._d = new Date(toInt(input));
        });

        //! moment.js

        hooks.version = '2.29.0';

        setHookCallback(createLocal);

        hooks.fn = proto;
        hooks.min = min;
        hooks.max = max;
        hooks.now = now;
        hooks.utc = createUTC;
        hooks.unix = createUnix;
        hooks.months = listMonths;
        hooks.isDate = isDate;
        hooks.locale = getSetGlobalLocale;
        hooks.invalid = createInvalid;
        hooks.duration = createDuration;
        hooks.isMoment = isMoment;
        hooks.weekdays = listWeekdays;
        hooks.parseZone = createInZone;
        hooks.localeData = getLocale;
        hooks.isDuration = isDuration;
        hooks.monthsShort = listMonthsShort;
        hooks.weekdaysMin = listWeekdaysMin;
        hooks.defineLocale = defineLocale;
        hooks.updateLocale = updateLocale;
        hooks.locales = listLocales;
        hooks.weekdaysShort = listWeekdaysShort;
        hooks.normalizeUnits = normalizeUnits;
        hooks.relativeTimeRounding = getSetRelativeTimeRounding;
        hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
        hooks.calendarFormat = getCalendarFormat;
        hooks.prototype = proto;

        // currently HTML5 input type only supports 24-hour formats
        hooks.HTML5_FMT = {
            DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
            DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
            DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
            DATE: 'YYYY-MM-DD', // <input type="date" />
            TIME: 'HH:mm', // <input type="time" />
            TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
            TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
            WEEK: 'GGGG-[W]WW', // <input type="week" />
            MONTH: 'YYYY-MM', // <input type="month" />
        };

        return hooks;

    })));
    });

    var Chart = createCommonjsModule(function (module, exports) {
    /*!
     * Chart.js v2.9.3
     * https://www.chartjs.org
     * (c) 2019 Chart.js Contributors
     * Released under the MIT License
     */
    (function (global, factory) {
     module.exports = factory(function() { try { return moment; } catch(e) { } }()) ;
    }(commonjsGlobal, (function (moment) {
    moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    function getCjsExportFromNamespace (n) {
    	return n && n['default'] || n;
    }

    var colorName = {
    	"aliceblue": [240, 248, 255],
    	"antiquewhite": [250, 235, 215],
    	"aqua": [0, 255, 255],
    	"aquamarine": [127, 255, 212],
    	"azure": [240, 255, 255],
    	"beige": [245, 245, 220],
    	"bisque": [255, 228, 196],
    	"black": [0, 0, 0],
    	"blanchedalmond": [255, 235, 205],
    	"blue": [0, 0, 255],
    	"blueviolet": [138, 43, 226],
    	"brown": [165, 42, 42],
    	"burlywood": [222, 184, 135],
    	"cadetblue": [95, 158, 160],
    	"chartreuse": [127, 255, 0],
    	"chocolate": [210, 105, 30],
    	"coral": [255, 127, 80],
    	"cornflowerblue": [100, 149, 237],
    	"cornsilk": [255, 248, 220],
    	"crimson": [220, 20, 60],
    	"cyan": [0, 255, 255],
    	"darkblue": [0, 0, 139],
    	"darkcyan": [0, 139, 139],
    	"darkgoldenrod": [184, 134, 11],
    	"darkgray": [169, 169, 169],
    	"darkgreen": [0, 100, 0],
    	"darkgrey": [169, 169, 169],
    	"darkkhaki": [189, 183, 107],
    	"darkmagenta": [139, 0, 139],
    	"darkolivegreen": [85, 107, 47],
    	"darkorange": [255, 140, 0],
    	"darkorchid": [153, 50, 204],
    	"darkred": [139, 0, 0],
    	"darksalmon": [233, 150, 122],
    	"darkseagreen": [143, 188, 143],
    	"darkslateblue": [72, 61, 139],
    	"darkslategray": [47, 79, 79],
    	"darkslategrey": [47, 79, 79],
    	"darkturquoise": [0, 206, 209],
    	"darkviolet": [148, 0, 211],
    	"deeppink": [255, 20, 147],
    	"deepskyblue": [0, 191, 255],
    	"dimgray": [105, 105, 105],
    	"dimgrey": [105, 105, 105],
    	"dodgerblue": [30, 144, 255],
    	"firebrick": [178, 34, 34],
    	"floralwhite": [255, 250, 240],
    	"forestgreen": [34, 139, 34],
    	"fuchsia": [255, 0, 255],
    	"gainsboro": [220, 220, 220],
    	"ghostwhite": [248, 248, 255],
    	"gold": [255, 215, 0],
    	"goldenrod": [218, 165, 32],
    	"gray": [128, 128, 128],
    	"green": [0, 128, 0],
    	"greenyellow": [173, 255, 47],
    	"grey": [128, 128, 128],
    	"honeydew": [240, 255, 240],
    	"hotpink": [255, 105, 180],
    	"indianred": [205, 92, 92],
    	"indigo": [75, 0, 130],
    	"ivory": [255, 255, 240],
    	"khaki": [240, 230, 140],
    	"lavender": [230, 230, 250],
    	"lavenderblush": [255, 240, 245],
    	"lawngreen": [124, 252, 0],
    	"lemonchiffon": [255, 250, 205],
    	"lightblue": [173, 216, 230],
    	"lightcoral": [240, 128, 128],
    	"lightcyan": [224, 255, 255],
    	"lightgoldenrodyellow": [250, 250, 210],
    	"lightgray": [211, 211, 211],
    	"lightgreen": [144, 238, 144],
    	"lightgrey": [211, 211, 211],
    	"lightpink": [255, 182, 193],
    	"lightsalmon": [255, 160, 122],
    	"lightseagreen": [32, 178, 170],
    	"lightskyblue": [135, 206, 250],
    	"lightslategray": [119, 136, 153],
    	"lightslategrey": [119, 136, 153],
    	"lightsteelblue": [176, 196, 222],
    	"lightyellow": [255, 255, 224],
    	"lime": [0, 255, 0],
    	"limegreen": [50, 205, 50],
    	"linen": [250, 240, 230],
    	"magenta": [255, 0, 255],
    	"maroon": [128, 0, 0],
    	"mediumaquamarine": [102, 205, 170],
    	"mediumblue": [0, 0, 205],
    	"mediumorchid": [186, 85, 211],
    	"mediumpurple": [147, 112, 219],
    	"mediumseagreen": [60, 179, 113],
    	"mediumslateblue": [123, 104, 238],
    	"mediumspringgreen": [0, 250, 154],
    	"mediumturquoise": [72, 209, 204],
    	"mediumvioletred": [199, 21, 133],
    	"midnightblue": [25, 25, 112],
    	"mintcream": [245, 255, 250],
    	"mistyrose": [255, 228, 225],
    	"moccasin": [255, 228, 181],
    	"navajowhite": [255, 222, 173],
    	"navy": [0, 0, 128],
    	"oldlace": [253, 245, 230],
    	"olive": [128, 128, 0],
    	"olivedrab": [107, 142, 35],
    	"orange": [255, 165, 0],
    	"orangered": [255, 69, 0],
    	"orchid": [218, 112, 214],
    	"palegoldenrod": [238, 232, 170],
    	"palegreen": [152, 251, 152],
    	"paleturquoise": [175, 238, 238],
    	"palevioletred": [219, 112, 147],
    	"papayawhip": [255, 239, 213],
    	"peachpuff": [255, 218, 185],
    	"peru": [205, 133, 63],
    	"pink": [255, 192, 203],
    	"plum": [221, 160, 221],
    	"powderblue": [176, 224, 230],
    	"purple": [128, 0, 128],
    	"rebeccapurple": [102, 51, 153],
    	"red": [255, 0, 0],
    	"rosybrown": [188, 143, 143],
    	"royalblue": [65, 105, 225],
    	"saddlebrown": [139, 69, 19],
    	"salmon": [250, 128, 114],
    	"sandybrown": [244, 164, 96],
    	"seagreen": [46, 139, 87],
    	"seashell": [255, 245, 238],
    	"sienna": [160, 82, 45],
    	"silver": [192, 192, 192],
    	"skyblue": [135, 206, 235],
    	"slateblue": [106, 90, 205],
    	"slategray": [112, 128, 144],
    	"slategrey": [112, 128, 144],
    	"snow": [255, 250, 250],
    	"springgreen": [0, 255, 127],
    	"steelblue": [70, 130, 180],
    	"tan": [210, 180, 140],
    	"teal": [0, 128, 128],
    	"thistle": [216, 191, 216],
    	"tomato": [255, 99, 71],
    	"turquoise": [64, 224, 208],
    	"violet": [238, 130, 238],
    	"wheat": [245, 222, 179],
    	"white": [255, 255, 255],
    	"whitesmoke": [245, 245, 245],
    	"yellow": [255, 255, 0],
    	"yellowgreen": [154, 205, 50]
    };

    var conversions = createCommonjsModule(function (module) {
    /* MIT license */


    // NOTE: conversions should only return primitive values (i.e. arrays, or
    //       values that give correct `typeof` results).
    //       do not use box values types (i.e. Number(), String(), etc.)

    var reverseKeywords = {};
    for (var key in colorName) {
    	if (colorName.hasOwnProperty(key)) {
    		reverseKeywords[colorName[key]] = key;
    	}
    }

    var convert = module.exports = {
    	rgb: {channels: 3, labels: 'rgb'},
    	hsl: {channels: 3, labels: 'hsl'},
    	hsv: {channels: 3, labels: 'hsv'},
    	hwb: {channels: 3, labels: 'hwb'},
    	cmyk: {channels: 4, labels: 'cmyk'},
    	xyz: {channels: 3, labels: 'xyz'},
    	lab: {channels: 3, labels: 'lab'},
    	lch: {channels: 3, labels: 'lch'},
    	hex: {channels: 1, labels: ['hex']},
    	keyword: {channels: 1, labels: ['keyword']},
    	ansi16: {channels: 1, labels: ['ansi16']},
    	ansi256: {channels: 1, labels: ['ansi256']},
    	hcg: {channels: 3, labels: ['h', 'c', 'g']},
    	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
    	gray: {channels: 1, labels: ['gray']}
    };

    // hide .channels and .labels properties
    for (var model in convert) {
    	if (convert.hasOwnProperty(model)) {
    		if (!('channels' in convert[model])) {
    			throw new Error('missing channels property: ' + model);
    		}

    		if (!('labels' in convert[model])) {
    			throw new Error('missing channel labels property: ' + model);
    		}

    		if (convert[model].labels.length !== convert[model].channels) {
    			throw new Error('channel and label counts mismatch: ' + model);
    		}

    		var channels = convert[model].channels;
    		var labels = convert[model].labels;
    		delete convert[model].channels;
    		delete convert[model].labels;
    		Object.defineProperty(convert[model], 'channels', {value: channels});
    		Object.defineProperty(convert[model], 'labels', {value: labels});
    	}
    }

    convert.rgb.hsl = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var min = Math.min(r, g, b);
    	var max = Math.max(r, g, b);
    	var delta = max - min;
    	var h;
    	var s;
    	var l;

    	if (max === min) {
    		h = 0;
    	} else if (r === max) {
    		h = (g - b) / delta;
    	} else if (g === max) {
    		h = 2 + (b - r) / delta;
    	} else if (b === max) {
    		h = 4 + (r - g) / delta;
    	}

    	h = Math.min(h * 60, 360);

    	if (h < 0) {
    		h += 360;
    	}

    	l = (min + max) / 2;

    	if (max === min) {
    		s = 0;
    	} else if (l <= 0.5) {
    		s = delta / (max + min);
    	} else {
    		s = delta / (2 - max - min);
    	}

    	return [h, s * 100, l * 100];
    };

    convert.rgb.hsv = function (rgb) {
    	var rdif;
    	var gdif;
    	var bdif;
    	var h;
    	var s;

    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var v = Math.max(r, g, b);
    	var diff = v - Math.min(r, g, b);
    	var diffc = function (c) {
    		return (v - c) / 6 / diff + 1 / 2;
    	};

    	if (diff === 0) {
    		h = s = 0;
    	} else {
    		s = diff / v;
    		rdif = diffc(r);
    		gdif = diffc(g);
    		bdif = diffc(b);

    		if (r === v) {
    			h = bdif - gdif;
    		} else if (g === v) {
    			h = (1 / 3) + rdif - bdif;
    		} else if (b === v) {
    			h = (2 / 3) + gdif - rdif;
    		}
    		if (h < 0) {
    			h += 1;
    		} else if (h > 1) {
    			h -= 1;
    		}
    	}

    	return [
    		h * 360,
    		s * 100,
    		v * 100
    	];
    };

    convert.rgb.hwb = function (rgb) {
    	var r = rgb[0];
    	var g = rgb[1];
    	var b = rgb[2];
    	var h = convert.rgb.hsl(rgb)[0];
    	var w = 1 / 255 * Math.min(r, Math.min(g, b));

    	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

    	return [h, w * 100, b * 100];
    };

    convert.rgb.cmyk = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var c;
    	var m;
    	var y;
    	var k;

    	k = Math.min(1 - r, 1 - g, 1 - b);
    	c = (1 - r - k) / (1 - k) || 0;
    	m = (1 - g - k) / (1 - k) || 0;
    	y = (1 - b - k) / (1 - k) || 0;

    	return [c * 100, m * 100, y * 100, k * 100];
    };

    /**
     * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
     * */
    function comparativeDistance(x, y) {
    	return (
    		Math.pow(x[0] - y[0], 2) +
    		Math.pow(x[1] - y[1], 2) +
    		Math.pow(x[2] - y[2], 2)
    	);
    }

    convert.rgb.keyword = function (rgb) {
    	var reversed = reverseKeywords[rgb];
    	if (reversed) {
    		return reversed;
    	}

    	var currentClosestDistance = Infinity;
    	var currentClosestKeyword;

    	for (var keyword in colorName) {
    		if (colorName.hasOwnProperty(keyword)) {
    			var value = colorName[keyword];

    			// Compute comparative distance
    			var distance = comparativeDistance(rgb, value);

    			// Check if its less, if so set as closest
    			if (distance < currentClosestDistance) {
    				currentClosestDistance = distance;
    				currentClosestKeyword = keyword;
    			}
    		}
    	}

    	return currentClosestKeyword;
    };

    convert.keyword.rgb = function (keyword) {
    	return colorName[keyword];
    };

    convert.rgb.xyz = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;

    	// assume sRGB
    	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
    	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
    	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

    	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
    	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
    	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

    	return [x * 100, y * 100, z * 100];
    };

    convert.rgb.lab = function (rgb) {
    	var xyz = convert.rgb.xyz(rgb);
    	var x = xyz[0];
    	var y = xyz[1];
    	var z = xyz[2];
    	var l;
    	var a;
    	var b;

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

    	l = (116 * y) - 16;
    	a = 500 * (x - y);
    	b = 200 * (y - z);

    	return [l, a, b];
    };

    convert.hsl.rgb = function (hsl) {
    	var h = hsl[0] / 360;
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var t1;
    	var t2;
    	var t3;
    	var rgb;
    	var val;

    	if (s === 0) {
    		val = l * 255;
    		return [val, val, val];
    	}

    	if (l < 0.5) {
    		t2 = l * (1 + s);
    	} else {
    		t2 = l + s - l * s;
    	}

    	t1 = 2 * l - t2;

    	rgb = [0, 0, 0];
    	for (var i = 0; i < 3; i++) {
    		t3 = h + 1 / 3 * -(i - 1);
    		if (t3 < 0) {
    			t3++;
    		}
    		if (t3 > 1) {
    			t3--;
    		}

    		if (6 * t3 < 1) {
    			val = t1 + (t2 - t1) * 6 * t3;
    		} else if (2 * t3 < 1) {
    			val = t2;
    		} else if (3 * t3 < 2) {
    			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    		} else {
    			val = t1;
    		}

    		rgb[i] = val * 255;
    	}

    	return rgb;
    };

    convert.hsl.hsv = function (hsl) {
    	var h = hsl[0];
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var smin = s;
    	var lmin = Math.max(l, 0.01);
    	var sv;
    	var v;

    	l *= 2;
    	s *= (l <= 1) ? l : 2 - l;
    	smin *= lmin <= 1 ? lmin : 2 - lmin;
    	v = (l + s) / 2;
    	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

    	return [h, sv * 100, v * 100];
    };

    convert.hsv.rgb = function (hsv) {
    	var h = hsv[0] / 60;
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;
    	var hi = Math.floor(h) % 6;

    	var f = h - Math.floor(h);
    	var p = 255 * v * (1 - s);
    	var q = 255 * v * (1 - (s * f));
    	var t = 255 * v * (1 - (s * (1 - f)));
    	v *= 255;

    	switch (hi) {
    		case 0:
    			return [v, t, p];
    		case 1:
    			return [q, v, p];
    		case 2:
    			return [p, v, t];
    		case 3:
    			return [p, q, v];
    		case 4:
    			return [t, p, v];
    		case 5:
    			return [v, p, q];
    	}
    };

    convert.hsv.hsl = function (hsv) {
    	var h = hsv[0];
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;
    	var vmin = Math.max(v, 0.01);
    	var lmin;
    	var sl;
    	var l;

    	l = (2 - s) * v;
    	lmin = (2 - s) * vmin;
    	sl = s * vmin;
    	sl /= (lmin <= 1) ? lmin : 2 - lmin;
    	sl = sl || 0;
    	l /= 2;

    	return [h, sl * 100, l * 100];
    };

    // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
    convert.hwb.rgb = function (hwb) {
    	var h = hwb[0] / 360;
    	var wh = hwb[1] / 100;
    	var bl = hwb[2] / 100;
    	var ratio = wh + bl;
    	var i;
    	var v;
    	var f;
    	var n;

    	// wh + bl cant be > 1
    	if (ratio > 1) {
    		wh /= ratio;
    		bl /= ratio;
    	}

    	i = Math.floor(6 * h);
    	v = 1 - bl;
    	f = 6 * h - i;

    	if ((i & 0x01) !== 0) {
    		f = 1 - f;
    	}

    	n = wh + f * (v - wh); // linear interpolation

    	var r;
    	var g;
    	var b;
    	switch (i) {
    		default:
    		case 6:
    		case 0: r = v; g = n; b = wh; break;
    		case 1: r = n; g = v; b = wh; break;
    		case 2: r = wh; g = v; b = n; break;
    		case 3: r = wh; g = n; b = v; break;
    		case 4: r = n; g = wh; b = v; break;
    		case 5: r = v; g = wh; b = n; break;
    	}

    	return [r * 255, g * 255, b * 255];
    };

    convert.cmyk.rgb = function (cmyk) {
    	var c = cmyk[0] / 100;
    	var m = cmyk[1] / 100;
    	var y = cmyk[2] / 100;
    	var k = cmyk[3] / 100;
    	var r;
    	var g;
    	var b;

    	r = 1 - Math.min(1, c * (1 - k) + k);
    	g = 1 - Math.min(1, m * (1 - k) + k);
    	b = 1 - Math.min(1, y * (1 - k) + k);

    	return [r * 255, g * 255, b * 255];
    };

    convert.xyz.rgb = function (xyz) {
    	var x = xyz[0] / 100;
    	var y = xyz[1] / 100;
    	var z = xyz[2] / 100;
    	var r;
    	var g;
    	var b;

    	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
    	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
    	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

    	// assume sRGB
    	r = r > 0.0031308
    		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
    		: r * 12.92;

    	g = g > 0.0031308
    		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
    		: g * 12.92;

    	b = b > 0.0031308
    		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
    		: b * 12.92;

    	r = Math.min(Math.max(0, r), 1);
    	g = Math.min(Math.max(0, g), 1);
    	b = Math.min(Math.max(0, b), 1);

    	return [r * 255, g * 255, b * 255];
    };

    convert.xyz.lab = function (xyz) {
    	var x = xyz[0];
    	var y = xyz[1];
    	var z = xyz[2];
    	var l;
    	var a;
    	var b;

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

    	l = (116 * y) - 16;
    	a = 500 * (x - y);
    	b = 200 * (y - z);

    	return [l, a, b];
    };

    convert.lab.xyz = function (lab) {
    	var l = lab[0];
    	var a = lab[1];
    	var b = lab[2];
    	var x;
    	var y;
    	var z;

    	y = (l + 16) / 116;
    	x = a / 500 + y;
    	z = y - b / 200;

    	var y2 = Math.pow(y, 3);
    	var x2 = Math.pow(x, 3);
    	var z2 = Math.pow(z, 3);
    	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
    	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
    	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

    	x *= 95.047;
    	y *= 100;
    	z *= 108.883;

    	return [x, y, z];
    };

    convert.lab.lch = function (lab) {
    	var l = lab[0];
    	var a = lab[1];
    	var b = lab[2];
    	var hr;
    	var h;
    	var c;

    	hr = Math.atan2(b, a);
    	h = hr * 360 / 2 / Math.PI;

    	if (h < 0) {
    		h += 360;
    	}

    	c = Math.sqrt(a * a + b * b);

    	return [l, c, h];
    };

    convert.lch.lab = function (lch) {
    	var l = lch[0];
    	var c = lch[1];
    	var h = lch[2];
    	var a;
    	var b;
    	var hr;

    	hr = h / 360 * 2 * Math.PI;
    	a = c * Math.cos(hr);
    	b = c * Math.sin(hr);

    	return [l, a, b];
    };

    convert.rgb.ansi16 = function (args) {
    	var r = args[0];
    	var g = args[1];
    	var b = args[2];
    	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

    	value = Math.round(value / 50);

    	if (value === 0) {
    		return 30;
    	}

    	var ansi = 30
    		+ ((Math.round(b / 255) << 2)
    		| (Math.round(g / 255) << 1)
    		| Math.round(r / 255));

    	if (value === 2) {
    		ansi += 60;
    	}

    	return ansi;
    };

    convert.hsv.ansi16 = function (args) {
    	// optimization here; we already know the value and don't need to get
    	// it converted for us.
    	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };

    convert.rgb.ansi256 = function (args) {
    	var r = args[0];
    	var g = args[1];
    	var b = args[2];

    	// we use the extended greyscale palette here, with the exception of
    	// black and white. normal palette only has 4 greyscale shades.
    	if (r === g && g === b) {
    		if (r < 8) {
    			return 16;
    		}

    		if (r > 248) {
    			return 231;
    		}

    		return Math.round(((r - 8) / 247) * 24) + 232;
    	}

    	var ansi = 16
    		+ (36 * Math.round(r / 255 * 5))
    		+ (6 * Math.round(g / 255 * 5))
    		+ Math.round(b / 255 * 5);

    	return ansi;
    };

    convert.ansi16.rgb = function (args) {
    	var color = args % 10;

    	// handle greyscale
    	if (color === 0 || color === 7) {
    		if (args > 50) {
    			color += 3.5;
    		}

    		color = color / 10.5 * 255;

    		return [color, color, color];
    	}

    	var mult = (~~(args > 50) + 1) * 0.5;
    	var r = ((color & 1) * mult) * 255;
    	var g = (((color >> 1) & 1) * mult) * 255;
    	var b = (((color >> 2) & 1) * mult) * 255;

    	return [r, g, b];
    };

    convert.ansi256.rgb = function (args) {
    	// handle greyscale
    	if (args >= 232) {
    		var c = (args - 232) * 10 + 8;
    		return [c, c, c];
    	}

    	args -= 16;

    	var rem;
    	var r = Math.floor(args / 36) / 5 * 255;
    	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    	var b = (rem % 6) / 5 * 255;

    	return [r, g, b];
    };

    convert.rgb.hex = function (args) {
    	var integer = ((Math.round(args[0]) & 0xFF) << 16)
    		+ ((Math.round(args[1]) & 0xFF) << 8)
    		+ (Math.round(args[2]) & 0xFF);

    	var string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert.hex.rgb = function (args) {
    	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    	if (!match) {
    		return [0, 0, 0];
    	}

    	var colorString = match[0];

    	if (match[0].length === 3) {
    		colorString = colorString.split('').map(function (char) {
    			return char + char;
    		}).join('');
    	}

    	var integer = parseInt(colorString, 16);
    	var r = (integer >> 16) & 0xFF;
    	var g = (integer >> 8) & 0xFF;
    	var b = integer & 0xFF;

    	return [r, g, b];
    };

    convert.rgb.hcg = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var max = Math.max(Math.max(r, g), b);
    	var min = Math.min(Math.min(r, g), b);
    	var chroma = (max - min);
    	var grayscale;
    	var hue;

    	if (chroma < 1) {
    		grayscale = min / (1 - chroma);
    	} else {
    		grayscale = 0;
    	}

    	if (chroma <= 0) {
    		hue = 0;
    	} else
    	if (max === r) {
    		hue = ((g - b) / chroma) % 6;
    	} else
    	if (max === g) {
    		hue = 2 + (b - r) / chroma;
    	} else {
    		hue = 4 + (r - g) / chroma + 4;
    	}

    	hue /= 6;
    	hue %= 1;

    	return [hue * 360, chroma * 100, grayscale * 100];
    };

    convert.hsl.hcg = function (hsl) {
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var c = 1;
    	var f = 0;

    	if (l < 0.5) {
    		c = 2.0 * s * l;
    	} else {
    		c = 2.0 * s * (1.0 - l);
    	}

    	if (c < 1.0) {
    		f = (l - 0.5 * c) / (1.0 - c);
    	}

    	return [hsl[0], c * 100, f * 100];
    };

    convert.hsv.hcg = function (hsv) {
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;

    	var c = s * v;
    	var f = 0;

    	if (c < 1.0) {
    		f = (v - c) / (1 - c);
    	}

    	return [hsv[0], c * 100, f * 100];
    };

    convert.hcg.rgb = function (hcg) {
    	var h = hcg[0] / 360;
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	if (c === 0.0) {
    		return [g * 255, g * 255, g * 255];
    	}

    	var pure = [0, 0, 0];
    	var hi = (h % 1) * 6;
    	var v = hi % 1;
    	var w = 1 - v;
    	var mg = 0;

    	switch (Math.floor(hi)) {
    		case 0:
    			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
    		case 1:
    			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
    		case 2:
    			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
    		case 3:
    			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
    		case 4:
    			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
    		default:
    			pure[0] = 1; pure[1] = 0; pure[2] = w;
    	}

    	mg = (1.0 - c) * g;

    	return [
    		(c * pure[0] + mg) * 255,
    		(c * pure[1] + mg) * 255,
    		(c * pure[2] + mg) * 255
    	];
    };

    convert.hcg.hsv = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	var v = c + g * (1.0 - c);
    	var f = 0;

    	if (v > 0.0) {
    		f = c / v;
    	}

    	return [hcg[0], f * 100, v * 100];
    };

    convert.hcg.hsl = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	var l = g * (1.0 - c) + 0.5 * c;
    	var s = 0;

    	if (l > 0.0 && l < 0.5) {
    		s = c / (2 * l);
    	} else
    	if (l >= 0.5 && l < 1.0) {
    		s = c / (2 * (1 - l));
    	}

    	return [hcg[0], s * 100, l * 100];
    };

    convert.hcg.hwb = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;
    	var v = c + g * (1.0 - c);
    	return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };

    convert.hwb.hcg = function (hwb) {
    	var w = hwb[1] / 100;
    	var b = hwb[2] / 100;
    	var v = 1 - b;
    	var c = v - w;
    	var g = 0;

    	if (c < 1) {
    		g = (v - c) / (1 - c);
    	}

    	return [hwb[0], c * 100, g * 100];
    };

    convert.apple.rgb = function (apple) {
    	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
    };

    convert.rgb.apple = function (rgb) {
    	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
    };

    convert.gray.rgb = function (args) {
    	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };

    convert.gray.hsl = convert.gray.hsv = function (args) {
    	return [0, 0, args[0]];
    };

    convert.gray.hwb = function (gray) {
    	return [0, 100, gray[0]];
    };

    convert.gray.cmyk = function (gray) {
    	return [0, 0, 0, gray[0]];
    };

    convert.gray.lab = function (gray) {
    	return [gray[0], 0, 0];
    };

    convert.gray.hex = function (gray) {
    	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
    	var integer = (val << 16) + (val << 8) + val;

    	var string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert.rgb.gray = function (rgb) {
    	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    	return [val / 255 * 100];
    };
    });
    var conversions_1 = conversions.rgb;
    var conversions_2 = conversions.hsl;
    var conversions_3 = conversions.hsv;
    var conversions_4 = conversions.hwb;
    var conversions_5 = conversions.cmyk;
    var conversions_6 = conversions.xyz;
    var conversions_7 = conversions.lab;
    var conversions_8 = conversions.lch;
    var conversions_9 = conversions.hex;
    var conversions_10 = conversions.keyword;
    var conversions_11 = conversions.ansi16;
    var conversions_12 = conversions.ansi256;
    var conversions_13 = conversions.hcg;
    var conversions_14 = conversions.apple;
    var conversions_15 = conversions.gray;

    /*
    	this function routes a model to all other models.

    	all functions that are routed have a property `.conversion` attached
    	to the returned synthetic function. This property is an array
    	of strings, each with the steps in between the 'from' and 'to'
    	color models (inclusive).

    	conversions that are not possible simply are not included.
    */

    function buildGraph() {
    	var graph = {};
    	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
    	var models = Object.keys(conversions);

    	for (var len = models.length, i = 0; i < len; i++) {
    		graph[models[i]] = {
    			// http://jsperf.com/1-vs-infinity
    			// micro-opt, but this is simple.
    			distance: -1,
    			parent: null
    		};
    	}

    	return graph;
    }

    // https://en.wikipedia.org/wiki/Breadth-first_search
    function deriveBFS(fromModel) {
    	var graph = buildGraph();
    	var queue = [fromModel]; // unshift -> queue -> pop

    	graph[fromModel].distance = 0;

    	while (queue.length) {
    		var current = queue.pop();
    		var adjacents = Object.keys(conversions[current]);

    		for (var len = adjacents.length, i = 0; i < len; i++) {
    			var adjacent = adjacents[i];
    			var node = graph[adjacent];

    			if (node.distance === -1) {
    				node.distance = graph[current].distance + 1;
    				node.parent = current;
    				queue.unshift(adjacent);
    			}
    		}
    	}

    	return graph;
    }

    function link(from, to) {
    	return function (args) {
    		return to(from(args));
    	};
    }

    function wrapConversion(toModel, graph) {
    	var path = [graph[toModel].parent, toModel];
    	var fn = conversions[graph[toModel].parent][toModel];

    	var cur = graph[toModel].parent;
    	while (graph[cur].parent) {
    		path.unshift(graph[cur].parent);
    		fn = link(conversions[graph[cur].parent][cur], fn);
    		cur = graph[cur].parent;
    	}

    	fn.conversion = path;
    	return fn;
    }

    var route = function (fromModel) {
    	var graph = deriveBFS(fromModel);
    	var conversion = {};

    	var models = Object.keys(graph);
    	for (var len = models.length, i = 0; i < len; i++) {
    		var toModel = models[i];
    		var node = graph[toModel];

    		if (node.parent === null) {
    			// no possible conversion, or this node is the source model.
    			continue;
    		}

    		conversion[toModel] = wrapConversion(toModel, graph);
    	}

    	return conversion;
    };

    var convert = {};

    var models = Object.keys(conversions);

    function wrapRaw(fn) {
    	var wrappedFn = function (args) {
    		if (args === undefined || args === null) {
    			return args;
    		}

    		if (arguments.length > 1) {
    			args = Array.prototype.slice.call(arguments);
    		}

    		return fn(args);
    	};

    	// preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    function wrapRounded(fn) {
    	var wrappedFn = function (args) {
    		if (args === undefined || args === null) {
    			return args;
    		}

    		if (arguments.length > 1) {
    			args = Array.prototype.slice.call(arguments);
    		}

    		var result = fn(args);

    		// we're assuming the result is an array here.
    		// see notice in conversions.js; don't use box types
    		// in conversion functions.
    		if (typeof result === 'object') {
    			for (var len = result.length, i = 0; i < len; i++) {
    				result[i] = Math.round(result[i]);
    			}
    		}

    		return result;
    	};

    	// preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    models.forEach(function (fromModel) {
    	convert[fromModel] = {};

    	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
    	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

    	var routes = route(fromModel);
    	var routeModels = Object.keys(routes);

    	routeModels.forEach(function (toModel) {
    		var fn = routes[toModel];

    		convert[fromModel][toModel] = wrapRounded(fn);
    		convert[fromModel][toModel].raw = wrapRaw(fn);
    	});
    });

    var colorConvert = convert;

    var colorName$1 = {
    	"aliceblue": [240, 248, 255],
    	"antiquewhite": [250, 235, 215],
    	"aqua": [0, 255, 255],
    	"aquamarine": [127, 255, 212],
    	"azure": [240, 255, 255],
    	"beige": [245, 245, 220],
    	"bisque": [255, 228, 196],
    	"black": [0, 0, 0],
    	"blanchedalmond": [255, 235, 205],
    	"blue": [0, 0, 255],
    	"blueviolet": [138, 43, 226],
    	"brown": [165, 42, 42],
    	"burlywood": [222, 184, 135],
    	"cadetblue": [95, 158, 160],
    	"chartreuse": [127, 255, 0],
    	"chocolate": [210, 105, 30],
    	"coral": [255, 127, 80],
    	"cornflowerblue": [100, 149, 237],
    	"cornsilk": [255, 248, 220],
    	"crimson": [220, 20, 60],
    	"cyan": [0, 255, 255],
    	"darkblue": [0, 0, 139],
    	"darkcyan": [0, 139, 139],
    	"darkgoldenrod": [184, 134, 11],
    	"darkgray": [169, 169, 169],
    	"darkgreen": [0, 100, 0],
    	"darkgrey": [169, 169, 169],
    	"darkkhaki": [189, 183, 107],
    	"darkmagenta": [139, 0, 139],
    	"darkolivegreen": [85, 107, 47],
    	"darkorange": [255, 140, 0],
    	"darkorchid": [153, 50, 204],
    	"darkred": [139, 0, 0],
    	"darksalmon": [233, 150, 122],
    	"darkseagreen": [143, 188, 143],
    	"darkslateblue": [72, 61, 139],
    	"darkslategray": [47, 79, 79],
    	"darkslategrey": [47, 79, 79],
    	"darkturquoise": [0, 206, 209],
    	"darkviolet": [148, 0, 211],
    	"deeppink": [255, 20, 147],
    	"deepskyblue": [0, 191, 255],
    	"dimgray": [105, 105, 105],
    	"dimgrey": [105, 105, 105],
    	"dodgerblue": [30, 144, 255],
    	"firebrick": [178, 34, 34],
    	"floralwhite": [255, 250, 240],
    	"forestgreen": [34, 139, 34],
    	"fuchsia": [255, 0, 255],
    	"gainsboro": [220, 220, 220],
    	"ghostwhite": [248, 248, 255],
    	"gold": [255, 215, 0],
    	"goldenrod": [218, 165, 32],
    	"gray": [128, 128, 128],
    	"green": [0, 128, 0],
    	"greenyellow": [173, 255, 47],
    	"grey": [128, 128, 128],
    	"honeydew": [240, 255, 240],
    	"hotpink": [255, 105, 180],
    	"indianred": [205, 92, 92],
    	"indigo": [75, 0, 130],
    	"ivory": [255, 255, 240],
    	"khaki": [240, 230, 140],
    	"lavender": [230, 230, 250],
    	"lavenderblush": [255, 240, 245],
    	"lawngreen": [124, 252, 0],
    	"lemonchiffon": [255, 250, 205],
    	"lightblue": [173, 216, 230],
    	"lightcoral": [240, 128, 128],
    	"lightcyan": [224, 255, 255],
    	"lightgoldenrodyellow": [250, 250, 210],
    	"lightgray": [211, 211, 211],
    	"lightgreen": [144, 238, 144],
    	"lightgrey": [211, 211, 211],
    	"lightpink": [255, 182, 193],
    	"lightsalmon": [255, 160, 122],
    	"lightseagreen": [32, 178, 170],
    	"lightskyblue": [135, 206, 250],
    	"lightslategray": [119, 136, 153],
    	"lightslategrey": [119, 136, 153],
    	"lightsteelblue": [176, 196, 222],
    	"lightyellow": [255, 255, 224],
    	"lime": [0, 255, 0],
    	"limegreen": [50, 205, 50],
    	"linen": [250, 240, 230],
    	"magenta": [255, 0, 255],
    	"maroon": [128, 0, 0],
    	"mediumaquamarine": [102, 205, 170],
    	"mediumblue": [0, 0, 205],
    	"mediumorchid": [186, 85, 211],
    	"mediumpurple": [147, 112, 219],
    	"mediumseagreen": [60, 179, 113],
    	"mediumslateblue": [123, 104, 238],
    	"mediumspringgreen": [0, 250, 154],
    	"mediumturquoise": [72, 209, 204],
    	"mediumvioletred": [199, 21, 133],
    	"midnightblue": [25, 25, 112],
    	"mintcream": [245, 255, 250],
    	"mistyrose": [255, 228, 225],
    	"moccasin": [255, 228, 181],
    	"navajowhite": [255, 222, 173],
    	"navy": [0, 0, 128],
    	"oldlace": [253, 245, 230],
    	"olive": [128, 128, 0],
    	"olivedrab": [107, 142, 35],
    	"orange": [255, 165, 0],
    	"orangered": [255, 69, 0],
    	"orchid": [218, 112, 214],
    	"palegoldenrod": [238, 232, 170],
    	"palegreen": [152, 251, 152],
    	"paleturquoise": [175, 238, 238],
    	"palevioletred": [219, 112, 147],
    	"papayawhip": [255, 239, 213],
    	"peachpuff": [255, 218, 185],
    	"peru": [205, 133, 63],
    	"pink": [255, 192, 203],
    	"plum": [221, 160, 221],
    	"powderblue": [176, 224, 230],
    	"purple": [128, 0, 128],
    	"rebeccapurple": [102, 51, 153],
    	"red": [255, 0, 0],
    	"rosybrown": [188, 143, 143],
    	"royalblue": [65, 105, 225],
    	"saddlebrown": [139, 69, 19],
    	"salmon": [250, 128, 114],
    	"sandybrown": [244, 164, 96],
    	"seagreen": [46, 139, 87],
    	"seashell": [255, 245, 238],
    	"sienna": [160, 82, 45],
    	"silver": [192, 192, 192],
    	"skyblue": [135, 206, 235],
    	"slateblue": [106, 90, 205],
    	"slategray": [112, 128, 144],
    	"slategrey": [112, 128, 144],
    	"snow": [255, 250, 250],
    	"springgreen": [0, 255, 127],
    	"steelblue": [70, 130, 180],
    	"tan": [210, 180, 140],
    	"teal": [0, 128, 128],
    	"thistle": [216, 191, 216],
    	"tomato": [255, 99, 71],
    	"turquoise": [64, 224, 208],
    	"violet": [238, 130, 238],
    	"wheat": [245, 222, 179],
    	"white": [255, 255, 255],
    	"whitesmoke": [245, 245, 245],
    	"yellow": [255, 255, 0],
    	"yellowgreen": [154, 205, 50]
    };

    /* MIT license */


    var colorString = {
       getRgba: getRgba,
       getHsla: getHsla,
       getRgb: getRgb,
       getHsl: getHsl,
       getHwb: getHwb,
       getAlpha: getAlpha,

       hexString: hexString,
       rgbString: rgbString,
       rgbaString: rgbaString,
       percentString: percentString,
       percentaString: percentaString,
       hslString: hslString,
       hslaString: hslaString,
       hwbString: hwbString,
       keyword: keyword
    };

    function getRgba(string) {
       if (!string) {
          return;
       }
       var abbr =  /^#([a-fA-F0-9]{3,4})$/i,
           hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,
           rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
           per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
           keyword = /(\w+)/;

       var rgb = [0, 0, 0],
           a = 1,
           match = string.match(abbr),
           hexAlpha = "";
       if (match) {
          match = match[1];
          hexAlpha = match[3];
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match[i] + match[i], 16);
          }
          if (hexAlpha) {
             a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;
          }
       }
       else if (match = string.match(hex)) {
          hexAlpha = match[2];
          match = match[1];
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
          }
          if (hexAlpha) {
             a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;
          }
       }
       else if (match = string.match(rgba)) {
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match[i + 1]);
          }
          a = parseFloat(match[4]);
       }
       else if (match = string.match(per)) {
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
          }
          a = parseFloat(match[4]);
       }
       else if (match = string.match(keyword)) {
          if (match[1] == "transparent") {
             return [0, 0, 0, 0];
          }
          rgb = colorName$1[match[1]];
          if (!rgb) {
             return;
          }
       }

       for (var i = 0; i < rgb.length; i++) {
          rgb[i] = scale(rgb[i], 0, 255);
       }
       if (!a && a != 0) {
          a = 1;
       }
       else {
          a = scale(a, 0, 1);
       }
       rgb[3] = a;
       return rgb;
    }

    function getHsla(string) {
       if (!string) {
          return;
       }
       var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
       var match = string.match(hsl);
       if (match) {
          var alpha = parseFloat(match[4]);
          var h = scale(parseInt(match[1]), 0, 360),
              s = scale(parseFloat(match[2]), 0, 100),
              l = scale(parseFloat(match[3]), 0, 100),
              a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, s, l, a];
       }
    }

    function getHwb(string) {
       if (!string) {
          return;
       }
       var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
       var match = string.match(hwb);
       if (match) {
        var alpha = parseFloat(match[4]);
          var h = scale(parseInt(match[1]), 0, 360),
              w = scale(parseFloat(match[2]), 0, 100),
              b = scale(parseFloat(match[3]), 0, 100),
              a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, w, b, a];
       }
    }

    function getRgb(string) {
       var rgba = getRgba(string);
       return rgba && rgba.slice(0, 3);
    }

    function getHsl(string) {
      var hsla = getHsla(string);
      return hsla && hsla.slice(0, 3);
    }

    function getAlpha(string) {
       var vals = getRgba(string);
       if (vals) {
          return vals[3];
       }
       else if (vals = getHsla(string)) {
          return vals[3];
       }
       else if (vals = getHwb(string)) {
          return vals[3];
       }
    }

    // generators
    function hexString(rgba, a) {
       var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];
       return "#" + hexDouble(rgba[0]) 
                  + hexDouble(rgba[1])
                  + hexDouble(rgba[2])
                  + (
                     (a >= 0 && a < 1)
                     ? hexDouble(Math.round(a * 255))
                     : ""
                  );
    }

    function rgbString(rgba, alpha) {
       if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
          return rgbaString(rgba, alpha);
       }
       return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
    }

    function rgbaString(rgba, alpha) {
       if (alpha === undefined) {
          alpha = (rgba[3] !== undefined ? rgba[3] : 1);
       }
       return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
               + ", " + alpha + ")";
    }

    function percentString(rgba, alpha) {
       if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
          return percentaString(rgba, alpha);
       }
       var r = Math.round(rgba[0]/255 * 100),
           g = Math.round(rgba[1]/255 * 100),
           b = Math.round(rgba[2]/255 * 100);

       return "rgb(" + r + "%, " + g + "%, " + b + "%)";
    }

    function percentaString(rgba, alpha) {
       var r = Math.round(rgba[0]/255 * 100),
           g = Math.round(rgba[1]/255 * 100),
           b = Math.round(rgba[2]/255 * 100);
       return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
    }

    function hslString(hsla, alpha) {
       if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
          return hslaString(hsla, alpha);
       }
       return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
    }

    function hslaString(hsla, alpha) {
       if (alpha === undefined) {
          alpha = (hsla[3] !== undefined ? hsla[3] : 1);
       }
       return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
               + alpha + ")";
    }

    // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
    // (hwb have alpha optional & 1 is default value)
    function hwbString(hwb, alpha) {
       if (alpha === undefined) {
          alpha = (hwb[3] !== undefined ? hwb[3] : 1);
       }
       return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
               + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
    }

    function keyword(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    }

    // helpers
    function scale(num, min, max) {
       return Math.min(Math.max(min, num), max);
    }

    function hexDouble(num) {
      var str = num.toString(16).toUpperCase();
      return (str.length < 2) ? "0" + str : str;
    }


    //create a list of reverse color names
    var reverseNames = {};
    for (var name in colorName$1) {
       reverseNames[colorName$1[name]] = name;
    }

    /* MIT license */



    var Color = function (obj) {
    	if (obj instanceof Color) {
    		return obj;
    	}
    	if (!(this instanceof Color)) {
    		return new Color(obj);
    	}

    	this.valid = false;
    	this.values = {
    		rgb: [0, 0, 0],
    		hsl: [0, 0, 0],
    		hsv: [0, 0, 0],
    		hwb: [0, 0, 0],
    		cmyk: [0, 0, 0, 0],
    		alpha: 1
    	};

    	// parse Color() argument
    	var vals;
    	if (typeof obj === 'string') {
    		vals = colorString.getRgba(obj);
    		if (vals) {
    			this.setValues('rgb', vals);
    		} else if (vals = colorString.getHsla(obj)) {
    			this.setValues('hsl', vals);
    		} else if (vals = colorString.getHwb(obj)) {
    			this.setValues('hwb', vals);
    		}
    	} else if (typeof obj === 'object') {
    		vals = obj;
    		if (vals.r !== undefined || vals.red !== undefined) {
    			this.setValues('rgb', vals);
    		} else if (vals.l !== undefined || vals.lightness !== undefined) {
    			this.setValues('hsl', vals);
    		} else if (vals.v !== undefined || vals.value !== undefined) {
    			this.setValues('hsv', vals);
    		} else if (vals.w !== undefined || vals.whiteness !== undefined) {
    			this.setValues('hwb', vals);
    		} else if (vals.c !== undefined || vals.cyan !== undefined) {
    			this.setValues('cmyk', vals);
    		}
    	}
    };

    Color.prototype = {
    	isValid: function () {
    		return this.valid;
    	},
    	rgb: function () {
    		return this.setSpace('rgb', arguments);
    	},
    	hsl: function () {
    		return this.setSpace('hsl', arguments);
    	},
    	hsv: function () {
    		return this.setSpace('hsv', arguments);
    	},
    	hwb: function () {
    		return this.setSpace('hwb', arguments);
    	},
    	cmyk: function () {
    		return this.setSpace('cmyk', arguments);
    	},

    	rgbArray: function () {
    		return this.values.rgb;
    	},
    	hslArray: function () {
    		return this.values.hsl;
    	},
    	hsvArray: function () {
    		return this.values.hsv;
    	},
    	hwbArray: function () {
    		var values = this.values;
    		if (values.alpha !== 1) {
    			return values.hwb.concat([values.alpha]);
    		}
    		return values.hwb;
    	},
    	cmykArray: function () {
    		return this.values.cmyk;
    	},
    	rgbaArray: function () {
    		var values = this.values;
    		return values.rgb.concat([values.alpha]);
    	},
    	hslaArray: function () {
    		var values = this.values;
    		return values.hsl.concat([values.alpha]);
    	},
    	alpha: function (val) {
    		if (val === undefined) {
    			return this.values.alpha;
    		}
    		this.setValues('alpha', val);
    		return this;
    	},

    	red: function (val) {
    		return this.setChannel('rgb', 0, val);
    	},
    	green: function (val) {
    		return this.setChannel('rgb', 1, val);
    	},
    	blue: function (val) {
    		return this.setChannel('rgb', 2, val);
    	},
    	hue: function (val) {
    		if (val) {
    			val %= 360;
    			val = val < 0 ? 360 + val : val;
    		}
    		return this.setChannel('hsl', 0, val);
    	},
    	saturation: function (val) {
    		return this.setChannel('hsl', 1, val);
    	},
    	lightness: function (val) {
    		return this.setChannel('hsl', 2, val);
    	},
    	saturationv: function (val) {
    		return this.setChannel('hsv', 1, val);
    	},
    	whiteness: function (val) {
    		return this.setChannel('hwb', 1, val);
    	},
    	blackness: function (val) {
    		return this.setChannel('hwb', 2, val);
    	},
    	value: function (val) {
    		return this.setChannel('hsv', 2, val);
    	},
    	cyan: function (val) {
    		return this.setChannel('cmyk', 0, val);
    	},
    	magenta: function (val) {
    		return this.setChannel('cmyk', 1, val);
    	},
    	yellow: function (val) {
    		return this.setChannel('cmyk', 2, val);
    	},
    	black: function (val) {
    		return this.setChannel('cmyk', 3, val);
    	},

    	hexString: function () {
    		return colorString.hexString(this.values.rgb);
    	},
    	rgbString: function () {
    		return colorString.rgbString(this.values.rgb, this.values.alpha);
    	},
    	rgbaString: function () {
    		return colorString.rgbaString(this.values.rgb, this.values.alpha);
    	},
    	percentString: function () {
    		return colorString.percentString(this.values.rgb, this.values.alpha);
    	},
    	hslString: function () {
    		return colorString.hslString(this.values.hsl, this.values.alpha);
    	},
    	hslaString: function () {
    		return colorString.hslaString(this.values.hsl, this.values.alpha);
    	},
    	hwbString: function () {
    		return colorString.hwbString(this.values.hwb, this.values.alpha);
    	},
    	keyword: function () {
    		return colorString.keyword(this.values.rgb, this.values.alpha);
    	},

    	rgbNumber: function () {
    		var rgb = this.values.rgb;
    		return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
    	},

    	luminosity: function () {
    		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
    		var rgb = this.values.rgb;
    		var lum = [];
    		for (var i = 0; i < rgb.length; i++) {
    			var chan = rgb[i] / 255;
    			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
    		}
    		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    	},

    	contrast: function (color2) {
    		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
    		var lum1 = this.luminosity();
    		var lum2 = color2.luminosity();
    		if (lum1 > lum2) {
    			return (lum1 + 0.05) / (lum2 + 0.05);
    		}
    		return (lum2 + 0.05) / (lum1 + 0.05);
    	},

    	level: function (color2) {
    		var contrastRatio = this.contrast(color2);
    		if (contrastRatio >= 7.1) {
    			return 'AAA';
    		}

    		return (contrastRatio >= 4.5) ? 'AA' : '';
    	},

    	dark: function () {
    		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
    		var rgb = this.values.rgb;
    		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
    		return yiq < 128;
    	},

    	light: function () {
    		return !this.dark();
    	},

    	negate: function () {
    		var rgb = [];
    		for (var i = 0; i < 3; i++) {
    			rgb[i] = 255 - this.values.rgb[i];
    		}
    		this.setValues('rgb', rgb);
    		return this;
    	},

    	lighten: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[2] += hsl[2] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	darken: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[2] -= hsl[2] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	saturate: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[1] += hsl[1] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	desaturate: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[1] -= hsl[1] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	whiten: function (ratio) {
    		var hwb = this.values.hwb;
    		hwb[1] += hwb[1] * ratio;
    		this.setValues('hwb', hwb);
    		return this;
    	},

    	blacken: function (ratio) {
    		var hwb = this.values.hwb;
    		hwb[2] += hwb[2] * ratio;
    		this.setValues('hwb', hwb);
    		return this;
    	},

    	greyscale: function () {
    		var rgb = this.values.rgb;
    		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
    		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
    		this.setValues('rgb', [val, val, val]);
    		return this;
    	},

    	clearer: function (ratio) {
    		var alpha = this.values.alpha;
    		this.setValues('alpha', alpha - (alpha * ratio));
    		return this;
    	},

    	opaquer: function (ratio) {
    		var alpha = this.values.alpha;
    		this.setValues('alpha', alpha + (alpha * ratio));
    		return this;
    	},

    	rotate: function (degrees) {
    		var hsl = this.values.hsl;
    		var hue = (hsl[0] + degrees) % 360;
    		hsl[0] = hue < 0 ? 360 + hue : hue;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	/**
    	 * Ported from sass implementation in C
    	 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
    	 */
    	mix: function (mixinColor, weight) {
    		var color1 = this;
    		var color2 = mixinColor;
    		var p = weight === undefined ? 0.5 : weight;

    		var w = 2 * p - 1;
    		var a = color1.alpha() - color2.alpha();

    		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
    		var w2 = 1 - w1;

    		return this
    			.rgb(
    				w1 * color1.red() + w2 * color2.red(),
    				w1 * color1.green() + w2 * color2.green(),
    				w1 * color1.blue() + w2 * color2.blue()
    			)
    			.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
    	},

    	toJSON: function () {
    		return this.rgb();
    	},

    	clone: function () {
    		// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
    		// making the final build way to big to embed in Chart.js. So let's do it manually,
    		// assuming that values to clone are 1 dimension arrays containing only numbers,
    		// except 'alpha' which is a number.
    		var result = new Color();
    		var source = this.values;
    		var target = result.values;
    		var value, type;

    		for (var prop in source) {
    			if (source.hasOwnProperty(prop)) {
    				value = source[prop];
    				type = ({}).toString.call(value);
    				if (type === '[object Array]') {
    					target[prop] = value.slice(0);
    				} else if (type === '[object Number]') {
    					target[prop] = value;
    				} else {
    					console.error('unexpected color value:', value);
    				}
    			}
    		}

    		return result;
    	}
    };

    Color.prototype.spaces = {
    	rgb: ['red', 'green', 'blue'],
    	hsl: ['hue', 'saturation', 'lightness'],
    	hsv: ['hue', 'saturation', 'value'],
    	hwb: ['hue', 'whiteness', 'blackness'],
    	cmyk: ['cyan', 'magenta', 'yellow', 'black']
    };

    Color.prototype.maxes = {
    	rgb: [255, 255, 255],
    	hsl: [360, 100, 100],
    	hsv: [360, 100, 100],
    	hwb: [360, 100, 100],
    	cmyk: [100, 100, 100, 100]
    };

    Color.prototype.getValues = function (space) {
    	var values = this.values;
    	var vals = {};

    	for (var i = 0; i < space.length; i++) {
    		vals[space.charAt(i)] = values[space][i];
    	}

    	if (values.alpha !== 1) {
    		vals.a = values.alpha;
    	}

    	// {r: 255, g: 255, b: 255, a: 0.4}
    	return vals;
    };

    Color.prototype.setValues = function (space, vals) {
    	var values = this.values;
    	var spaces = this.spaces;
    	var maxes = this.maxes;
    	var alpha = 1;
    	var i;

    	this.valid = true;

    	if (space === 'alpha') {
    		alpha = vals;
    	} else if (vals.length) {
    		// [10, 10, 10]
    		values[space] = vals.slice(0, space.length);
    		alpha = vals[space.length];
    	} else if (vals[space.charAt(0)] !== undefined) {
    		// {r: 10, g: 10, b: 10}
    		for (i = 0; i < space.length; i++) {
    			values[space][i] = vals[space.charAt(i)];
    		}

    		alpha = vals.a;
    	} else if (vals[spaces[space][0]] !== undefined) {
    		// {red: 10, green: 10, blue: 10}
    		var chans = spaces[space];

    		for (i = 0; i < space.length; i++) {
    			values[space][i] = vals[chans[i]];
    		}

    		alpha = vals.alpha;
    	}

    	values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));

    	if (space === 'alpha') {
    		return false;
    	}

    	var capped;

    	// cap values of the space prior converting all values
    	for (i = 0; i < space.length; i++) {
    		capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
    		values[space][i] = Math.round(capped);
    	}

    	// convert to all the other color spaces
    	for (var sname in spaces) {
    		if (sname !== space) {
    			values[sname] = colorConvert[space][sname](values[space]);
    		}
    	}

    	return true;
    };

    Color.prototype.setSpace = function (space, args) {
    	var vals = args[0];

    	if (vals === undefined) {
    		// color.rgb()
    		return this.getValues(space);
    	}

    	// color.rgb(10, 10, 10)
    	if (typeof vals === 'number') {
    		vals = Array.prototype.slice.call(args);
    	}

    	this.setValues(space, vals);
    	return this;
    };

    Color.prototype.setChannel = function (space, index, val) {
    	var svalues = this.values[space];
    	if (val === undefined) {
    		// color.red()
    		return svalues[index];
    	} else if (val === svalues[index]) {
    		// color.red(color.red())
    		return this;
    	}

    	// color.red(100)
    	svalues[index] = val;
    	this.setValues(space, svalues);

    	return this;
    };

    if (typeof window !== 'undefined') {
    	window.Color = Color;
    }

    var chartjsColor = Color;

    /**
     * @namespace Chart.helpers
     */
    var helpers = {
    	/**
    	 * An empty function that can be used, for example, for optional callback.
    	 */
    	noop: function() {},

    	/**
    	 * Returns a unique id, sequentially generated from a global variable.
    	 * @returns {number}
    	 * @function
    	 */
    	uid: (function() {
    		var id = 0;
    		return function() {
    			return id++;
    		};
    	}()),

    	/**
    	 * Returns true if `value` is neither null nor undefined, else returns false.
    	 * @param {*} value - The value to test.
    	 * @returns {boolean}
    	 * @since 2.7.0
    	 */
    	isNullOrUndef: function(value) {
    		return value === null || typeof value === 'undefined';
    	},

    	/**
    	 * Returns true if `value` is an array (including typed arrays), else returns false.
    	 * @param {*} value - The value to test.
    	 * @returns {boolean}
    	 * @function
    	 */
    	isArray: function(value) {
    		if (Array.isArray && Array.isArray(value)) {
    			return true;
    		}
    		var type = Object.prototype.toString.call(value);
    		if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
    			return true;
    		}
    		return false;
    	},

    	/**
    	 * Returns true if `value` is an object (excluding null), else returns false.
    	 * @param {*} value - The value to test.
    	 * @returns {boolean}
    	 * @since 2.7.0
    	 */
    	isObject: function(value) {
    		return value !== null && Object.prototype.toString.call(value) === '[object Object]';
    	},

    	/**
    	 * Returns true if `value` is a finite number, else returns false
    	 * @param {*} value  - The value to test.
    	 * @returns {boolean}
    	 */
    	isFinite: function(value) {
    		return (typeof value === 'number' || value instanceof Number) && isFinite(value);
    	},

    	/**
    	 * Returns `value` if defined, else returns `defaultValue`.
    	 * @param {*} value - The value to return if defined.
    	 * @param {*} defaultValue - The value to return if `value` is undefined.
    	 * @returns {*}
    	 */
    	valueOrDefault: function(value, defaultValue) {
    		return typeof value === 'undefined' ? defaultValue : value;
    	},

    	/**
    	 * Returns value at the given `index` in array if defined, else returns `defaultValue`.
    	 * @param {Array} value - The array to lookup for value at `index`.
    	 * @param {number} index - The index in `value` to lookup for value.
    	 * @param {*} defaultValue - The value to return if `value[index]` is undefined.
    	 * @returns {*}
    	 */
    	valueAtIndexOrDefault: function(value, index, defaultValue) {
    		return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
    	},

    	/**
    	 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
    	 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
    	 * @param {function} fn - The function to call.
    	 * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
    	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
    	 * @returns {*}
    	 */
    	callback: function(fn, args, thisArg) {
    		if (fn && typeof fn.call === 'function') {
    			return fn.apply(thisArg, args);
    		}
    	},

    	/**
    	 * Note(SB) for performance sake, this method should only be used when loopable type
    	 * is unknown or in none intensive code (not called often and small loopable). Else
    	 * it's preferable to use a regular for() loop and save extra function calls.
    	 * @param {object|Array} loopable - The object or array to be iterated.
    	 * @param {function} fn - The function to call for each item.
    	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
    	 * @param {boolean} [reverse] - If true, iterates backward on the loopable.
    	 */
    	each: function(loopable, fn, thisArg, reverse) {
    		var i, len, keys;
    		if (helpers.isArray(loopable)) {
    			len = loopable.length;
    			if (reverse) {
    				for (i = len - 1; i >= 0; i--) {
    					fn.call(thisArg, loopable[i], i);
    				}
    			} else {
    				for (i = 0; i < len; i++) {
    					fn.call(thisArg, loopable[i], i);
    				}
    			}
    		} else if (helpers.isObject(loopable)) {
    			keys = Object.keys(loopable);
    			len = keys.length;
    			for (i = 0; i < len; i++) {
    				fn.call(thisArg, loopable[keys[i]], keys[i]);
    			}
    		}
    	},

    	/**
    	 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
    	 * @see https://stackoverflow.com/a/14853974
    	 * @param {Array} a0 - The array to compare
    	 * @param {Array} a1 - The array to compare
    	 * @returns {boolean}
    	 */
    	arrayEquals: function(a0, a1) {
    		var i, ilen, v0, v1;

    		if (!a0 || !a1 || a0.length !== a1.length) {
    			return false;
    		}

    		for (i = 0, ilen = a0.length; i < ilen; ++i) {
    			v0 = a0[i];
    			v1 = a1[i];

    			if (v0 instanceof Array && v1 instanceof Array) {
    				if (!helpers.arrayEquals(v0, v1)) {
    					return false;
    				}
    			} else if (v0 !== v1) {
    				// NOTE: two different object instances will never be equal: {x:20} != {x:20}
    				return false;
    			}
    		}

    		return true;
    	},

    	/**
    	 * Returns a deep copy of `source` without keeping references on objects and arrays.
    	 * @param {*} source - The value to clone.
    	 * @returns {*}
    	 */
    	clone: function(source) {
    		if (helpers.isArray(source)) {
    			return source.map(helpers.clone);
    		}

    		if (helpers.isObject(source)) {
    			var target = {};
    			var keys = Object.keys(source);
    			var klen = keys.length;
    			var k = 0;

    			for (; k < klen; ++k) {
    				target[keys[k]] = helpers.clone(source[keys[k]]);
    			}

    			return target;
    		}

    		return source;
    	},

    	/**
    	 * The default merger when Chart.helpers.merge is called without merger option.
    	 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
    	 * @private
    	 */
    	_merger: function(key, target, source, options) {
    		var tval = target[key];
    		var sval = source[key];

    		if (helpers.isObject(tval) && helpers.isObject(sval)) {
    			helpers.merge(tval, sval, options);
    		} else {
    			target[key] = helpers.clone(sval);
    		}
    	},

    	/**
    	 * Merges source[key] in target[key] only if target[key] is undefined.
    	 * @private
    	 */
    	_mergerIf: function(key, target, source) {
    		var tval = target[key];
    		var sval = source[key];

    		if (helpers.isObject(tval) && helpers.isObject(sval)) {
    			helpers.mergeIf(tval, sval);
    		} else if (!target.hasOwnProperty(key)) {
    			target[key] = helpers.clone(sval);
    		}
    	},

    	/**
    	 * Recursively deep copies `source` properties into `target` with the given `options`.
    	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
    	 * @param {object} target - The target object in which all sources are merged into.
    	 * @param {object|object[]} source - Object(s) to merge into `target`.
    	 * @param {object} [options] - Merging options:
    	 * @param {function} [options.merger] - The merge method (key, target, source, options)
    	 * @returns {object} The `target` object.
    	 */
    	merge: function(target, source, options) {
    		var sources = helpers.isArray(source) ? source : [source];
    		var ilen = sources.length;
    		var merge, i, keys, klen, k;

    		if (!helpers.isObject(target)) {
    			return target;
    		}

    		options = options || {};
    		merge = options.merger || helpers._merger;

    		for (i = 0; i < ilen; ++i) {
    			source = sources[i];
    			if (!helpers.isObject(source)) {
    				continue;
    			}

    			keys = Object.keys(source);
    			for (k = 0, klen = keys.length; k < klen; ++k) {
    				merge(keys[k], target, source, options);
    			}
    		}

    		return target;
    	},

    	/**
    	 * Recursively deep copies `source` properties into `target` *only* if not defined in target.
    	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
    	 * @param {object} target - The target object in which all sources are merged into.
    	 * @param {object|object[]} source - Object(s) to merge into `target`.
    	 * @returns {object} The `target` object.
    	 */
    	mergeIf: function(target, source) {
    		return helpers.merge(target, source, {merger: helpers._mergerIf});
    	},

    	/**
    	 * Applies the contents of two or more objects together into the first object.
    	 * @param {object} target - The target object in which all objects are merged into.
    	 * @param {object} arg1 - Object containing additional properties to merge in target.
    	 * @param {object} argN - Additional objects containing properties to merge in target.
    	 * @returns {object} The `target` object.
    	 */
    	extend: Object.assign || function(target) {
    		return helpers.merge(target, [].slice.call(arguments, 1), {
    			merger: function(key, dst, src) {
    				dst[key] = src[key];
    			}
    		});
    	},

    	/**
    	 * Basic javascript inheritance based on the model created in Backbone.js
    	 */
    	inherits: function(extensions) {
    		var me = this;
    		var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
    			return me.apply(this, arguments);
    		};

    		var Surrogate = function() {
    			this.constructor = ChartElement;
    		};

    		Surrogate.prototype = me.prototype;
    		ChartElement.prototype = new Surrogate();
    		ChartElement.extend = helpers.inherits;

    		if (extensions) {
    			helpers.extend(ChartElement.prototype, extensions);
    		}

    		ChartElement.__super__ = me.prototype;
    		return ChartElement;
    	},

    	_deprecated: function(scope, value, previous, current) {
    		if (value !== undefined) {
    			console.warn(scope + ': "' + previous +
    				'" is deprecated. Please use "' + current + '" instead');
    		}
    	}
    };

    var helpers_core = helpers;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.callback instead.
     * @function Chart.helpers.callCallback
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     * @private
     */
    helpers.callCallback = helpers.callback;

    /**
     * Provided for backward compatibility, use Array.prototype.indexOf instead.
     * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
     * @function Chart.helpers.indexOf
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.indexOf = function(array, item, fromIndex) {
    	return Array.prototype.indexOf.call(array, item, fromIndex);
    };

    /**
     * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
     * @function Chart.helpers.getValueOrDefault
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.getValueOrDefault = helpers.valueOrDefault;

    /**
     * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
     * @function Chart.helpers.getValueAtIndexOrDefault
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;

    /**
     * Easing functions adapted from Robert Penner's easing equations.
     * @namespace Chart.helpers.easingEffects
     * @see http://www.robertpenner.com/easing/
     */
    var effects = {
    	linear: function(t) {
    		return t;
    	},

    	easeInQuad: function(t) {
    		return t * t;
    	},

    	easeOutQuad: function(t) {
    		return -t * (t - 2);
    	},

    	easeInOutQuad: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t;
    		}
    		return -0.5 * ((--t) * (t - 2) - 1);
    	},

    	easeInCubic: function(t) {
    		return t * t * t;
    	},

    	easeOutCubic: function(t) {
    		return (t = t - 1) * t * t + 1;
    	},

    	easeInOutCubic: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t * t;
    		}
    		return 0.5 * ((t -= 2) * t * t + 2);
    	},

    	easeInQuart: function(t) {
    		return t * t * t * t;
    	},

    	easeOutQuart: function(t) {
    		return -((t = t - 1) * t * t * t - 1);
    	},

    	easeInOutQuart: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t * t * t;
    		}
    		return -0.5 * ((t -= 2) * t * t * t - 2);
    	},

    	easeInQuint: function(t) {
    		return t * t * t * t * t;
    	},

    	easeOutQuint: function(t) {
    		return (t = t - 1) * t * t * t * t + 1;
    	},

    	easeInOutQuint: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t * t * t * t;
    		}
    		return 0.5 * ((t -= 2) * t * t * t * t + 2);
    	},

    	easeInSine: function(t) {
    		return -Math.cos(t * (Math.PI / 2)) + 1;
    	},

    	easeOutSine: function(t) {
    		return Math.sin(t * (Math.PI / 2));
    	},

    	easeInOutSine: function(t) {
    		return -0.5 * (Math.cos(Math.PI * t) - 1);
    	},

    	easeInExpo: function(t) {
    		return (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));
    	},

    	easeOutExpo: function(t) {
    		return (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;
    	},

    	easeInOutExpo: function(t) {
    		if (t === 0) {
    			return 0;
    		}
    		if (t === 1) {
    			return 1;
    		}
    		if ((t /= 0.5) < 1) {
    			return 0.5 * Math.pow(2, 10 * (t - 1));
    		}
    		return 0.5 * (-Math.pow(2, -10 * --t) + 2);
    	},

    	easeInCirc: function(t) {
    		if (t >= 1) {
    			return t;
    		}
    		return -(Math.sqrt(1 - t * t) - 1);
    	},

    	easeOutCirc: function(t) {
    		return Math.sqrt(1 - (t = t - 1) * t);
    	},

    	easeInOutCirc: function(t) {
    		if ((t /= 0.5) < 1) {
    			return -0.5 * (Math.sqrt(1 - t * t) - 1);
    		}
    		return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
    	},

    	easeInElastic: function(t) {
    		var s = 1.70158;
    		var p = 0;
    		var a = 1;
    		if (t === 0) {
    			return 0;
    		}
    		if (t === 1) {
    			return 1;
    		}
    		if (!p) {
    			p = 0.3;
    		}
    		{
    			s = p / (2 * Math.PI) * Math.asin(1 / a);
    		}
    		return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
    	},

    	easeOutElastic: function(t) {
    		var s = 1.70158;
    		var p = 0;
    		var a = 1;
    		if (t === 0) {
    			return 0;
    		}
    		if (t === 1) {
    			return 1;
    		}
    		if (!p) {
    			p = 0.3;
    		}
    		{
    			s = p / (2 * Math.PI) * Math.asin(1 / a);
    		}
    		return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
    	},

    	easeInOutElastic: function(t) {
    		var s = 1.70158;
    		var p = 0;
    		var a = 1;
    		if (t === 0) {
    			return 0;
    		}
    		if ((t /= 0.5) === 2) {
    			return 1;
    		}
    		if (!p) {
    			p = 0.45;
    		}
    		{
    			s = p / (2 * Math.PI) * Math.asin(1 / a);
    		}
    		if (t < 1) {
    			return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
    		}
    		return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
    	},
    	easeInBack: function(t) {
    		var s = 1.70158;
    		return t * t * ((s + 1) * t - s);
    	},

    	easeOutBack: function(t) {
    		var s = 1.70158;
    		return (t = t - 1) * t * ((s + 1) * t + s) + 1;
    	},

    	easeInOutBack: function(t) {
    		var s = 1.70158;
    		if ((t /= 0.5) < 1) {
    			return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
    		}
    		return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
    	},

    	easeInBounce: function(t) {
    		return 1 - effects.easeOutBounce(1 - t);
    	},

    	easeOutBounce: function(t) {
    		if (t < (1 / 2.75)) {
    			return 7.5625 * t * t;
    		}
    		if (t < (2 / 2.75)) {
    			return 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;
    		}
    		if (t < (2.5 / 2.75)) {
    			return 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;
    		}
    		return 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;
    	},

    	easeInOutBounce: function(t) {
    		if (t < 0.5) {
    			return effects.easeInBounce(t * 2) * 0.5;
    		}
    		return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
    	}
    };

    var helpers_easing = {
    	effects: effects
    };

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
     * @function Chart.helpers.easingEffects
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.easingEffects = effects;

    var PI = Math.PI;
    var RAD_PER_DEG = PI / 180;
    var DOUBLE_PI = PI * 2;
    var HALF_PI = PI / 2;
    var QUARTER_PI = PI / 4;
    var TWO_THIRDS_PI = PI * 2 / 3;

    /**
     * @namespace Chart.helpers.canvas
     */
    var exports$1 = {
    	/**
    	 * Clears the entire canvas associated to the given `chart`.
    	 * @param {Chart} chart - The chart for which to clear the canvas.
    	 */
    	clear: function(chart) {
    		chart.ctx.clearRect(0, 0, chart.width, chart.height);
    	},

    	/**
    	 * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
    	 * given size (width, height) and the same `radius` for all corners.
    	 * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
    	 * @param {number} x - The x axis of the coordinate for the rectangle starting point.
    	 * @param {number} y - The y axis of the coordinate for the rectangle starting point.
    	 * @param {number} width - The rectangle's width.
    	 * @param {number} height - The rectangle's height.
    	 * @param {number} radius - The rounded amount (in pixels) for the four corners.
    	 * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
    	 */
    	roundedRect: function(ctx, x, y, width, height, radius) {
    		if (radius) {
    			var r = Math.min(radius, height / 2, width / 2);
    			var left = x + r;
    			var top = y + r;
    			var right = x + width - r;
    			var bottom = y + height - r;

    			ctx.moveTo(x, top);
    			if (left < right && top < bottom) {
    				ctx.arc(left, top, r, -PI, -HALF_PI);
    				ctx.arc(right, top, r, -HALF_PI, 0);
    				ctx.arc(right, bottom, r, 0, HALF_PI);
    				ctx.arc(left, bottom, r, HALF_PI, PI);
    			} else if (left < right) {
    				ctx.moveTo(left, y);
    				ctx.arc(right, top, r, -HALF_PI, HALF_PI);
    				ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);
    			} else if (top < bottom) {
    				ctx.arc(left, top, r, -PI, 0);
    				ctx.arc(left, bottom, r, 0, PI);
    			} else {
    				ctx.arc(left, top, r, -PI, PI);
    			}
    			ctx.closePath();
    			ctx.moveTo(x, y);
    		} else {
    			ctx.rect(x, y, width, height);
    		}
    	},

    	drawPoint: function(ctx, style, radius, x, y, rotation) {
    		var type, xOffset, yOffset, size, cornerRadius;
    		var rad = (rotation || 0) * RAD_PER_DEG;

    		if (style && typeof style === 'object') {
    			type = style.toString();
    			if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
    				ctx.save();
    				ctx.translate(x, y);
    				ctx.rotate(rad);
    				ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
    				ctx.restore();
    				return;
    			}
    		}

    		if (isNaN(radius) || radius <= 0) {
    			return;
    		}

    		ctx.beginPath();

    		switch (style) {
    		// Default includes circle
    		default:
    			ctx.arc(x, y, radius, 0, DOUBLE_PI);
    			ctx.closePath();
    			break;
    		case 'triangle':
    			ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    			rad += TWO_THIRDS_PI;
    			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    			rad += TWO_THIRDS_PI;
    			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    			ctx.closePath();
    			break;
    		case 'rectRounded':
    			// NOTE: the rounded rect implementation changed to use `arc` instead of
    			// `quadraticCurveTo` since it generates better results when rect is
    			// almost a circle. 0.516 (instead of 0.5) produces results with visually
    			// closer proportion to the previous impl and it is inscribed in the
    			// circle with `radius`. For more details, see the following PRs:
    			// https://github.com/chartjs/Chart.js/issues/5597
    			// https://github.com/chartjs/Chart.js/issues/5858
    			cornerRadius = radius * 0.516;
    			size = radius - cornerRadius;
    			xOffset = Math.cos(rad + QUARTER_PI) * size;
    			yOffset = Math.sin(rad + QUARTER_PI) * size;
    			ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
    			ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
    			ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
    			ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
    			ctx.closePath();
    			break;
    		case 'rect':
    			if (!rotation) {
    				size = Math.SQRT1_2 * radius;
    				ctx.rect(x - size, y - size, 2 * size, 2 * size);
    				break;
    			}
    			rad += QUARTER_PI;
    			/* falls through */
    		case 'rectRot':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			ctx.closePath();
    			break;
    		case 'crossRot':
    			rad += QUARTER_PI;
    			/* falls through */
    		case 'cross':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.moveTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			break;
    		case 'star':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.moveTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			rad += QUARTER_PI;
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.moveTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			break;
    		case 'line':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			break;
    		case 'dash':
    			ctx.moveTo(x, y);
    			ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
    			break;
    		}

    		ctx.fill();
    		ctx.stroke();
    	},

    	/**
    	 * Returns true if the point is inside the rectangle
    	 * @param {object} point - The point to test
    	 * @param {object} area - The rectangle
    	 * @returns {boolean}
    	 * @private
    	 */
    	_isPointInArea: function(point, area) {
    		var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.

    		return point.x > area.left - epsilon && point.x < area.right + epsilon &&
    			point.y > area.top - epsilon && point.y < area.bottom + epsilon;
    	},

    	clipArea: function(ctx, area) {
    		ctx.save();
    		ctx.beginPath();
    		ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
    		ctx.clip();
    	},

    	unclipArea: function(ctx) {
    		ctx.restore();
    	},

    	lineTo: function(ctx, previous, target, flip) {
    		var stepped = target.steppedLine;
    		if (stepped) {
    			if (stepped === 'middle') {
    				var midpoint = (previous.x + target.x) / 2.0;
    				ctx.lineTo(midpoint, flip ? target.y : previous.y);
    				ctx.lineTo(midpoint, flip ? previous.y : target.y);
    			} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {
    				ctx.lineTo(previous.x, target.y);
    			} else {
    				ctx.lineTo(target.x, previous.y);
    			}
    			ctx.lineTo(target.x, target.y);
    			return;
    		}

    		if (!target.tension) {
    			ctx.lineTo(target.x, target.y);
    			return;
    		}

    		ctx.bezierCurveTo(
    			flip ? previous.controlPointPreviousX : previous.controlPointNextX,
    			flip ? previous.controlPointPreviousY : previous.controlPointNextY,
    			flip ? target.controlPointNextX : target.controlPointPreviousX,
    			flip ? target.controlPointNextY : target.controlPointPreviousY,
    			target.x,
    			target.y);
    	}
    };

    var helpers_canvas = exports$1;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
     * @namespace Chart.helpers.clear
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.clear = exports$1.clear;

    /**
     * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
     * @namespace Chart.helpers.drawRoundedRectangle
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.drawRoundedRectangle = function(ctx) {
    	ctx.beginPath();
    	exports$1.roundedRect.apply(exports$1, arguments);
    };

    var defaults = {
    	/**
    	 * @private
    	 */
    	_set: function(scope, values) {
    		return helpers_core.merge(this[scope] || (this[scope] = {}), values);
    	}
    };

    // TODO(v3): remove 'global' from namespace.  all default are global and
    // there's inconsistency around which options are under 'global'
    defaults._set('global', {
    	defaultColor: 'rgba(0,0,0,0.1)',
    	defaultFontColor: '#666',
    	defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
    	defaultFontSize: 12,
    	defaultFontStyle: 'normal',
    	defaultLineHeight: 1.2,
    	showLines: true
    });

    var core_defaults = defaults;

    var valueOrDefault = helpers_core.valueOrDefault;

    /**
     * Converts the given font object into a CSS font string.
     * @param {object} font - A font object.
     * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
     * @private
     */
    function toFontString(font) {
    	if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
    		return null;
    	}

    	return (font.style ? font.style + ' ' : '')
    		+ (font.weight ? font.weight + ' ' : '')
    		+ font.size + 'px '
    		+ font.family;
    }

    /**
     * @alias Chart.helpers.options
     * @namespace
     */
    var helpers_options = {
    	/**
    	 * Converts the given line height `value` in pixels for a specific font `size`.
    	 * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
    	 * @param {number} size - The font size (in pixels) used to resolve relative `value`.
    	 * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).
    	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
    	 * @since 2.7.0
    	 */
    	toLineHeight: function(value, size) {
    		var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
    		if (!matches || matches[1] === 'normal') {
    			return size * 1.2;
    		}

    		value = +matches[2];

    		switch (matches[3]) {
    		case 'px':
    			return value;
    		case '%':
    			value /= 100;
    			break;
    		}

    		return size * value;
    	},

    	/**
    	 * Converts the given value into a padding object with pre-computed width/height.
    	 * @param {number|object} value - If a number, set the value to all TRBL component,
    	 *  else, if and object, use defined properties and sets undefined ones to 0.
    	 * @returns {object} The padding values (top, right, bottom, left, width, height)
    	 * @since 2.7.0
    	 */
    	toPadding: function(value) {
    		var t, r, b, l;

    		if (helpers_core.isObject(value)) {
    			t = +value.top || 0;
    			r = +value.right || 0;
    			b = +value.bottom || 0;
    			l = +value.left || 0;
    		} else {
    			t = r = b = l = +value || 0;
    		}

    		return {
    			top: t,
    			right: r,
    			bottom: b,
    			left: l,
    			height: t + b,
    			width: l + r
    		};
    	},

    	/**
    	 * Parses font options and returns the font object.
    	 * @param {object} options - A object that contains font options to be parsed.
    	 * @return {object} The font object.
    	 * @todo Support font.* options and renamed to toFont().
    	 * @private
    	 */
    	_parseFont: function(options) {
    		var globalDefaults = core_defaults.global;
    		var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
    		var font = {
    			family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),
    			lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),
    			size: size,
    			style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),
    			weight: null,
    			string: ''
    		};

    		font.string = toFontString(font);
    		return font;
    	},

    	/**
    	 * Evaluates the given `inputs` sequentially and returns the first defined value.
    	 * @param {Array} inputs - An array of values, falling back to the last value.
    	 * @param {object} [context] - If defined and the current value is a function, the value
    	 * is called with `context` as first argument and the result becomes the new input.
    	 * @param {number} [index] - If defined and the current value is an array, the value
    	 * at `index` become the new input.
    	 * @param {object} [info] - object to return information about resolution in
    	 * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.
    	 * @since 2.7.0
    	 */
    	resolve: function(inputs, context, index, info) {
    		var cacheable = true;
    		var i, ilen, value;

    		for (i = 0, ilen = inputs.length; i < ilen; ++i) {
    			value = inputs[i];
    			if (value === undefined) {
    				continue;
    			}
    			if (context !== undefined && typeof value === 'function') {
    				value = value(context);
    				cacheable = false;
    			}
    			if (index !== undefined && helpers_core.isArray(value)) {
    				value = value[index];
    				cacheable = false;
    			}
    			if (value !== undefined) {
    				if (info && !cacheable) {
    					info.cacheable = false;
    				}
    				return value;
    			}
    		}
    	}
    };

    /**
     * @alias Chart.helpers.math
     * @namespace
     */
    var exports$2 = {
    	/**
    	 * Returns an array of factors sorted from 1 to sqrt(value)
    	 * @private
    	 */
    	_factorize: function(value) {
    		var result = [];
    		var sqrt = Math.sqrt(value);
    		var i;

    		for (i = 1; i < sqrt; i++) {
    			if (value % i === 0) {
    				result.push(i);
    				result.push(value / i);
    			}
    		}
    		if (sqrt === (sqrt | 0)) { // if value is a square number
    			result.push(sqrt);
    		}

    		result.sort(function(a, b) {
    			return a - b;
    		}).pop();
    		return result;
    	},

    	log10: Math.log10 || function(x) {
    		var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
    		// Check for whole powers of 10,
    		// which due to floating point rounding error should be corrected.
    		var powerOf10 = Math.round(exponent);
    		var isPowerOf10 = x === Math.pow(10, powerOf10);

    		return isPowerOf10 ? powerOf10 : exponent;
    	}
    };

    var helpers_math = exports$2;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.math.log10 instead.
     * @namespace Chart.helpers.log10
     * @deprecated since version 2.9.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.log10 = exports$2.log10;

    var getRtlAdapter = function(rectX, width) {
    	return {
    		x: function(x) {
    			return rectX + rectX + width - x;
    		},
    		setWidth: function(w) {
    			width = w;
    		},
    		textAlign: function(align) {
    			if (align === 'center') {
    				return align;
    			}
    			return align === 'right' ? 'left' : 'right';
    		},
    		xPlus: function(x, value) {
    			return x - value;
    		},
    		leftForLtr: function(x, itemWidth) {
    			return x - itemWidth;
    		},
    	};
    };

    var getLtrAdapter = function() {
    	return {
    		x: function(x) {
    			return x;
    		},
    		setWidth: function(w) { // eslint-disable-line no-unused-vars
    		},
    		textAlign: function(align) {
    			return align;
    		},
    		xPlus: function(x, value) {
    			return x + value;
    		},
    		leftForLtr: function(x, _itemWidth) { // eslint-disable-line no-unused-vars
    			return x;
    		},
    	};
    };

    var getAdapter = function(rtl, rectX, width) {
    	return rtl ? getRtlAdapter(rectX, width) : getLtrAdapter();
    };

    var overrideTextDirection = function(ctx, direction) {
    	var style, original;
    	if (direction === 'ltr' || direction === 'rtl') {
    		style = ctx.canvas.style;
    		original = [
    			style.getPropertyValue('direction'),
    			style.getPropertyPriority('direction'),
    		];

    		style.setProperty('direction', direction, 'important');
    		ctx.prevTextDirection = original;
    	}
    };

    var restoreTextDirection = function(ctx) {
    	var original = ctx.prevTextDirection;
    	if (original !== undefined) {
    		delete ctx.prevTextDirection;
    		ctx.canvas.style.setProperty('direction', original[0], original[1]);
    	}
    };

    var helpers_rtl = {
    	getRtlAdapter: getAdapter,
    	overrideTextDirection: overrideTextDirection,
    	restoreTextDirection: restoreTextDirection,
    };

    var helpers$1 = helpers_core;
    var easing = helpers_easing;
    var canvas = helpers_canvas;
    var options = helpers_options;
    var math = helpers_math;
    var rtl = helpers_rtl;
    helpers$1.easing = easing;
    helpers$1.canvas = canvas;
    helpers$1.options = options;
    helpers$1.math = math;
    helpers$1.rtl = rtl;

    function interpolate(start, view, model, ease) {
    	var keys = Object.keys(model);
    	var i, ilen, key, actual, origin, target, type, c0, c1;

    	for (i = 0, ilen = keys.length; i < ilen; ++i) {
    		key = keys[i];

    		target = model[key];

    		// if a value is added to the model after pivot() has been called, the view
    		// doesn't contain it, so let's initialize the view to the target value.
    		if (!view.hasOwnProperty(key)) {
    			view[key] = target;
    		}

    		actual = view[key];

    		if (actual === target || key[0] === '_') {
    			continue;
    		}

    		if (!start.hasOwnProperty(key)) {
    			start[key] = actual;
    		}

    		origin = start[key];

    		type = typeof target;

    		if (type === typeof origin) {
    			if (type === 'string') {
    				c0 = chartjsColor(origin);
    				if (c0.valid) {
    					c1 = chartjsColor(target);
    					if (c1.valid) {
    						view[key] = c1.mix(c0, ease).rgbString();
    						continue;
    					}
    				}
    			} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
    				view[key] = origin + (target - origin) * ease;
    				continue;
    			}
    		}

    		view[key] = target;
    	}
    }

    var Element = function(configuration) {
    	helpers$1.extend(this, configuration);
    	this.initialize.apply(this, arguments);
    };

    helpers$1.extend(Element.prototype, {
    	_type: undefined,

    	initialize: function() {
    		this.hidden = false;
    	},

    	pivot: function() {
    		var me = this;
    		if (!me._view) {
    			me._view = helpers$1.extend({}, me._model);
    		}
    		me._start = {};
    		return me;
    	},

    	transition: function(ease) {
    		var me = this;
    		var model = me._model;
    		var start = me._start;
    		var view = me._view;

    		// No animation -> No Transition
    		if (!model || ease === 1) {
    			me._view = helpers$1.extend({}, model);
    			me._start = null;
    			return me;
    		}

    		if (!view) {
    			view = me._view = {};
    		}

    		if (!start) {
    			start = me._start = {};
    		}

    		interpolate(start, view, model, ease);

    		return me;
    	},

    	tooltipPosition: function() {
    		return {
    			x: this._model.x,
    			y: this._model.y
    		};
    	},

    	hasValue: function() {
    		return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
    	}
    });

    Element.extend = helpers$1.inherits;

    var core_element = Element;

    var exports$3 = core_element.extend({
    	chart: null, // the animation associated chart instance
    	currentStep: 0, // the current animation step
    	numSteps: 60, // default number of steps
    	easing: '', // the easing to use for this animation
    	render: null, // render function used by the animation service

    	onAnimationProgress: null, // user specified callback to fire on each step of the animation
    	onAnimationComplete: null, // user specified callback to fire when the animation finishes
    });

    var core_animation = exports$3;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.Animation instead
     * @prop Chart.Animation#animationObject
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     */
    Object.defineProperty(exports$3.prototype, 'animationObject', {
    	get: function() {
    		return this;
    	}
    });

    /**
     * Provided for backward compatibility, use Chart.Animation#chart instead
     * @prop Chart.Animation#chartInstance
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     */
    Object.defineProperty(exports$3.prototype, 'chartInstance', {
    	get: function() {
    		return this.chart;
    	},
    	set: function(value) {
    		this.chart = value;
    	}
    });

    core_defaults._set('global', {
    	animation: {
    		duration: 1000,
    		easing: 'easeOutQuart',
    		onProgress: helpers$1.noop,
    		onComplete: helpers$1.noop
    	}
    });

    var core_animations = {
    	animations: [],
    	request: null,

    	/**
    	 * @param {Chart} chart - The chart to animate.
    	 * @param {Chart.Animation} animation - The animation that we will animate.
    	 * @param {number} duration - The animation duration in ms.
    	 * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
    	 */
    	addAnimation: function(chart, animation, duration, lazy) {
    		var animations = this.animations;
    		var i, ilen;

    		animation.chart = chart;
    		animation.startTime = Date.now();
    		animation.duration = duration;

    		if (!lazy) {
    			chart.animating = true;
    		}

    		for (i = 0, ilen = animations.length; i < ilen; ++i) {
    			if (animations[i].chart === chart) {
    				animations[i] = animation;
    				return;
    			}
    		}

    		animations.push(animation);

    		// If there are no animations queued, manually kickstart a digest, for lack of a better word
    		if (animations.length === 1) {
    			this.requestAnimationFrame();
    		}
    	},

    	cancelAnimation: function(chart) {
    		var index = helpers$1.findIndex(this.animations, function(animation) {
    			return animation.chart === chart;
    		});

    		if (index !== -1) {
    			this.animations.splice(index, 1);
    			chart.animating = false;
    		}
    	},

    	requestAnimationFrame: function() {
    		var me = this;
    		if (me.request === null) {
    			// Skip animation frame requests until the active one is executed.
    			// This can happen when processing mouse events, e.g. 'mousemove'
    			// and 'mouseout' events will trigger multiple renders.
    			me.request = helpers$1.requestAnimFrame.call(window, function() {
    				me.request = null;
    				me.startDigest();
    			});
    		}
    	},

    	/**
    	 * @private
    	 */
    	startDigest: function() {
    		var me = this;

    		me.advance();

    		// Do we have more stuff to animate?
    		if (me.animations.length > 0) {
    			me.requestAnimationFrame();
    		}
    	},

    	/**
    	 * @private
    	 */
    	advance: function() {
    		var animations = this.animations;
    		var animation, chart, numSteps, nextStep;
    		var i = 0;

    		// 1 animation per chart, so we are looping charts here
    		while (i < animations.length) {
    			animation = animations[i];
    			chart = animation.chart;
    			numSteps = animation.numSteps;

    			// Make sure that currentStep starts at 1
    			// https://github.com/chartjs/Chart.js/issues/6104
    			nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
    			animation.currentStep = Math.min(nextStep, numSteps);

    			helpers$1.callback(animation.render, [chart, animation], chart);
    			helpers$1.callback(animation.onAnimationProgress, [animation], chart);

    			if (animation.currentStep >= numSteps) {
    				helpers$1.callback(animation.onAnimationComplete, [animation], chart);
    				chart.animating = false;
    				animations.splice(i, 1);
    			} else {
    				++i;
    			}
    		}
    	}
    };

    var resolve = helpers$1.options.resolve;

    var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];

    /**
     * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
     * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
     * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
     */
    function listenArrayEvents(array, listener) {
    	if (array._chartjs) {
    		array._chartjs.listeners.push(listener);
    		return;
    	}

    	Object.defineProperty(array, '_chartjs', {
    		configurable: true,
    		enumerable: false,
    		value: {
    			listeners: [listener]
    		}
    	});

    	arrayEvents.forEach(function(key) {
    		var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
    		var base = array[key];

    		Object.defineProperty(array, key, {
    			configurable: true,
    			enumerable: false,
    			value: function() {
    				var args = Array.prototype.slice.call(arguments);
    				var res = base.apply(this, args);

    				helpers$1.each(array._chartjs.listeners, function(object) {
    					if (typeof object[method] === 'function') {
    						object[method].apply(object, args);
    					}
    				});

    				return res;
    			}
    		});
    	});
    }

    /**
     * Removes the given array event listener and cleanup extra attached properties (such as
     * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
     */
    function unlistenArrayEvents(array, listener) {
    	var stub = array._chartjs;
    	if (!stub) {
    		return;
    	}

    	var listeners = stub.listeners;
    	var index = listeners.indexOf(listener);
    	if (index !== -1) {
    		listeners.splice(index, 1);
    	}

    	if (listeners.length > 0) {
    		return;
    	}

    	arrayEvents.forEach(function(key) {
    		delete array[key];
    	});

    	delete array._chartjs;
    }

    // Base class for all dataset controllers (line, bar, etc)
    var DatasetController = function(chart, datasetIndex) {
    	this.initialize(chart, datasetIndex);
    };

    helpers$1.extend(DatasetController.prototype, {

    	/**
    	 * Element type used to generate a meta dataset (e.g. Chart.element.Line).
    	 * @type {Chart.core.element}
    	 */
    	datasetElementType: null,

    	/**
    	 * Element type used to generate a meta data (e.g. Chart.element.Point).
    	 * @type {Chart.core.element}
    	 */
    	dataElementType: null,

    	/**
    	 * Dataset element option keys to be resolved in _resolveDatasetElementOptions.
    	 * A derived controller may override this to resolve controller-specific options.
    	 * The keys defined here are for backward compatibility for legend styles.
    	 * @private
    	 */
    	_datasetElementOptions: [
    		'backgroundColor',
    		'borderCapStyle',
    		'borderColor',
    		'borderDash',
    		'borderDashOffset',
    		'borderJoinStyle',
    		'borderWidth'
    	],

    	/**
    	 * Data element option keys to be resolved in _resolveDataElementOptions.
    	 * A derived controller may override this to resolve controller-specific options.
    	 * The keys defined here are for backward compatibility for legend styles.
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderWidth',
    		'pointStyle'
    	],

    	initialize: function(chart, datasetIndex) {
    		var me = this;
    		me.chart = chart;
    		me.index = datasetIndex;
    		me.linkScales();
    		me.addElements();
    		me._type = me.getMeta().type;
    	},

    	updateIndex: function(datasetIndex) {
    		this.index = datasetIndex;
    	},

    	linkScales: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var chart = me.chart;
    		var scales = chart.scales;
    		var dataset = me.getDataset();
    		var scalesOpts = chart.options.scales;

    		if (meta.xAxisID === null || !(meta.xAxisID in scales) || dataset.xAxisID) {
    			meta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;
    		}
    		if (meta.yAxisID === null || !(meta.yAxisID in scales) || dataset.yAxisID) {
    			meta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;
    		}
    	},

    	getDataset: function() {
    		return this.chart.data.datasets[this.index];
    	},

    	getMeta: function() {
    		return this.chart.getDatasetMeta(this.index);
    	},

    	getScaleForId: function(scaleID) {
    		return this.chart.scales[scaleID];
    	},

    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.getMeta().yAxisID;
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.getMeta().xAxisID;
    	},

    	/**
    	 * @private
    	 */
    	_getValueScale: function() {
    		return this.getScaleForId(this._getValueScaleId());
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScale: function() {
    		return this.getScaleForId(this._getIndexScaleId());
    	},

    	reset: function() {
    		this._update(true);
    	},

    	/**
    	 * @private
    	 */
    	destroy: function() {
    		if (this._data) {
    			unlistenArrayEvents(this._data, this);
    		}
    	},

    	createMetaDataset: function() {
    		var me = this;
    		var type = me.datasetElementType;
    		return type && new type({
    			_chart: me.chart,
    			_datasetIndex: me.index
    		});
    	},

    	createMetaData: function(index) {
    		var me = this;
    		var type = me.dataElementType;
    		return type && new type({
    			_chart: me.chart,
    			_datasetIndex: me.index,
    			_index: index
    		});
    	},

    	addElements: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var data = me.getDataset().data || [];
    		var metaData = meta.data;
    		var i, ilen;

    		for (i = 0, ilen = data.length; i < ilen; ++i) {
    			metaData[i] = metaData[i] || me.createMetaData(i);
    		}

    		meta.dataset = meta.dataset || me.createMetaDataset();
    	},

    	addElementAndReset: function(index) {
    		var element = this.createMetaData(index);
    		this.getMeta().data.splice(index, 0, element);
    		this.updateElement(element, index, true);
    	},

    	buildOrUpdateElements: function() {
    		var me = this;
    		var dataset = me.getDataset();
    		var data = dataset.data || (dataset.data = []);

    		// In order to correctly handle data addition/deletion animation (an thus simulate
    		// real-time charts), we need to monitor these data modifications and synchronize
    		// the internal meta data accordingly.
    		if (me._data !== data) {
    			if (me._data) {
    				// This case happens when the user replaced the data array instance.
    				unlistenArrayEvents(me._data, me);
    			}

    			if (data && Object.isExtensible(data)) {
    				listenArrayEvents(data, me);
    			}
    			me._data = data;
    		}

    		// Re-sync meta data in case the user replaced the data array or if we missed
    		// any updates and so make sure that we handle number of datapoints changing.
    		me.resyncElements();
    	},

    	/**
    	 * Returns the merged user-supplied and default dataset-level options
    	 * @private
    	 */
    	_configure: function() {
    		var me = this;
    		me._config = helpers$1.merge({}, [
    			me.chart.options.datasets[me._type],
    			me.getDataset(),
    		], {
    			merger: function(key, target, source) {
    				if (key !== '_meta' && key !== 'data') {
    					helpers$1._merger(key, target, source);
    				}
    			}
    		});
    	},

    	_update: function(reset) {
    		var me = this;
    		me._configure();
    		me._cachedDataOpts = null;
    		me.update(reset);
    	},

    	update: helpers$1.noop,

    	transition: function(easingValue) {
    		var meta = this.getMeta();
    		var elements = meta.data || [];
    		var ilen = elements.length;
    		var i = 0;

    		for (; i < ilen; ++i) {
    			elements[i].transition(easingValue);
    		}

    		if (meta.dataset) {
    			meta.dataset.transition(easingValue);
    		}
    	},

    	draw: function() {
    		var meta = this.getMeta();
    		var elements = meta.data || [];
    		var ilen = elements.length;
    		var i = 0;

    		if (meta.dataset) {
    			meta.dataset.draw();
    		}

    		for (; i < ilen; ++i) {
    			elements[i].draw();
    		}
    	},

    	/**
    	 * Returns a set of predefined style properties that should be used to represent the dataset
    	 * or the data if the index is specified
    	 * @param {number} index - data index
    	 * @return {IStyleInterface} style object
    	 */
    	getStyle: function(index) {
    		var me = this;
    		var meta = me.getMeta();
    		var dataset = meta.dataset;
    		var style;

    		me._configure();
    		if (dataset && index === undefined) {
    			style = me._resolveDatasetElementOptions(dataset || {});
    		} else {
    			index = index || 0;
    			style = me._resolveDataElementOptions(meta.data[index] || {}, index);
    		}

    		if (style.fill === false || style.fill === null) {
    			style.backgroundColor = style.borderColor;
    		}

    		return style;
    	},

    	/**
    	 * @private
    	 */
    	_resolveDatasetElementOptions: function(element, hover) {
    		var me = this;
    		var chart = me.chart;
    		var datasetOpts = me._config;
    		var custom = element.custom || {};
    		var options = chart.options.elements[me.datasetElementType.prototype._type] || {};
    		var elementOptions = me._datasetElementOptions;
    		var values = {};
    		var i, ilen, key, readKey;

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataset: me.getDataset(),
    			datasetIndex: me.index,
    			hover: hover
    		};

    		for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
    			key = elementOptions[i];
    			readKey = hover ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;
    			values[key] = resolve([
    				custom[readKey],
    				datasetOpts[readKey],
    				options[readKey]
    			], context);
    		}

    		return values;
    	},

    	/**
    	 * @private
    	 */
    	_resolveDataElementOptions: function(element, index) {
    		var me = this;
    		var custom = element && element.custom;
    		var cached = me._cachedDataOpts;
    		if (cached && !custom) {
    			return cached;
    		}
    		var chart = me.chart;
    		var datasetOpts = me._config;
    		var options = chart.options.elements[me.dataElementType.prototype._type] || {};
    		var elementOptions = me._dataElementOptions;
    		var values = {};

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataIndex: index,
    			dataset: me.getDataset(),
    			datasetIndex: me.index
    		};

    		// `resolve` sets cacheable to `false` if any option is indexed or scripted
    		var info = {cacheable: !custom};

    		var keys, i, ilen, key;

    		custom = custom || {};

    		if (helpers$1.isArray(elementOptions)) {
    			for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
    				key = elementOptions[i];
    				values[key] = resolve([
    					custom[key],
    					datasetOpts[key],
    					options[key]
    				], context, index, info);
    			}
    		} else {
    			keys = Object.keys(elementOptions);
    			for (i = 0, ilen = keys.length; i < ilen; ++i) {
    				key = keys[i];
    				values[key] = resolve([
    					custom[key],
    					datasetOpts[elementOptions[key]],
    					datasetOpts[key],
    					options[key]
    				], context, index, info);
    			}
    		}

    		if (info.cacheable) {
    			me._cachedDataOpts = Object.freeze(values);
    		}

    		return values;
    	},

    	removeHoverStyle: function(element) {
    		helpers$1.merge(element._model, element.$previousStyle || {});
    		delete element.$previousStyle;
    	},

    	setHoverStyle: function(element) {
    		var dataset = this.chart.data.datasets[element._datasetIndex];
    		var index = element._index;
    		var custom = element.custom || {};
    		var model = element._model;
    		var getHoverColor = helpers$1.getHoverColor;

    		element.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth
    		};

    		model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);
    		model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);
    		model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);
    	},

    	/**
    	 * @private
    	 */
    	_removeDatasetHoverStyle: function() {
    		var element = this.getMeta().dataset;

    		if (element) {
    			this.removeHoverStyle(element);
    		}
    	},

    	/**
    	 * @private
    	 */
    	_setDatasetHoverStyle: function() {
    		var element = this.getMeta().dataset;
    		var prev = {};
    		var i, ilen, key, keys, hoverOptions, model;

    		if (!element) {
    			return;
    		}

    		model = element._model;
    		hoverOptions = this._resolveDatasetElementOptions(element, true);

    		keys = Object.keys(hoverOptions);
    		for (i = 0, ilen = keys.length; i < ilen; ++i) {
    			key = keys[i];
    			prev[key] = model[key];
    			model[key] = hoverOptions[key];
    		}

    		element.$previousStyle = prev;
    	},

    	/**
    	 * @private
    	 */
    	resyncElements: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var data = me.getDataset().data;
    		var numMeta = meta.data.length;
    		var numData = data.length;

    		if (numData < numMeta) {
    			meta.data.splice(numData, numMeta - numData);
    		} else if (numData > numMeta) {
    			me.insertElements(numMeta, numData - numMeta);
    		}
    	},

    	/**
    	 * @private
    	 */
    	insertElements: function(start, count) {
    		for (var i = 0; i < count; ++i) {
    			this.addElementAndReset(start + i);
    		}
    	},

    	/**
    	 * @private
    	 */
    	onDataPush: function() {
    		var count = arguments.length;
    		this.insertElements(this.getDataset().data.length - count, count);
    	},

    	/**
    	 * @private
    	 */
    	onDataPop: function() {
    		this.getMeta().data.pop();
    	},

    	/**
    	 * @private
    	 */
    	onDataShift: function() {
    		this.getMeta().data.shift();
    	},

    	/**
    	 * @private
    	 */
    	onDataSplice: function(start, count) {
    		this.getMeta().data.splice(start, count);
    		this.insertElements(start, arguments.length - 2);
    	},

    	/**
    	 * @private
    	 */
    	onDataUnshift: function() {
    		this.insertElements(0, arguments.length);
    	}
    });

    DatasetController.extend = helpers$1.inherits;

    var core_datasetController = DatasetController;

    var TAU = Math.PI * 2;

    core_defaults._set('global', {
    	elements: {
    		arc: {
    			backgroundColor: core_defaults.global.defaultColor,
    			borderColor: '#fff',
    			borderWidth: 2,
    			borderAlign: 'center'
    		}
    	}
    });

    function clipArc(ctx, arc) {
    	var startAngle = arc.startAngle;
    	var endAngle = arc.endAngle;
    	var pixelMargin = arc.pixelMargin;
    	var angleMargin = pixelMargin / arc.outerRadius;
    	var x = arc.x;
    	var y = arc.y;

    	// Draw an inner border by cliping the arc and drawing a double-width border
    	// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
    	ctx.beginPath();
    	ctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);
    	if (arc.innerRadius > pixelMargin) {
    		angleMargin = pixelMargin / arc.innerRadius;
    		ctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
    	} else {
    		ctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
    	}
    	ctx.closePath();
    	ctx.clip();
    }

    function drawFullCircleBorders(ctx, vm, arc, inner) {
    	var endAngle = arc.endAngle;
    	var i;

    	if (inner) {
    		arc.endAngle = arc.startAngle + TAU;
    		clipArc(ctx, arc);
    		arc.endAngle = endAngle;
    		if (arc.endAngle === arc.startAngle && arc.fullCircles) {
    			arc.endAngle += TAU;
    			arc.fullCircles--;
    		}
    	}

    	ctx.beginPath();
    	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);
    	for (i = 0; i < arc.fullCircles; ++i) {
    		ctx.stroke();
    	}

    	ctx.beginPath();
    	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);
    	for (i = 0; i < arc.fullCircles; ++i) {
    		ctx.stroke();
    	}
    }

    function drawBorder(ctx, vm, arc) {
    	var inner = vm.borderAlign === 'inner';

    	if (inner) {
    		ctx.lineWidth = vm.borderWidth * 2;
    		ctx.lineJoin = 'round';
    	} else {
    		ctx.lineWidth = vm.borderWidth;
    		ctx.lineJoin = 'bevel';
    	}

    	if (arc.fullCircles) {
    		drawFullCircleBorders(ctx, vm, arc, inner);
    	}

    	if (inner) {
    		clipArc(ctx, arc);
    	}

    	ctx.beginPath();
    	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
    	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
    	ctx.closePath();
    	ctx.stroke();
    }

    var element_arc = core_element.extend({
    	_type: 'arc',

    	inLabelRange: function(mouseX) {
    		var vm = this._view;

    		if (vm) {
    			return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
    		}
    		return false;
    	},

    	inRange: function(chartX, chartY) {
    		var vm = this._view;

    		if (vm) {
    			var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});
    			var angle = pointRelativePosition.angle;
    			var distance = pointRelativePosition.distance;

    			// Sanitise angle range
    			var startAngle = vm.startAngle;
    			var endAngle = vm.endAngle;
    			while (endAngle < startAngle) {
    				endAngle += TAU;
    			}
    			while (angle > endAngle) {
    				angle -= TAU;
    			}
    			while (angle < startAngle) {
    				angle += TAU;
    			}

    			// Check if within the range of the open/close angle
    			var betweenAngles = (angle >= startAngle && angle <= endAngle);
    			var withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);

    			return (betweenAngles && withinRadius);
    		}
    		return false;
    	},

    	getCenterPoint: function() {
    		var vm = this._view;
    		var halfAngle = (vm.startAngle + vm.endAngle) / 2;
    		var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
    		return {
    			x: vm.x + Math.cos(halfAngle) * halfRadius,
    			y: vm.y + Math.sin(halfAngle) * halfRadius
    		};
    	},

    	getArea: function() {
    		var vm = this._view;
    		return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
    	},

    	tooltipPosition: function() {
    		var vm = this._view;
    		var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);
    		var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;

    		return {
    			x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
    			y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
    		};
    	},

    	draw: function() {
    		var ctx = this._chart.ctx;
    		var vm = this._view;
    		var pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;
    		var arc = {
    			x: vm.x,
    			y: vm.y,
    			innerRadius: vm.innerRadius,
    			outerRadius: Math.max(vm.outerRadius - pixelMargin, 0),
    			pixelMargin: pixelMargin,
    			startAngle: vm.startAngle,
    			endAngle: vm.endAngle,
    			fullCircles: Math.floor(vm.circumference / TAU)
    		};
    		var i;

    		ctx.save();

    		ctx.fillStyle = vm.backgroundColor;
    		ctx.strokeStyle = vm.borderColor;

    		if (arc.fullCircles) {
    			arc.endAngle = arc.startAngle + TAU;
    			ctx.beginPath();
    			ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
    			ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
    			ctx.closePath();
    			for (i = 0; i < arc.fullCircles; ++i) {
    				ctx.fill();
    			}
    			arc.endAngle = arc.startAngle + vm.circumference % TAU;
    		}

    		ctx.beginPath();
    		ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
    		ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
    		ctx.closePath();
    		ctx.fill();

    		if (vm.borderWidth) {
    			drawBorder(ctx, vm, arc);
    		}

    		ctx.restore();
    	}
    });

    var valueOrDefault$1 = helpers$1.valueOrDefault;

    var defaultColor = core_defaults.global.defaultColor;

    core_defaults._set('global', {
    	elements: {
    		line: {
    			tension: 0.4,
    			backgroundColor: defaultColor,
    			borderWidth: 3,
    			borderColor: defaultColor,
    			borderCapStyle: 'butt',
    			borderDash: [],
    			borderDashOffset: 0.0,
    			borderJoinStyle: 'miter',
    			capBezierPoints: true,
    			fill: true, // do we fill in the area between the line and its base axis
    		}
    	}
    });

    var element_line = core_element.extend({
    	_type: 'line',

    	draw: function() {
    		var me = this;
    		var vm = me._view;
    		var ctx = me._chart.ctx;
    		var spanGaps = vm.spanGaps;
    		var points = me._children.slice(); // clone array
    		var globalDefaults = core_defaults.global;
    		var globalOptionLineElements = globalDefaults.elements.line;
    		var lastDrawnIndex = -1;
    		var closePath = me._loop;
    		var index, previous, currentVM;

    		if (!points.length) {
    			return;
    		}

    		if (me._loop) {
    			for (index = 0; index < points.length; ++index) {
    				previous = helpers$1.previousItem(points, index);
    				// If the line has an open path, shift the point array
    				if (!points[index]._view.skip && previous._view.skip) {
    					points = points.slice(index).concat(points.slice(0, index));
    					closePath = spanGaps;
    					break;
    				}
    			}
    			// If the line has a close path, add the first point again
    			if (closePath) {
    				points.push(points[0]);
    			}
    		}

    		ctx.save();

    		// Stroke Line Options
    		ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;

    		// IE 9 and 10 do not support line dash
    		if (ctx.setLineDash) {
    			ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
    		}

    		ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
    		ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
    		ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
    		ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;

    		// Stroke Line
    		ctx.beginPath();

    		// First point moves to it's starting position no matter what
    		currentVM = points[0]._view;
    		if (!currentVM.skip) {
    			ctx.moveTo(currentVM.x, currentVM.y);
    			lastDrawnIndex = 0;
    		}

    		for (index = 1; index < points.length; ++index) {
    			currentVM = points[index]._view;
    			previous = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];

    			if (!currentVM.skip) {
    				if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
    					// There was a gap and this is the first point after the gap
    					ctx.moveTo(currentVM.x, currentVM.y);
    				} else {
    					// Line to next point
    					helpers$1.canvas.lineTo(ctx, previous._view, currentVM);
    				}
    				lastDrawnIndex = index;
    			}
    		}

    		if (closePath) {
    			ctx.closePath();
    		}

    		ctx.stroke();
    		ctx.restore();
    	}
    });

    var valueOrDefault$2 = helpers$1.valueOrDefault;

    var defaultColor$1 = core_defaults.global.defaultColor;

    core_defaults._set('global', {
    	elements: {
    		point: {
    			radius: 3,
    			pointStyle: 'circle',
    			backgroundColor: defaultColor$1,
    			borderColor: defaultColor$1,
    			borderWidth: 1,
    			// Hover
    			hitRadius: 1,
    			hoverRadius: 4,
    			hoverBorderWidth: 1
    		}
    	}
    });

    function xRange(mouseX) {
    	var vm = this._view;
    	return vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;
    }

    function yRange(mouseY) {
    	var vm = this._view;
    	return vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;
    }

    var element_point = core_element.extend({
    	_type: 'point',

    	inRange: function(mouseX, mouseY) {
    		var vm = this._view;
    		return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
    	},

    	inLabelRange: xRange,
    	inXRange: xRange,
    	inYRange: yRange,

    	getCenterPoint: function() {
    		var vm = this._view;
    		return {
    			x: vm.x,
    			y: vm.y
    		};
    	},

    	getArea: function() {
    		return Math.PI * Math.pow(this._view.radius, 2);
    	},

    	tooltipPosition: function() {
    		var vm = this._view;
    		return {
    			x: vm.x,
    			y: vm.y,
    			padding: vm.radius + vm.borderWidth
    		};
    	},

    	draw: function(chartArea) {
    		var vm = this._view;
    		var ctx = this._chart.ctx;
    		var pointStyle = vm.pointStyle;
    		var rotation = vm.rotation;
    		var radius = vm.radius;
    		var x = vm.x;
    		var y = vm.y;
    		var globalDefaults = core_defaults.global;
    		var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow

    		if (vm.skip) {
    			return;
    		}

    		// Clipping for Points.
    		if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {
    			ctx.strokeStyle = vm.borderColor || defaultColor;
    			ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
    			ctx.fillStyle = vm.backgroundColor || defaultColor;
    			helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
    		}
    	}
    });

    var defaultColor$2 = core_defaults.global.defaultColor;

    core_defaults._set('global', {
    	elements: {
    		rectangle: {
    			backgroundColor: defaultColor$2,
    			borderColor: defaultColor$2,
    			borderSkipped: 'bottom',
    			borderWidth: 0
    		}
    	}
    });

    function isVertical(vm) {
    	return vm && vm.width !== undefined;
    }

    /**
     * Helper function to get the bounds of the bar regardless of the orientation
     * @param bar {Chart.Element.Rectangle} the bar
     * @return {Bounds} bounds of the bar
     * @private
     */
    function getBarBounds(vm) {
    	var x1, x2, y1, y2, half;

    	if (isVertical(vm)) {
    		half = vm.width / 2;
    		x1 = vm.x - half;
    		x2 = vm.x + half;
    		y1 = Math.min(vm.y, vm.base);
    		y2 = Math.max(vm.y, vm.base);
    	} else {
    		half = vm.height / 2;
    		x1 = Math.min(vm.x, vm.base);
    		x2 = Math.max(vm.x, vm.base);
    		y1 = vm.y - half;
    		y2 = vm.y + half;
    	}

    	return {
    		left: x1,
    		top: y1,
    		right: x2,
    		bottom: y2
    	};
    }

    function swap(orig, v1, v2) {
    	return orig === v1 ? v2 : orig === v2 ? v1 : orig;
    }

    function parseBorderSkipped(vm) {
    	var edge = vm.borderSkipped;
    	var res = {};

    	if (!edge) {
    		return res;
    	}

    	if (vm.horizontal) {
    		if (vm.base > vm.x) {
    			edge = swap(edge, 'left', 'right');
    		}
    	} else if (vm.base < vm.y) {
    		edge = swap(edge, 'bottom', 'top');
    	}

    	res[edge] = true;
    	return res;
    }

    function parseBorderWidth(vm, maxW, maxH) {
    	var value = vm.borderWidth;
    	var skip = parseBorderSkipped(vm);
    	var t, r, b, l;

    	if (helpers$1.isObject(value)) {
    		t = +value.top || 0;
    		r = +value.right || 0;
    		b = +value.bottom || 0;
    		l = +value.left || 0;
    	} else {
    		t = r = b = l = +value || 0;
    	}

    	return {
    		t: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,
    		r: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,
    		b: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,
    		l: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l
    	};
    }

    function boundingRects(vm) {
    	var bounds = getBarBounds(vm);
    	var width = bounds.right - bounds.left;
    	var height = bounds.bottom - bounds.top;
    	var border = parseBorderWidth(vm, width / 2, height / 2);

    	return {
    		outer: {
    			x: bounds.left,
    			y: bounds.top,
    			w: width,
    			h: height
    		},
    		inner: {
    			x: bounds.left + border.l,
    			y: bounds.top + border.t,
    			w: width - border.l - border.r,
    			h: height - border.t - border.b
    		}
    	};
    }

    function inRange(vm, x, y) {
    	var skipX = x === null;
    	var skipY = y === null;
    	var bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);

    	return bounds
    		&& (skipX || x >= bounds.left && x <= bounds.right)
    		&& (skipY || y >= bounds.top && y <= bounds.bottom);
    }

    var element_rectangle = core_element.extend({
    	_type: 'rectangle',

    	draw: function() {
    		var ctx = this._chart.ctx;
    		var vm = this._view;
    		var rects = boundingRects(vm);
    		var outer = rects.outer;
    		var inner = rects.inner;

    		ctx.fillStyle = vm.backgroundColor;
    		ctx.fillRect(outer.x, outer.y, outer.w, outer.h);

    		if (outer.w === inner.w && outer.h === inner.h) {
    			return;
    		}

    		ctx.save();
    		ctx.beginPath();
    		ctx.rect(outer.x, outer.y, outer.w, outer.h);
    		ctx.clip();
    		ctx.fillStyle = vm.borderColor;
    		ctx.rect(inner.x, inner.y, inner.w, inner.h);
    		ctx.fill('evenodd');
    		ctx.restore();
    	},

    	height: function() {
    		var vm = this._view;
    		return vm.base - vm.y;
    	},

    	inRange: function(mouseX, mouseY) {
    		return inRange(this._view, mouseX, mouseY);
    	},

    	inLabelRange: function(mouseX, mouseY) {
    		var vm = this._view;
    		return isVertical(vm)
    			? inRange(vm, mouseX, null)
    			: inRange(vm, null, mouseY);
    	},

    	inXRange: function(mouseX) {
    		return inRange(this._view, mouseX, null);
    	},

    	inYRange: function(mouseY) {
    		return inRange(this._view, null, mouseY);
    	},

    	getCenterPoint: function() {
    		var vm = this._view;
    		var x, y;
    		if (isVertical(vm)) {
    			x = vm.x;
    			y = (vm.y + vm.base) / 2;
    		} else {
    			x = (vm.x + vm.base) / 2;
    			y = vm.y;
    		}

    		return {x: x, y: y};
    	},

    	getArea: function() {
    		var vm = this._view;

    		return isVertical(vm)
    			? vm.width * Math.abs(vm.y - vm.base)
    			: vm.height * Math.abs(vm.x - vm.base);
    	},

    	tooltipPosition: function() {
    		var vm = this._view;
    		return {
    			x: vm.x,
    			y: vm.y
    		};
    	}
    });

    var elements = {};
    var Arc = element_arc;
    var Line = element_line;
    var Point = element_point;
    var Rectangle = element_rectangle;
    elements.Arc = Arc;
    elements.Line = Line;
    elements.Point = Point;
    elements.Rectangle = Rectangle;

    var deprecated = helpers$1._deprecated;
    var valueOrDefault$3 = helpers$1.valueOrDefault;

    core_defaults._set('bar', {
    	hover: {
    		mode: 'label'
    	},

    	scales: {
    		xAxes: [{
    			type: 'category',
    			offset: true,
    			gridLines: {
    				offsetGridLines: true
    			}
    		}],

    		yAxes: [{
    			type: 'linear'
    		}]
    	}
    });

    core_defaults._set('global', {
    	datasets: {
    		bar: {
    			categoryPercentage: 0.8,
    			barPercentage: 0.9
    		}
    	}
    });

    /**
     * Computes the "optimal" sample size to maintain bars equally sized while preventing overlap.
     * @private
     */
    function computeMinSampleSize(scale, pixels) {
    	var min = scale._length;
    	var prev, curr, i, ilen;

    	for (i = 1, ilen = pixels.length; i < ilen; ++i) {
    		min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));
    	}

    	for (i = 0, ilen = scale.getTicks().length; i < ilen; ++i) {
    		curr = scale.getPixelForTick(i);
    		min = i > 0 ? Math.min(min, Math.abs(curr - prev)) : min;
    		prev = curr;
    	}

    	return min;
    }

    /**
     * Computes an "ideal" category based on the absolute bar thickness or, if undefined or null,
     * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This
     * mode currently always generates bars equally sized (until we introduce scriptable options?).
     * @private
     */
    function computeFitCategoryTraits(index, ruler, options) {
    	var thickness = options.barThickness;
    	var count = ruler.stackCount;
    	var curr = ruler.pixels[index];
    	var min = helpers$1.isNullOrUndef(thickness)
    		? computeMinSampleSize(ruler.scale, ruler.pixels)
    		: -1;
    	var size, ratio;

    	if (helpers$1.isNullOrUndef(thickness)) {
    		size = min * options.categoryPercentage;
    		ratio = options.barPercentage;
    	} else {
    		// When bar thickness is enforced, category and bar percentages are ignored.
    		// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')
    		// and deprecate barPercentage since this value is ignored when thickness is absolute.
    		size = thickness * count;
    		ratio = 1;
    	}

    	return {
    		chunk: size / count,
    		ratio: ratio,
    		start: curr - (size / 2)
    	};
    }

    /**
     * Computes an "optimal" category that globally arranges bars side by side (no gap when
     * percentage options are 1), based on the previous and following categories. This mode
     * generates bars with different widths when data are not evenly spaced.
     * @private
     */
    function computeFlexCategoryTraits(index, ruler, options) {
    	var pixels = ruler.pixels;
    	var curr = pixels[index];
    	var prev = index > 0 ? pixels[index - 1] : null;
    	var next = index < pixels.length - 1 ? pixels[index + 1] : null;
    	var percent = options.categoryPercentage;
    	var start, size;

    	if (prev === null) {
    		// first data: its size is double based on the next point or,
    		// if it's also the last data, we use the scale size.
    		prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
    	}

    	if (next === null) {
    		// last data: its size is also double based on the previous point.
    		next = curr + curr - prev;
    	}

    	start = curr - (curr - Math.min(prev, next)) / 2 * percent;
    	size = Math.abs(next - prev) / 2 * percent;

    	return {
    		chunk: size / ruler.stackCount,
    		ratio: options.barPercentage,
    		start: start
    	};
    }

    var controller_bar = core_datasetController.extend({

    	dataElementType: elements.Rectangle,

    	/**
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderSkipped',
    		'borderWidth',
    		'barPercentage',
    		'barThickness',
    		'categoryPercentage',
    		'maxBarThickness',
    		'minBarLength'
    	],

    	initialize: function() {
    		var me = this;
    		var meta, scaleOpts;

    		core_datasetController.prototype.initialize.apply(me, arguments);

    		meta = me.getMeta();
    		meta.stack = me.getDataset().stack;
    		meta.bar = true;

    		scaleOpts = me._getIndexScale().options;
    		deprecated('bar chart', scaleOpts.barPercentage, 'scales.[x/y]Axes.barPercentage', 'dataset.barPercentage');
    		deprecated('bar chart', scaleOpts.barThickness, 'scales.[x/y]Axes.barThickness', 'dataset.barThickness');
    		deprecated('bar chart', scaleOpts.categoryPercentage, 'scales.[x/y]Axes.categoryPercentage', 'dataset.categoryPercentage');
    		deprecated('bar chart', me._getValueScale().options.minBarLength, 'scales.[x/y]Axes.minBarLength', 'dataset.minBarLength');
    		deprecated('bar chart', scaleOpts.maxBarThickness, 'scales.[x/y]Axes.maxBarThickness', 'dataset.maxBarThickness');
    	},

    	update: function(reset) {
    		var me = this;
    		var rects = me.getMeta().data;
    		var i, ilen;

    		me._ruler = me.getRuler();

    		for (i = 0, ilen = rects.length; i < ilen; ++i) {
    			me.updateElement(rects[i], i, reset);
    		}
    	},

    	updateElement: function(rectangle, index, reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var dataset = me.getDataset();
    		var options = me._resolveDataElementOptions(rectangle, index);

    		rectangle._xScale = me.getScaleForId(meta.xAxisID);
    		rectangle._yScale = me.getScaleForId(meta.yAxisID);
    		rectangle._datasetIndex = me.index;
    		rectangle._index = index;
    		rectangle._model = {
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderSkipped: options.borderSkipped,
    			borderWidth: options.borderWidth,
    			datasetLabel: dataset.label,
    			label: me.chart.data.labels[index]
    		};

    		if (helpers$1.isArray(dataset.data[index])) {
    			rectangle._model.borderSkipped = null;
    		}

    		me._updateElementGeometry(rectangle, index, reset, options);

    		rectangle.pivot();
    	},

    	/**
    	 * @private
    	 */
    	_updateElementGeometry: function(rectangle, index, reset, options) {
    		var me = this;
    		var model = rectangle._model;
    		var vscale = me._getValueScale();
    		var base = vscale.getBasePixel();
    		var horizontal = vscale.isHorizontal();
    		var ruler = me._ruler || me.getRuler();
    		var vpixels = me.calculateBarValuePixels(me.index, index, options);
    		var ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options);

    		model.horizontal = horizontal;
    		model.base = reset ? base : vpixels.base;
    		model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
    		model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
    		model.height = horizontal ? ipixels.size : undefined;
    		model.width = horizontal ? undefined : ipixels.size;
    	},

    	/**
    	 * Returns the stacks based on groups and bar visibility.
    	 * @param {number} [last] - The dataset index
    	 * @returns {string[]} The list of stack IDs
    	 * @private
    	 */
    	_getStacks: function(last) {
    		var me = this;
    		var scale = me._getIndexScale();
    		var metasets = scale._getMatchingVisibleMetas(me._type);
    		var stacked = scale.options.stacked;
    		var ilen = metasets.length;
    		var stacks = [];
    		var i, meta;

    		for (i = 0; i < ilen; ++i) {
    			meta = metasets[i];
    			// stacked   | meta.stack
    			//           | found | not found | undefined
    			// false     |   x   |     x     |     x
    			// true      |       |     x     |
    			// undefined |       |     x     |     x
    			if (stacked === false || stacks.indexOf(meta.stack) === -1 ||
    				(stacked === undefined && meta.stack === undefined)) {
    				stacks.push(meta.stack);
    			}
    			if (meta.index === last) {
    				break;
    			}
    		}

    		return stacks;
    	},

    	/**
    	 * Returns the effective number of stacks based on groups and bar visibility.
    	 * @private
    	 */
    	getStackCount: function() {
    		return this._getStacks().length;
    	},

    	/**
    	 * Returns the stack index for the given dataset based on groups and bar visibility.
    	 * @param {number} [datasetIndex] - The dataset index
    	 * @param {string} [name] - The stack name to find
    	 * @returns {number} The stack index
    	 * @private
    	 */
    	getStackIndex: function(datasetIndex, name) {
    		var stacks = this._getStacks(datasetIndex);
    		var index = (name !== undefined)
    			? stacks.indexOf(name)
    			: -1; // indexOf returns -1 if element is not present

    		return (index === -1)
    			? stacks.length - 1
    			: index;
    	},

    	/**
    	 * @private
    	 */
    	getRuler: function() {
    		var me = this;
    		var scale = me._getIndexScale();
    		var pixels = [];
    		var i, ilen;

    		for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
    			pixels.push(scale.getPixelForValue(null, i, me.index));
    		}

    		return {
    			pixels: pixels,
    			start: scale._startPixel,
    			end: scale._endPixel,
    			stackCount: me.getStackCount(),
    			scale: scale
    		};
    	},

    	/**
    	 * Note: pixel values are not clamped to the scale area.
    	 * @private
    	 */
    	calculateBarValuePixels: function(datasetIndex, index, options) {
    		var me = this;
    		var chart = me.chart;
    		var scale = me._getValueScale();
    		var isHorizontal = scale.isHorizontal();
    		var datasets = chart.data.datasets;
    		var metasets = scale._getMatchingVisibleMetas(me._type);
    		var value = scale._parseValue(datasets[datasetIndex].data[index]);
    		var minBarLength = options.minBarLength;
    		var stacked = scale.options.stacked;
    		var stack = me.getMeta().stack;
    		var start = value.start === undefined ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;
    		var length = value.start === undefined ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;
    		var ilen = metasets.length;
    		var i, imeta, ivalue, base, head, size, stackLength;

    		if (stacked || (stacked === undefined && stack !== undefined)) {
    			for (i = 0; i < ilen; ++i) {
    				imeta = metasets[i];

    				if (imeta.index === datasetIndex) {
    					break;
    				}

    				if (imeta.stack === stack) {
    					stackLength = scale._parseValue(datasets[imeta.index].data[index]);
    					ivalue = stackLength.start === undefined ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;

    					if ((value.min < 0 && ivalue < 0) || (value.max >= 0 && ivalue > 0)) {
    						start += ivalue;
    					}
    				}
    			}
    		}

    		base = scale.getPixelForValue(start);
    		head = scale.getPixelForValue(start + length);
    		size = head - base;

    		if (minBarLength !== undefined && Math.abs(size) < minBarLength) {
    			size = minBarLength;
    			if (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {
    				head = base - minBarLength;
    			} else {
    				head = base + minBarLength;
    			}
    		}

    		return {
    			size: size,
    			base: base,
    			head: head,
    			center: head + size / 2
    		};
    	},

    	/**
    	 * @private
    	 */
    	calculateBarIndexPixels: function(datasetIndex, index, ruler, options) {
    		var me = this;
    		var range = options.barThickness === 'flex'
    			? computeFlexCategoryTraits(index, ruler, options)
    			: computeFitCategoryTraits(index, ruler, options);

    		var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
    		var center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
    		var size = Math.min(
    			valueOrDefault$3(options.maxBarThickness, Infinity),
    			range.chunk * range.ratio);

    		return {
    			base: center - size / 2,
    			head: center + size / 2,
    			center: center,
    			size: size
    		};
    	},

    	draw: function() {
    		var me = this;
    		var chart = me.chart;
    		var scale = me._getValueScale();
    		var rects = me.getMeta().data;
    		var dataset = me.getDataset();
    		var ilen = rects.length;
    		var i = 0;

    		helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);

    		for (; i < ilen; ++i) {
    			var val = scale._parseValue(dataset.data[i]);
    			if (!isNaN(val.min) && !isNaN(val.max)) {
    				rects[i].draw();
    			}
    		}

    		helpers$1.canvas.unclipArea(chart.ctx);
    	},

    	/**
    	 * @private
    	 */
    	_resolveDataElementOptions: function() {
    		var me = this;
    		var values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));
    		var indexOpts = me._getIndexScale().options;
    		var valueOpts = me._getValueScale().options;

    		values.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);
    		values.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);
    		values.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);
    		values.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);
    		values.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);

    		return values;
    	}

    });

    var valueOrDefault$4 = helpers$1.valueOrDefault;
    var resolve$1 = helpers$1.options.resolve;

    core_defaults._set('bubble', {
    	hover: {
    		mode: 'single'
    	},

    	scales: {
    		xAxes: [{
    			type: 'linear', // bubble should probably use a linear scale by default
    			position: 'bottom',
    			id: 'x-axis-0' // need an ID so datasets can reference the scale
    		}],
    		yAxes: [{
    			type: 'linear',
    			position: 'left',
    			id: 'y-axis-0'
    		}]
    	},

    	tooltips: {
    		callbacks: {
    			title: function() {
    				// Title doesn't make sense for scatter since we format the data as a point
    				return '';
    			},
    			label: function(item, data) {
    				var datasetLabel = data.datasets[item.datasetIndex].label || '';
    				var dataPoint = data.datasets[item.datasetIndex].data[item.index];
    				return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
    			}
    		}
    	}
    });

    var controller_bubble = core_datasetController.extend({
    	/**
    	 * @protected
    	 */
    	dataElementType: elements.Point,

    	/**
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderWidth',
    		'hoverBackgroundColor',
    		'hoverBorderColor',
    		'hoverBorderWidth',
    		'hoverRadius',
    		'hitRadius',
    		'pointStyle',
    		'rotation'
    	],

    	/**
    	 * @protected
    	 */
    	update: function(reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var points = meta.data;

    		// Update Points
    		helpers$1.each(points, function(point, index) {
    			me.updateElement(point, index, reset);
    		});
    	},

    	/**
    	 * @protected
    	 */
    	updateElement: function(point, index, reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var custom = point.custom || {};
    		var xScale = me.getScaleForId(meta.xAxisID);
    		var yScale = me.getScaleForId(meta.yAxisID);
    		var options = me._resolveDataElementOptions(point, index);
    		var data = me.getDataset().data[index];
    		var dsIndex = me.index;

    		var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);
    		var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);

    		point._xScale = xScale;
    		point._yScale = yScale;
    		point._options = options;
    		point._datasetIndex = dsIndex;
    		point._index = index;
    		point._model = {
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderWidth: options.borderWidth,
    			hitRadius: options.hitRadius,
    			pointStyle: options.pointStyle,
    			rotation: options.rotation,
    			radius: reset ? 0 : options.radius,
    			skip: custom.skip || isNaN(x) || isNaN(y),
    			x: x,
    			y: y,
    		};

    		point.pivot();
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(point) {
    		var model = point._model;
    		var options = point._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		point.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    			radius: model.radius
    		};

    		model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);
    		model.radius = options.radius + options.hoverRadius;
    	},

    	/**
    	 * @private
    	 */
    	_resolveDataElementOptions: function(point, index) {
    		var me = this;
    		var chart = me.chart;
    		var dataset = me.getDataset();
    		var custom = point.custom || {};
    		var data = dataset.data[index] || {};
    		var values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataIndex: index,
    			dataset: dataset,
    			datasetIndex: me.index
    		};

    		// In case values were cached (and thus frozen), we need to clone the values
    		if (me._cachedDataOpts === values) {
    			values = helpers$1.extend({}, values);
    		}

    		// Custom radius resolution
    		values.radius = resolve$1([
    			custom.radius,
    			data.r,
    			me._config.radius,
    			chart.options.elements.point.radius
    		], context, index);

    		return values;
    	}
    });

    var valueOrDefault$5 = helpers$1.valueOrDefault;

    var PI$1 = Math.PI;
    var DOUBLE_PI$1 = PI$1 * 2;
    var HALF_PI$1 = PI$1 / 2;

    core_defaults._set('doughnut', {
    	animation: {
    		// Boolean - Whether we animate the rotation of the Doughnut
    		animateRotate: true,
    		// Boolean - Whether we animate scaling the Doughnut from the centre
    		animateScale: false
    	},
    	hover: {
    		mode: 'single'
    	},
    	legendCallback: function(chart) {
    		var list = document.createElement('ul');
    		var data = chart.data;
    		var datasets = data.datasets;
    		var labels = data.labels;
    		var i, ilen, listItem, listItemSpan;

    		list.setAttribute('class', chart.id + '-legend');
    		if (datasets.length) {
    			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
    				listItem = list.appendChild(document.createElement('li'));
    				listItemSpan = listItem.appendChild(document.createElement('span'));
    				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
    				if (labels[i]) {
    					listItem.appendChild(document.createTextNode(labels[i]));
    				}
    			}
    		}

    		return list.outerHTML;
    	},
    	legend: {
    		labels: {
    			generateLabels: function(chart) {
    				var data = chart.data;
    				if (data.labels.length && data.datasets.length) {
    					return data.labels.map(function(label, i) {
    						var meta = chart.getDatasetMeta(0);
    						var style = meta.controller.getStyle(i);

    						return {
    							text: label,
    							fillStyle: style.backgroundColor,
    							strokeStyle: style.borderColor,
    							lineWidth: style.borderWidth,
    							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

    							// Extra data used for toggling the correct item
    							index: i
    						};
    					});
    				}
    				return [];
    			}
    		},

    		onClick: function(e, legendItem) {
    			var index = legendItem.index;
    			var chart = this.chart;
    			var i, ilen, meta;

    			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    				meta = chart.getDatasetMeta(i);
    				// toggle visibility of index if exists
    				if (meta.data[index]) {
    					meta.data[index].hidden = !meta.data[index].hidden;
    				}
    			}

    			chart.update();
    		}
    	},

    	// The percentage of the chart that we cut out of the middle.
    	cutoutPercentage: 50,

    	// The rotation of the chart, where the first data arc begins.
    	rotation: -HALF_PI$1,

    	// The total circumference of the chart.
    	circumference: DOUBLE_PI$1,

    	// Need to override these to give a nice default
    	tooltips: {
    		callbacks: {
    			title: function() {
    				return '';
    			},
    			label: function(tooltipItem, data) {
    				var dataLabel = data.labels[tooltipItem.index];
    				var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

    				if (helpers$1.isArray(dataLabel)) {
    					// show value on first line of multiline label
    					// need to clone because we are changing the value
    					dataLabel = dataLabel.slice();
    					dataLabel[0] += value;
    				} else {
    					dataLabel += value;
    				}

    				return dataLabel;
    			}
    		}
    	}
    });

    var controller_doughnut = core_datasetController.extend({

    	dataElementType: elements.Arc,

    	linkScales: helpers$1.noop,

    	/**
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderWidth',
    		'borderAlign',
    		'hoverBackgroundColor',
    		'hoverBorderColor',
    		'hoverBorderWidth',
    	],

    	// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
    	getRingIndex: function(datasetIndex) {
    		var ringIndex = 0;

    		for (var j = 0; j < datasetIndex; ++j) {
    			if (this.chart.isDatasetVisible(j)) {
    				++ringIndex;
    			}
    		}

    		return ringIndex;
    	},

    	update: function(reset) {
    		var me = this;
    		var chart = me.chart;
    		var chartArea = chart.chartArea;
    		var opts = chart.options;
    		var ratioX = 1;
    		var ratioY = 1;
    		var offsetX = 0;
    		var offsetY = 0;
    		var meta = me.getMeta();
    		var arcs = meta.data;
    		var cutout = opts.cutoutPercentage / 100 || 0;
    		var circumference = opts.circumference;
    		var chartWeight = me._getRingWeight(me.index);
    		var maxWidth, maxHeight, i, ilen;

    		// If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc
    		if (circumference < DOUBLE_PI$1) {
    			var startAngle = opts.rotation % DOUBLE_PI$1;
    			startAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;
    			var endAngle = startAngle + circumference;
    			var startX = Math.cos(startAngle);
    			var startY = Math.sin(startAngle);
    			var endX = Math.cos(endAngle);
    			var endY = Math.sin(endAngle);
    			var contains0 = (startAngle <= 0 && endAngle >= 0) || endAngle >= DOUBLE_PI$1;
    			var contains90 = (startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1) || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
    			var contains180 = startAngle === -PI$1 || endAngle >= PI$1;
    			var contains270 = (startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1) || endAngle >= PI$1 + HALF_PI$1;
    			var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
    			var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
    			var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
    			var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
    			ratioX = (maxX - minX) / 2;
    			ratioY = (maxY - minY) / 2;
    			offsetX = -(maxX + minX) / 2;
    			offsetY = -(maxY + minY) / 2;
    		}

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
    		}

    		chart.borderWidth = me.getMaxBorderWidth();
    		maxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;
    		maxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;
    		chart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
    		chart.innerRadius = Math.max(chart.outerRadius * cutout, 0);
    		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
    		chart.offsetX = offsetX * chart.outerRadius;
    		chart.offsetY = offsetY * chart.outerRadius;

    		meta.total = me.calculateTotal();

    		me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
    		me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			me.updateElement(arcs[i], i, reset);
    		}
    	},

    	updateElement: function(arc, index, reset) {
    		var me = this;
    		var chart = me.chart;
    		var chartArea = chart.chartArea;
    		var opts = chart.options;
    		var animationOpts = opts.animation;
    		var centerX = (chartArea.left + chartArea.right) / 2;
    		var centerY = (chartArea.top + chartArea.bottom) / 2;
    		var startAngle = opts.rotation; // non reset case handled later
    		var endAngle = opts.rotation; // non reset case handled later
    		var dataset = me.getDataset();
    		var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);
    		var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
    		var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
    		var options = arc._options || {};

    		helpers$1.extend(arc, {
    			// Utility
    			_datasetIndex: me.index,
    			_index: index,

    			// Desired view properties
    			_model: {
    				backgroundColor: options.backgroundColor,
    				borderColor: options.borderColor,
    				borderWidth: options.borderWidth,
    				borderAlign: options.borderAlign,
    				x: centerX + chart.offsetX,
    				y: centerY + chart.offsetY,
    				startAngle: startAngle,
    				endAngle: endAngle,
    				circumference: circumference,
    				outerRadius: outerRadius,
    				innerRadius: innerRadius,
    				label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
    			}
    		});

    		var model = arc._model;

    		// Set correct angles if not resetting
    		if (!reset || !animationOpts.animateRotate) {
    			if (index === 0) {
    				model.startAngle = opts.rotation;
    			} else {
    				model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
    			}

    			model.endAngle = model.startAngle + model.circumference;
    		}

    		arc.pivot();
    	},

    	calculateTotal: function() {
    		var dataset = this.getDataset();
    		var meta = this.getMeta();
    		var total = 0;
    		var value;

    		helpers$1.each(meta.data, function(element, index) {
    			value = dataset.data[index];
    			if (!isNaN(value) && !element.hidden) {
    				total += Math.abs(value);
    			}
    		});

    		/* if (total === 0) {
    			total = NaN;
    		}*/

    		return total;
    	},

    	calculateCircumference: function(value) {
    		var total = this.getMeta().total;
    		if (total > 0 && !isNaN(value)) {
    			return DOUBLE_PI$1 * (Math.abs(value) / total);
    		}
    		return 0;
    	},

    	// gets the max border or hover width to properly scale pie charts
    	getMaxBorderWidth: function(arcs) {
    		var me = this;
    		var max = 0;
    		var chart = me.chart;
    		var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;

    		if (!arcs) {
    			// Find the outmost visible dataset
    			for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
    				if (chart.isDatasetVisible(i)) {
    					meta = chart.getDatasetMeta(i);
    					arcs = meta.data;
    					if (i !== me.index) {
    						controller = meta.controller;
    					}
    					break;
    				}
    			}
    		}

    		if (!arcs) {
    			return 0;
    		}

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			arc = arcs[i];
    			if (controller) {
    				controller._configure();
    				options = controller._resolveDataElementOptions(arc, i);
    			} else {
    				options = arc._options;
    			}
    			if (options.borderAlign !== 'inner') {
    				borderWidth = options.borderWidth;
    				hoverWidth = options.hoverBorderWidth;

    				max = borderWidth > max ? borderWidth : max;
    				max = hoverWidth > max ? hoverWidth : max;
    			}
    		}
    		return max;
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(arc) {
    		var model = arc._model;
    		var options = arc._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		arc.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    		};

    		model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);
    	},

    	/**
    	 * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly
    	 * @private
    	 */
    	_getRingWeightOffset: function(datasetIndex) {
    		var ringWeightOffset = 0;

    		for (var i = 0; i < datasetIndex; ++i) {
    			if (this.chart.isDatasetVisible(i)) {
    				ringWeightOffset += this._getRingWeight(i);
    			}
    		}

    		return ringWeightOffset;
    	},

    	/**
    	 * @private
    	 */
    	_getRingWeight: function(dataSetIndex) {
    		return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
    	},

    	/**
    	 * Returns the sum of all visibile data set weights.  This value can be 0.
    	 * @private
    	 */
    	_getVisibleDatasetWeightTotal: function() {
    		return this._getRingWeightOffset(this.chart.data.datasets.length);
    	}
    });

    core_defaults._set('horizontalBar', {
    	hover: {
    		mode: 'index',
    		axis: 'y'
    	},

    	scales: {
    		xAxes: [{
    			type: 'linear',
    			position: 'bottom'
    		}],

    		yAxes: [{
    			type: 'category',
    			position: 'left',
    			offset: true,
    			gridLines: {
    				offsetGridLines: true
    			}
    		}]
    	},

    	elements: {
    		rectangle: {
    			borderSkipped: 'left'
    		}
    	},

    	tooltips: {
    		mode: 'index',
    		axis: 'y'
    	}
    });

    core_defaults._set('global', {
    	datasets: {
    		horizontalBar: {
    			categoryPercentage: 0.8,
    			barPercentage: 0.9
    		}
    	}
    });

    var controller_horizontalBar = controller_bar.extend({
    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.getMeta().xAxisID;
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.getMeta().yAxisID;
    	}
    });

    var valueOrDefault$6 = helpers$1.valueOrDefault;
    var resolve$2 = helpers$1.options.resolve;
    var isPointInArea = helpers$1.canvas._isPointInArea;

    core_defaults._set('line', {
    	showLines: true,
    	spanGaps: false,

    	hover: {
    		mode: 'label'
    	},

    	scales: {
    		xAxes: [{
    			type: 'category',
    			id: 'x-axis-0'
    		}],
    		yAxes: [{
    			type: 'linear',
    			id: 'y-axis-0'
    		}]
    	}
    });

    function scaleClip(scale, halfBorderWidth) {
    	var tickOpts = scale && scale.options.ticks || {};
    	var reverse = tickOpts.reverse;
    	var min = tickOpts.min === undefined ? halfBorderWidth : 0;
    	var max = tickOpts.max === undefined ? halfBorderWidth : 0;
    	return {
    		start: reverse ? max : min,
    		end: reverse ? min : max
    	};
    }

    function defaultClip(xScale, yScale, borderWidth) {
    	var halfBorderWidth = borderWidth / 2;
    	var x = scaleClip(xScale, halfBorderWidth);
    	var y = scaleClip(yScale, halfBorderWidth);

    	return {
    		top: y.end,
    		right: x.end,
    		bottom: y.start,
    		left: x.start
    	};
    }

    function toClip(value) {
    	var t, r, b, l;

    	if (helpers$1.isObject(value)) {
    		t = value.top;
    		r = value.right;
    		b = value.bottom;
    		l = value.left;
    	} else {
    		t = r = b = l = value;
    	}

    	return {
    		top: t,
    		right: r,
    		bottom: b,
    		left: l
    	};
    }


    var controller_line = core_datasetController.extend({

    	datasetElementType: elements.Line,

    	dataElementType: elements.Point,

    	/**
    	 * @private
    	 */
    	_datasetElementOptions: [
    		'backgroundColor',
    		'borderCapStyle',
    		'borderColor',
    		'borderDash',
    		'borderDashOffset',
    		'borderJoinStyle',
    		'borderWidth',
    		'cubicInterpolationMode',
    		'fill'
    	],

    	/**
    	 * @private
    	 */
    	_dataElementOptions: {
    		backgroundColor: 'pointBackgroundColor',
    		borderColor: 'pointBorderColor',
    		borderWidth: 'pointBorderWidth',
    		hitRadius: 'pointHitRadius',
    		hoverBackgroundColor: 'pointHoverBackgroundColor',
    		hoverBorderColor: 'pointHoverBorderColor',
    		hoverBorderWidth: 'pointHoverBorderWidth',
    		hoverRadius: 'pointHoverRadius',
    		pointStyle: 'pointStyle',
    		radius: 'pointRadius',
    		rotation: 'pointRotation'
    	},

    	update: function(reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var line = meta.dataset;
    		var points = meta.data || [];
    		var options = me.chart.options;
    		var config = me._config;
    		var showLine = me._showLine = valueOrDefault$6(config.showLine, options.showLines);
    		var i, ilen;

    		me._xScale = me.getScaleForId(meta.xAxisID);
    		me._yScale = me.getScaleForId(meta.yAxisID);

    		// Update Line
    		if (showLine) {
    			// Compatibility: If the properties are defined with only the old name, use those values
    			if (config.tension !== undefined && config.lineTension === undefined) {
    				config.lineTension = config.tension;
    			}

    			// Utility
    			line._scale = me._yScale;
    			line._datasetIndex = me.index;
    			// Data
    			line._children = points;
    			// Model
    			line._model = me._resolveDatasetElementOptions(line);

    			line.pivot();
    		}

    		// Update Points
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			me.updateElement(points[i], i, reset);
    		}

    		if (showLine && line._model.tension !== 0) {
    			me.updateBezierControlPoints();
    		}

    		// Now pivot the point for animation
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			points[i].pivot();
    		}
    	},

    	updateElement: function(point, index, reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var custom = point.custom || {};
    		var dataset = me.getDataset();
    		var datasetIndex = me.index;
    		var value = dataset.data[index];
    		var xScale = me._xScale;
    		var yScale = me._yScale;
    		var lineModel = meta.dataset._model;
    		var x, y;

    		var options = me._resolveDataElementOptions(point, index);

    		x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);
    		y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);

    		// Utility
    		point._xScale = xScale;
    		point._yScale = yScale;
    		point._options = options;
    		point._datasetIndex = datasetIndex;
    		point._index = index;

    		// Desired view properties
    		point._model = {
    			x: x,
    			y: y,
    			skip: custom.skip || isNaN(x) || isNaN(y),
    			// Appearance
    			radius: options.radius,
    			pointStyle: options.pointStyle,
    			rotation: options.rotation,
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderWidth: options.borderWidth,
    			tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),
    			steppedLine: lineModel ? lineModel.steppedLine : false,
    			// Tooltip
    			hitRadius: options.hitRadius
    		};
    	},

    	/**
    	 * @private
    	 */
    	_resolveDatasetElementOptions: function(element) {
    		var me = this;
    		var config = me._config;
    		var custom = element.custom || {};
    		var options = me.chart.options;
    		var lineOptions = options.elements.line;
    		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

    		// The default behavior of lines is to break at null values, according
    		// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
    		// This option gives lines the ability to span gaps
    		values.spanGaps = valueOrDefault$6(config.spanGaps, options.spanGaps);
    		values.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);
    		values.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);
    		values.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));

    		return values;
    	},

    	calculatePointY: function(value, index, datasetIndex) {
    		var me = this;
    		var chart = me.chart;
    		var yScale = me._yScale;
    		var sumPos = 0;
    		var sumNeg = 0;
    		var i, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;

    		if (yScale.options.stacked) {
    			rightValue = +yScale.getRightValue(value);
    			metasets = chart._getSortedVisibleDatasetMetas();
    			ilen = metasets.length;

    			for (i = 0; i < ilen; ++i) {
    				dsMeta = metasets[i];
    				if (dsMeta.index === datasetIndex) {
    					break;
    				}

    				ds = chart.data.datasets[dsMeta.index];
    				if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id) {
    					stackedRightValue = +yScale.getRightValue(ds.data[index]);
    					if (stackedRightValue < 0) {
    						sumNeg += stackedRightValue || 0;
    					} else {
    						sumPos += stackedRightValue || 0;
    					}
    				}
    			}

    			if (rightValue < 0) {
    				return yScale.getPixelForValue(sumNeg + rightValue);
    			}
    			return yScale.getPixelForValue(sumPos + rightValue);
    		}
    		return yScale.getPixelForValue(value);
    	},

    	updateBezierControlPoints: function() {
    		var me = this;
    		var chart = me.chart;
    		var meta = me.getMeta();
    		var lineModel = meta.dataset._model;
    		var area = chart.chartArea;
    		var points = meta.data || [];
    		var i, ilen, model, controlPoints;

    		// Only consider points that are drawn in case the spanGaps option is used
    		if (lineModel.spanGaps) {
    			points = points.filter(function(pt) {
    				return !pt._model.skip;
    			});
    		}

    		function capControlPoint(pt, min, max) {
    			return Math.max(Math.min(pt, max), min);
    		}

    		if (lineModel.cubicInterpolationMode === 'monotone') {
    			helpers$1.splineCurveMonotone(points);
    		} else {
    			for (i = 0, ilen = points.length; i < ilen; ++i) {
    				model = points[i]._model;
    				controlPoints = helpers$1.splineCurve(
    					helpers$1.previousItem(points, i)._model,
    					model,
    					helpers$1.nextItem(points, i)._model,
    					lineModel.tension
    				);
    				model.controlPointPreviousX = controlPoints.previous.x;
    				model.controlPointPreviousY = controlPoints.previous.y;
    				model.controlPointNextX = controlPoints.next.x;
    				model.controlPointNextY = controlPoints.next.y;
    			}
    		}

    		if (chart.options.elements.line.capBezierPoints) {
    			for (i = 0, ilen = points.length; i < ilen; ++i) {
    				model = points[i]._model;
    				if (isPointInArea(model, area)) {
    					if (i > 0 && isPointInArea(points[i - 1]._model, area)) {
    						model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
    						model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
    					}
    					if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {
    						model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
    						model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
    					}
    				}
    			}
    		}
    	},

    	draw: function() {
    		var me = this;
    		var chart = me.chart;
    		var meta = me.getMeta();
    		var points = meta.data || [];
    		var area = chart.chartArea;
    		var canvas = chart.canvas;
    		var i = 0;
    		var ilen = points.length;
    		var clip;

    		if (me._showLine) {
    			clip = meta.dataset._model.clip;

    			helpers$1.canvas.clipArea(chart.ctx, {
    				left: clip.left === false ? 0 : area.left - clip.left,
    				right: clip.right === false ? canvas.width : area.right + clip.right,
    				top: clip.top === false ? 0 : area.top - clip.top,
    				bottom: clip.bottom === false ? canvas.height : area.bottom + clip.bottom
    			});

    			meta.dataset.draw();

    			helpers$1.canvas.unclipArea(chart.ctx);
    		}

    		// Draw the points
    		for (; i < ilen; ++i) {
    			points[i].draw(area);
    		}
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(point) {
    		var model = point._model;
    		var options = point._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		point.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    			radius: model.radius
    		};

    		model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);
    		model.radius = valueOrDefault$6(options.hoverRadius, options.radius);
    	},
    });

    var resolve$3 = helpers$1.options.resolve;

    core_defaults._set('polarArea', {
    	scale: {
    		type: 'radialLinear',
    		angleLines: {
    			display: false
    		},
    		gridLines: {
    			circular: true
    		},
    		pointLabels: {
    			display: false
    		},
    		ticks: {
    			beginAtZero: true
    		}
    	},

    	// Boolean - Whether to animate the rotation of the chart
    	animation: {
    		animateRotate: true,
    		animateScale: true
    	},

    	startAngle: -0.5 * Math.PI,
    	legendCallback: function(chart) {
    		var list = document.createElement('ul');
    		var data = chart.data;
    		var datasets = data.datasets;
    		var labels = data.labels;
    		var i, ilen, listItem, listItemSpan;

    		list.setAttribute('class', chart.id + '-legend');
    		if (datasets.length) {
    			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
    				listItem = list.appendChild(document.createElement('li'));
    				listItemSpan = listItem.appendChild(document.createElement('span'));
    				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
    				if (labels[i]) {
    					listItem.appendChild(document.createTextNode(labels[i]));
    				}
    			}
    		}

    		return list.outerHTML;
    	},
    	legend: {
    		labels: {
    			generateLabels: function(chart) {
    				var data = chart.data;
    				if (data.labels.length && data.datasets.length) {
    					return data.labels.map(function(label, i) {
    						var meta = chart.getDatasetMeta(0);
    						var style = meta.controller.getStyle(i);

    						return {
    							text: label,
    							fillStyle: style.backgroundColor,
    							strokeStyle: style.borderColor,
    							lineWidth: style.borderWidth,
    							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

    							// Extra data used for toggling the correct item
    							index: i
    						};
    					});
    				}
    				return [];
    			}
    		},

    		onClick: function(e, legendItem) {
    			var index = legendItem.index;
    			var chart = this.chart;
    			var i, ilen, meta;

    			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    				meta = chart.getDatasetMeta(i);
    				meta.data[index].hidden = !meta.data[index].hidden;
    			}

    			chart.update();
    		}
    	},

    	// Need to override these to give a nice default
    	tooltips: {
    		callbacks: {
    			title: function() {
    				return '';
    			},
    			label: function(item, data) {
    				return data.labels[item.index] + ': ' + item.yLabel;
    			}
    		}
    	}
    });

    var controller_polarArea = core_datasetController.extend({

    	dataElementType: elements.Arc,

    	linkScales: helpers$1.noop,

    	/**
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderWidth',
    		'borderAlign',
    		'hoverBackgroundColor',
    		'hoverBorderColor',
    		'hoverBorderWidth',
    	],

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.chart.scale.id;
    	},

    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.chart.scale.id;
    	},

    	update: function(reset) {
    		var me = this;
    		var dataset = me.getDataset();
    		var meta = me.getMeta();
    		var start = me.chart.options.startAngle || 0;
    		var starts = me._starts = [];
    		var angles = me._angles = [];
    		var arcs = meta.data;
    		var i, ilen, angle;

    		me._updateRadius();

    		meta.count = me.countVisibleElements();

    		for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
    			starts[i] = start;
    			angle = me._computeAngle(i);
    			angles[i] = angle;
    			start += angle;
    		}

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
    			me.updateElement(arcs[i], i, reset);
    		}
    	},

    	/**
    	 * @private
    	 */
    	_updateRadius: function() {
    		var me = this;
    		var chart = me.chart;
    		var chartArea = chart.chartArea;
    		var opts = chart.options;
    		var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);

    		chart.outerRadius = Math.max(minSize / 2, 0);
    		chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
    		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();

    		me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
    		me.innerRadius = me.outerRadius - chart.radiusLength;
    	},

    	updateElement: function(arc, index, reset) {
    		var me = this;
    		var chart = me.chart;
    		var dataset = me.getDataset();
    		var opts = chart.options;
    		var animationOpts = opts.animation;
    		var scale = chart.scale;
    		var labels = chart.data.labels;

    		var centerX = scale.xCenter;
    		var centerY = scale.yCenter;

    		// var negHalfPI = -0.5 * Math.PI;
    		var datasetStartAngle = opts.startAngle;
    		var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
    		var startAngle = me._starts[index];
    		var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);

    		var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
    		var options = arc._options || {};

    		helpers$1.extend(arc, {
    			// Utility
    			_datasetIndex: me.index,
    			_index: index,
    			_scale: scale,

    			// Desired view properties
    			_model: {
    				backgroundColor: options.backgroundColor,
    				borderColor: options.borderColor,
    				borderWidth: options.borderWidth,
    				borderAlign: options.borderAlign,
    				x: centerX,
    				y: centerY,
    				innerRadius: 0,
    				outerRadius: reset ? resetRadius : distance,
    				startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
    				endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
    				label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
    			}
    		});

    		arc.pivot();
    	},

    	countVisibleElements: function() {
    		var dataset = this.getDataset();
    		var meta = this.getMeta();
    		var count = 0;

    		helpers$1.each(meta.data, function(element, index) {
    			if (!isNaN(dataset.data[index]) && !element.hidden) {
    				count++;
    			}
    		});

    		return count;
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(arc) {
    		var model = arc._model;
    		var options = arc._options;
    		var getHoverColor = helpers$1.getHoverColor;
    		var valueOrDefault = helpers$1.valueOrDefault;

    		arc.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    		};

    		model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);
    	},

    	/**
    	 * @private
    	 */
    	_computeAngle: function(index) {
    		var me = this;
    		var count = this.getMeta().count;
    		var dataset = me.getDataset();
    		var meta = me.getMeta();

    		if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
    			return 0;
    		}

    		// Scriptable options
    		var context = {
    			chart: me.chart,
    			dataIndex: index,
    			dataset: dataset,
    			datasetIndex: me.index
    		};

    		return resolve$3([
    			me.chart.options.elements.arc.angle,
    			(2 * Math.PI) / count
    		], context, index);
    	}
    });

    core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));
    core_defaults._set('pie', {
    	cutoutPercentage: 0
    });

    // Pie charts are Doughnut chart with different defaults
    var controller_pie = controller_doughnut;

    var valueOrDefault$7 = helpers$1.valueOrDefault;

    core_defaults._set('radar', {
    	spanGaps: false,
    	scale: {
    		type: 'radialLinear'
    	},
    	elements: {
    		line: {
    			fill: 'start',
    			tension: 0 // no bezier in radar
    		}
    	}
    });

    var controller_radar = core_datasetController.extend({
    	datasetElementType: elements.Line,

    	dataElementType: elements.Point,

    	linkScales: helpers$1.noop,

    	/**
    	 * @private
    	 */
    	_datasetElementOptions: [
    		'backgroundColor',
    		'borderWidth',
    		'borderColor',
    		'borderCapStyle',
    		'borderDash',
    		'borderDashOffset',
    		'borderJoinStyle',
    		'fill'
    	],

    	/**
    	 * @private
    	 */
    	_dataElementOptions: {
    		backgroundColor: 'pointBackgroundColor',
    		borderColor: 'pointBorderColor',
    		borderWidth: 'pointBorderWidth',
    		hitRadius: 'pointHitRadius',
    		hoverBackgroundColor: 'pointHoverBackgroundColor',
    		hoverBorderColor: 'pointHoverBorderColor',
    		hoverBorderWidth: 'pointHoverBorderWidth',
    		hoverRadius: 'pointHoverRadius',
    		pointStyle: 'pointStyle',
    		radius: 'pointRadius',
    		rotation: 'pointRotation'
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.chart.scale.id;
    	},

    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.chart.scale.id;
    	},

    	update: function(reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var line = meta.dataset;
    		var points = meta.data || [];
    		var scale = me.chart.scale;
    		var config = me._config;
    		var i, ilen;

    		// Compatibility: If the properties are defined with only the old name, use those values
    		if (config.tension !== undefined && config.lineTension === undefined) {
    			config.lineTension = config.tension;
    		}

    		// Utility
    		line._scale = scale;
    		line._datasetIndex = me.index;
    		// Data
    		line._children = points;
    		line._loop = true;
    		// Model
    		line._model = me._resolveDatasetElementOptions(line);

    		line.pivot();

    		// Update Points
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			me.updateElement(points[i], i, reset);
    		}

    		// Update bezier control points
    		me.updateBezierControlPoints();

    		// Now pivot the point for animation
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			points[i].pivot();
    		}
    	},

    	updateElement: function(point, index, reset) {
    		var me = this;
    		var custom = point.custom || {};
    		var dataset = me.getDataset();
    		var scale = me.chart.scale;
    		var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
    		var options = me._resolveDataElementOptions(point, index);
    		var lineModel = me.getMeta().dataset._model;
    		var x = reset ? scale.xCenter : pointPosition.x;
    		var y = reset ? scale.yCenter : pointPosition.y;

    		// Utility
    		point._scale = scale;
    		point._options = options;
    		point._datasetIndex = me.index;
    		point._index = index;

    		// Desired view properties
    		point._model = {
    			x: x, // value not used in dataset scale, but we want a consistent API between scales
    			y: y,
    			skip: custom.skip || isNaN(x) || isNaN(y),
    			// Appearance
    			radius: options.radius,
    			pointStyle: options.pointStyle,
    			rotation: options.rotation,
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderWidth: options.borderWidth,
    			tension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),

    			// Tooltip
    			hitRadius: options.hitRadius
    		};
    	},

    	/**
    	 * @private
    	 */
    	_resolveDatasetElementOptions: function() {
    		var me = this;
    		var config = me._config;
    		var options = me.chart.options;
    		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

    		values.spanGaps = valueOrDefault$7(config.spanGaps, options.spanGaps);
    		values.tension = valueOrDefault$7(config.lineTension, options.elements.line.tension);

    		return values;
    	},

    	updateBezierControlPoints: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var area = me.chart.chartArea;
    		var points = meta.data || [];
    		var i, ilen, model, controlPoints;

    		// Only consider points that are drawn in case the spanGaps option is used
    		if (meta.dataset._model.spanGaps) {
    			points = points.filter(function(pt) {
    				return !pt._model.skip;
    			});
    		}

    		function capControlPoint(pt, min, max) {
    			return Math.max(Math.min(pt, max), min);
    		}

    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			model = points[i]._model;
    			controlPoints = helpers$1.splineCurve(
    				helpers$1.previousItem(points, i, true)._model,
    				model,
    				helpers$1.nextItem(points, i, true)._model,
    				model.tension
    			);

    			// Prevent the bezier going outside of the bounds of the graph
    			model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
    			model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
    			model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
    			model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
    		}
    	},

    	setHoverStyle: function(point) {
    		var model = point._model;
    		var options = point._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		point.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    			radius: model.radius
    		};

    		model.backgroundColor = valueOrDefault$7(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$7(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$7(options.hoverBorderWidth, options.borderWidth);
    		model.radius = valueOrDefault$7(options.hoverRadius, options.radius);
    	}
    });

    core_defaults._set('scatter', {
    	hover: {
    		mode: 'single'
    	},

    	scales: {
    		xAxes: [{
    			id: 'x-axis-1',    // need an ID so datasets can reference the scale
    			type: 'linear',    // scatter should not use a category axis
    			position: 'bottom'
    		}],
    		yAxes: [{
    			id: 'y-axis-1',
    			type: 'linear',
    			position: 'left'
    		}]
    	},

    	tooltips: {
    		callbacks: {
    			title: function() {
    				return '';     // doesn't make sense for scatter since data are formatted as a point
    			},
    			label: function(item) {
    				return '(' + item.xLabel + ', ' + item.yLabel + ')';
    			}
    		}
    	}
    });

    core_defaults._set('global', {
    	datasets: {
    		scatter: {
    			showLine: false
    		}
    	}
    });

    // Scatter charts use line controllers
    var controller_scatter = controller_line;

    // NOTE export a map in which the key represents the controller type, not
    // the class, and so must be CamelCase in order to be correctly retrieved
    // by the controller in core.controller.js (`controllers[meta.type]`).

    var controllers = {
    	bar: controller_bar,
    	bubble: controller_bubble,
    	doughnut: controller_doughnut,
    	horizontalBar: controller_horizontalBar,
    	line: controller_line,
    	polarArea: controller_polarArea,
    	pie: controller_pie,
    	radar: controller_radar,
    	scatter: controller_scatter
    };

    /**
     * Helper function to get relative position for an event
     * @param {Event|IEvent} event - The event to get the position for
     * @param {Chart} chart - The chart
     * @returns {object} the event position
     */
    function getRelativePosition(e, chart) {
    	if (e.native) {
    		return {
    			x: e.x,
    			y: e.y
    		};
    	}

    	return helpers$1.getRelativePosition(e, chart);
    }

    /**
     * Helper function to traverse all of the visible elements in the chart
     * @param {Chart} chart - the chart
     * @param {function} handler - the callback to execute for each visible item
     */
    function parseVisibleItems(chart, handler) {
    	var metasets = chart._getSortedVisibleDatasetMetas();
    	var metadata, i, j, ilen, jlen, element;

    	for (i = 0, ilen = metasets.length; i < ilen; ++i) {
    		metadata = metasets[i].data;
    		for (j = 0, jlen = metadata.length; j < jlen; ++j) {
    			element = metadata[j];
    			if (!element._view.skip) {
    				handler(element);
    			}
    		}
    	}
    }

    /**
     * Helper function to get the items that intersect the event position
     * @param {ChartElement[]} items - elements to filter
     * @param {object} position - the point to be nearest to
     * @return {ChartElement[]} the nearest items
     */
    function getIntersectItems(chart, position) {
    	var elements = [];

    	parseVisibleItems(chart, function(element) {
    		if (element.inRange(position.x, position.y)) {
    			elements.push(element);
    		}
    	});

    	return elements;
    }

    /**
     * Helper function to get the items nearest to the event position considering all visible items in teh chart
     * @param {Chart} chart - the chart to look at elements from
     * @param {object} position - the point to be nearest to
     * @param {boolean} intersect - if true, only consider items that intersect the position
     * @param {function} distanceMetric - function to provide the distance between points
     * @return {ChartElement[]} the nearest items
     */
    function getNearestItems(chart, position, intersect, distanceMetric) {
    	var minDistance = Number.POSITIVE_INFINITY;
    	var nearestItems = [];

    	parseVisibleItems(chart, function(element) {
    		if (intersect && !element.inRange(position.x, position.y)) {
    			return;
    		}

    		var center = element.getCenterPoint();
    		var distance = distanceMetric(position, center);
    		if (distance < minDistance) {
    			nearestItems = [element];
    			minDistance = distance;
    		} else if (distance === minDistance) {
    			// Can have multiple items at the same distance in which case we sort by size
    			nearestItems.push(element);
    		}
    	});

    	return nearestItems;
    }

    /**
     * Get a distance metric function for two points based on the
     * axis mode setting
     * @param {string} axis - the axis mode. x|y|xy
     */
    function getDistanceMetricForAxis(axis) {
    	var useX = axis.indexOf('x') !== -1;
    	var useY = axis.indexOf('y') !== -1;

    	return function(pt1, pt2) {
    		var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    		var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    		return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
    	};
    }

    function indexMode(chart, e, options) {
    	var position = getRelativePosition(e, chart);
    	// Default axis for index mode is 'x' to match old behaviour
    	options.axis = options.axis || 'x';
    	var distanceMetric = getDistanceMetricForAxis(options.axis);
    	var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
    	var elements = [];

    	if (!items.length) {
    		return [];
    	}

    	chart._getSortedVisibleDatasetMetas().forEach(function(meta) {
    		var element = meta.data[items[0]._index];

    		// don't count items that are skipped (null data)
    		if (element && !element._view.skip) {
    			elements.push(element);
    		}
    	});

    	return elements;
    }

    /**
     * @interface IInteractionOptions
     */
    /**
     * If true, only consider items that intersect the point
     * @name IInterfaceOptions#boolean
     * @type Boolean
     */

    /**
     * Contains interaction related functions
     * @namespace Chart.Interaction
     */
    var core_interaction = {
    	// Helper function for different modes
    	modes: {
    		single: function(chart, e) {
    			var position = getRelativePosition(e, chart);
    			var elements = [];

    			parseVisibleItems(chart, function(element) {
    				if (element.inRange(position.x, position.y)) {
    					elements.push(element);
    					return elements;
    				}
    			});

    			return elements.slice(0, 1);
    		},

    		/**
    		 * @function Chart.Interaction.modes.label
    		 * @deprecated since version 2.4.0
    		 * @todo remove at version 3
    		 * @private
    		 */
    		label: indexMode,

    		/**
    		 * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
    		 * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
    		 * @function Chart.Interaction.modes.index
    		 * @since v2.4.0
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use during interaction
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		index: indexMode,

    		/**
    		 * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
    		 * If the options.intersect is false, we find the nearest item and return the items in that dataset
    		 * @function Chart.Interaction.modes.dataset
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use during interaction
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		dataset: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			options.axis = options.axis || 'xy';
    			var distanceMetric = getDistanceMetricForAxis(options.axis);
    			var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);

    			if (items.length > 0) {
    				items = chart.getDatasetMeta(items[0]._datasetIndex).data;
    			}

    			return items;
    		},

    		/**
    		 * @function Chart.Interaction.modes.x-axis
    		 * @deprecated since version 2.4.0. Use index mode and intersect == true
    		 * @todo remove at version 3
    		 * @private
    		 */
    		'x-axis': function(chart, e) {
    			return indexMode(chart, e, {intersect: false});
    		},

    		/**
    		 * Point mode returns all elements that hit test based on the event position
    		 * of the event
    		 * @function Chart.Interaction.modes.intersect
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		point: function(chart, e) {
    			var position = getRelativePosition(e, chart);
    			return getIntersectItems(chart, position);
    		},

    		/**
    		 * nearest mode returns the element closest to the point
    		 * @function Chart.Interaction.modes.intersect
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		nearest: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			options.axis = options.axis || 'xy';
    			var distanceMetric = getDistanceMetricForAxis(options.axis);
    			return getNearestItems(chart, position, options.intersect, distanceMetric);
    		},

    		/**
    		 * x mode returns the elements that hit-test at the current x coordinate
    		 * @function Chart.Interaction.modes.x
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		x: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			var items = [];
    			var intersectsItem = false;

    			parseVisibleItems(chart, function(element) {
    				if (element.inXRange(position.x)) {
    					items.push(element);
    				}

    				if (element.inRange(position.x, position.y)) {
    					intersectsItem = true;
    				}
    			});

    			// If we want to trigger on an intersect and we don't have any items
    			// that intersect the position, return nothing
    			if (options.intersect && !intersectsItem) {
    				items = [];
    			}
    			return items;
    		},

    		/**
    		 * y mode returns the elements that hit-test at the current y coordinate
    		 * @function Chart.Interaction.modes.y
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		y: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			var items = [];
    			var intersectsItem = false;

    			parseVisibleItems(chart, function(element) {
    				if (element.inYRange(position.y)) {
    					items.push(element);
    				}

    				if (element.inRange(position.x, position.y)) {
    					intersectsItem = true;
    				}
    			});

    			// If we want to trigger on an intersect and we don't have any items
    			// that intersect the position, return nothing
    			if (options.intersect && !intersectsItem) {
    				items = [];
    			}
    			return items;
    		}
    	}
    };

    var extend = helpers$1.extend;

    function filterByPosition(array, position) {
    	return helpers$1.where(array, function(v) {
    		return v.pos === position;
    	});
    }

    function sortByWeight(array, reverse) {
    	return array.sort(function(a, b) {
    		var v0 = reverse ? b : a;
    		var v1 = reverse ? a : b;
    		return v0.weight === v1.weight ?
    			v0.index - v1.index :
    			v0.weight - v1.weight;
    	});
    }

    function wrapBoxes(boxes) {
    	var layoutBoxes = [];
    	var i, ilen, box;

    	for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
    		box = boxes[i];
    		layoutBoxes.push({
    			index: i,
    			box: box,
    			pos: box.position,
    			horizontal: box.isHorizontal(),
    			weight: box.weight
    		});
    	}
    	return layoutBoxes;
    }

    function setLayoutDims(layouts, params) {
    	var i, ilen, layout;
    	for (i = 0, ilen = layouts.length; i < ilen; ++i) {
    		layout = layouts[i];
    		// store width used instead of chartArea.w in fitBoxes
    		layout.width = layout.horizontal
    			? layout.box.fullWidth && params.availableWidth
    			: params.vBoxMaxWidth;
    		// store height used instead of chartArea.h in fitBoxes
    		layout.height = layout.horizontal && params.hBoxMaxHeight;
    	}
    }

    function buildLayoutBoxes(boxes) {
    	var layoutBoxes = wrapBoxes(boxes);
    	var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
    	var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
    	var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
    	var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));

    	return {
    		leftAndTop: left.concat(top),
    		rightAndBottom: right.concat(bottom),
    		chartArea: filterByPosition(layoutBoxes, 'chartArea'),
    		vertical: left.concat(right),
    		horizontal: top.concat(bottom)
    	};
    }

    function getCombinedMax(maxPadding, chartArea, a, b) {
    	return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
    }

    function updateDims(chartArea, params, layout) {
    	var box = layout.box;
    	var maxPadding = chartArea.maxPadding;
    	var newWidth, newHeight;

    	if (layout.size) {
    		// this layout was already counted for, lets first reduce old size
    		chartArea[layout.pos] -= layout.size;
    	}
    	layout.size = layout.horizontal ? box.height : box.width;
    	chartArea[layout.pos] += layout.size;

    	if (box.getPadding) {
    		var boxPadding = box.getPadding();
    		maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
    		maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
    		maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
    		maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
    	}

    	newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right');
    	newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom');

    	if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
    		chartArea.w = newWidth;
    		chartArea.h = newHeight;

    		// return true if chart area changed in layout's direction
    		return layout.horizontal ? newWidth !== chartArea.w : newHeight !== chartArea.h;
    	}
    }

    function handleMaxPadding(chartArea) {
    	var maxPadding = chartArea.maxPadding;

    	function updatePos(pos) {
    		var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    		chartArea[pos] += change;
    		return change;
    	}
    	chartArea.y += updatePos('top');
    	chartArea.x += updatePos('left');
    	updatePos('right');
    	updatePos('bottom');
    }

    function getMargins(horizontal, chartArea) {
    	var maxPadding = chartArea.maxPadding;

    	function marginForPositions(positions) {
    		var margin = {left: 0, top: 0, right: 0, bottom: 0};
    		positions.forEach(function(pos) {
    			margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    		});
    		return margin;
    	}

    	return horizontal
    		? marginForPositions(['left', 'right'])
    		: marginForPositions(['top', 'bottom']);
    }

    function fitBoxes(boxes, chartArea, params) {
    	var refitBoxes = [];
    	var i, ilen, layout, box, refit, changed;

    	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
    		layout = boxes[i];
    		box = layout.box;

    		box.update(
    			layout.width || chartArea.w,
    			layout.height || chartArea.h,
    			getMargins(layout.horizontal, chartArea)
    		);
    		if (updateDims(chartArea, params, layout)) {
    			changed = true;
    			if (refitBoxes.length) {
    				// Dimensions changed and there were non full width boxes before this
    				// -> we have to refit those
    				refit = true;
    			}
    		}
    		if (!box.fullWidth) { // fullWidth boxes don't need to be re-fitted in any case
    			refitBoxes.push(layout);
    		}
    	}

    	return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
    }

    function placeBoxes(boxes, chartArea, params) {
    	var userPadding = params.padding;
    	var x = chartArea.x;
    	var y = chartArea.y;
    	var i, ilen, layout, box;

    	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
    		layout = boxes[i];
    		box = layout.box;
    		if (layout.horizontal) {
    			box.left = box.fullWidth ? userPadding.left : chartArea.left;
    			box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
    			box.top = y;
    			box.bottom = y + box.height;
    			box.width = box.right - box.left;
    			y = box.bottom;
    		} else {
    			box.left = x;
    			box.right = x + box.width;
    			box.top = chartArea.top;
    			box.bottom = chartArea.top + chartArea.h;
    			box.height = box.bottom - box.top;
    			x = box.right;
    		}
    	}

    	chartArea.x = x;
    	chartArea.y = y;
    }

    core_defaults._set('global', {
    	layout: {
    		padding: {
    			top: 0,
    			right: 0,
    			bottom: 0,
    			left: 0
    		}
    	}
    });

    /**
     * @interface ILayoutItem
     * @prop {string} position - The position of the item in the chart layout. Possible values are
     * 'left', 'top', 'right', 'bottom', and 'chartArea'
     * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area
     * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
     * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
     * @prop {function} update - Takes two parameters: width and height. Returns size of item
     * @prop {function} getPadding -  Returns an object with padding on the edges
     * @prop {number} width - Width of item. Must be valid after update()
     * @prop {number} height - Height of item. Must be valid after update()
     * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update
     * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update
     * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update
     * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
     */

    // The layout service is very self explanatory.  It's responsible for the layout within a chart.
    // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
    // It is this service's responsibility of carrying out that layout.
    var core_layouts = {
    	defaults: {},

    	/**
    	 * Register a box to a chart.
    	 * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
    	 * @param {Chart} chart - the chart to use
    	 * @param {ILayoutItem} item - the item to add to be layed out
    	 */
    	addBox: function(chart, item) {
    		if (!chart.boxes) {
    			chart.boxes = [];
    		}

    		// initialize item with default values
    		item.fullWidth = item.fullWidth || false;
    		item.position = item.position || 'top';
    		item.weight = item.weight || 0;
    		item._layers = item._layers || function() {
    			return [{
    				z: 0,
    				draw: function() {
    					item.draw.apply(item, arguments);
    				}
    			}];
    		};

    		chart.boxes.push(item);
    	},

    	/**
    	 * Remove a layoutItem from a chart
    	 * @param {Chart} chart - the chart to remove the box from
    	 * @param {ILayoutItem} layoutItem - the item to remove from the layout
    	 */
    	removeBox: function(chart, layoutItem) {
    		var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    		if (index !== -1) {
    			chart.boxes.splice(index, 1);
    		}
    	},

    	/**
    	 * Sets (or updates) options on the given `item`.
    	 * @param {Chart} chart - the chart in which the item lives (or will be added to)
    	 * @param {ILayoutItem} item - the item to configure with the given options
    	 * @param {object} options - the new item options.
    	 */
    	configure: function(chart, item, options) {
    		var props = ['fullWidth', 'position', 'weight'];
    		var ilen = props.length;
    		var i = 0;
    		var prop;

    		for (; i < ilen; ++i) {
    			prop = props[i];
    			if (options.hasOwnProperty(prop)) {
    				item[prop] = options[prop];
    			}
    		}
    	},

    	/**
    	 * Fits boxes of the given chart into the given size by having each box measure itself
    	 * then running a fitting algorithm
    	 * @param {Chart} chart - the chart
    	 * @param {number} width - the width to fit into
    	 * @param {number} height - the height to fit into
    	 */
    	update: function(chart, width, height) {
    		if (!chart) {
    			return;
    		}

    		var layoutOptions = chart.options.layout || {};
    		var padding = helpers$1.options.toPadding(layoutOptions.padding);

    		var availableWidth = width - padding.width;
    		var availableHeight = height - padding.height;
    		var boxes = buildLayoutBoxes(chart.boxes);
    		var verticalBoxes = boxes.vertical;
    		var horizontalBoxes = boxes.horizontal;

    		// Essentially we now have any number of boxes on each of the 4 sides.
    		// Our canvas looks like the following.
    		// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
    		// B1 is the bottom axis
    		// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
    		// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
    		// an error will be thrown.
    		//
    		// |----------------------------------------------------|
    		// |                  T1 (Full Width)                   |
    		// |----------------------------------------------------|
    		// |    |    |                 T2                  |    |
    		// |    |----|-------------------------------------|----|
    		// |    |    | C1 |                           | C2 |    |
    		// |    |    |----|                           |----|    |
    		// |    |    |                                     |    |
    		// | L1 | L2 |           ChartArea (C0)            | R1 |
    		// |    |    |                                     |    |
    		// |    |    |----|                           |----|    |
    		// |    |    | C3 |                           | C4 |    |
    		// |    |----|-------------------------------------|----|
    		// |    |    |                 B1                  |    |
    		// |----------------------------------------------------|
    		// |                  B2 (Full Width)                   |
    		// |----------------------------------------------------|
    		//

    		var params = Object.freeze({
    			outerWidth: width,
    			outerHeight: height,
    			padding: padding,
    			availableWidth: availableWidth,
    			vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
    			hBoxMaxHeight: availableHeight / 2
    		});
    		var chartArea = extend({
    			maxPadding: extend({}, padding),
    			w: availableWidth,
    			h: availableHeight,
    			x: padding.left,
    			y: padding.top
    		}, padding);

    		setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);

    		// First fit vertical boxes
    		fitBoxes(verticalBoxes, chartArea, params);

    		// Then fit horizontal boxes
    		if (fitBoxes(horizontalBoxes, chartArea, params)) {
    			// if the area changed, re-fit vertical boxes
    			fitBoxes(verticalBoxes, chartArea, params);
    		}

    		handleMaxPadding(chartArea);

    		// Finally place the boxes to correct coordinates
    		placeBoxes(boxes.leftAndTop, chartArea, params);

    		// Move to opposite side of chart
    		chartArea.x += chartArea.w;
    		chartArea.y += chartArea.h;

    		placeBoxes(boxes.rightAndBottom, chartArea, params);

    		chart.chartArea = {
    			left: chartArea.left,
    			top: chartArea.top,
    			right: chartArea.left + chartArea.w,
    			bottom: chartArea.top + chartArea.h
    		};

    		// Finally update boxes in chartArea (radial scale for example)
    		helpers$1.each(boxes.chartArea, function(layout) {
    			var box = layout.box;
    			extend(box, chart.chartArea);
    			box.update(chartArea.w, chartArea.h);
    		});
    	}
    };

    /**
     * Platform fallback implementation (minimal).
     * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
     */

    var platform_basic = {
    	acquireContext: function(item) {
    		if (item && item.canvas) {
    			// Support for any object associated to a canvas (including a context2d)
    			item = item.canvas;
    		}

    		return item && item.getContext('2d') || null;
    	}
    };

    var platform_dom = "/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n";

    var platform_dom$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': platform_dom
    });

    var stylesheet = getCjsExportFromNamespace(platform_dom$1);

    var EXPANDO_KEY = '$chartjs';
    var CSS_PREFIX = 'chartjs-';
    var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';
    var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
    var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
    var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];

    /**
     * DOM event types -> Chart.js event types.
     * Note: only events with different types are mapped.
     * @see https://developer.mozilla.org/en-US/docs/Web/Events
     */
    var EVENT_TYPES = {
    	touchstart: 'mousedown',
    	touchmove: 'mousemove',
    	touchend: 'mouseup',
    	pointerenter: 'mouseenter',
    	pointerdown: 'mousedown',
    	pointermove: 'mousemove',
    	pointerup: 'mouseup',
    	pointerleave: 'mouseout',
    	pointerout: 'mouseout'
    };

    /**
     * The "used" size is the final value of a dimension property after all calculations have
     * been performed. This method uses the computed style of `element` but returns undefined
     * if the computed style is not expressed in pixels. That can happen in some cases where
     * `element` has a size relative to its parent and this last one is not yet displayed,
     * for example because of `display: none` on a parent node.
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
     * @returns {number} Size in pixels or undefined if unknown.
     */
    function readUsedSize(element, property) {
    	var value = helpers$1.getStyle(element, property);
    	var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
    	return matches ? Number(matches[1]) : undefined;
    }

    /**
     * Initializes the canvas style and render size without modifying the canvas display size,
     * since responsiveness is handled by the controller.resize() method. The config is used
     * to determine the aspect ratio to apply in case no explicit height has been specified.
     */
    function initCanvas(canvas, config) {
    	var style = canvas.style;

    	// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
    	// returns null or '' if no explicit value has been set to the canvas attribute.
    	var renderHeight = canvas.getAttribute('height');
    	var renderWidth = canvas.getAttribute('width');

    	// Chart.js modifies some canvas values that we want to restore on destroy
    	canvas[EXPANDO_KEY] = {
    		initial: {
    			height: renderHeight,
    			width: renderWidth,
    			style: {
    				display: style.display,
    				height: style.height,
    				width: style.width
    			}
    		}
    	};

    	// Force canvas to display as block to avoid extra space caused by inline
    	// elements, which would interfere with the responsive resize process.
    	// https://github.com/chartjs/Chart.js/issues/2538
    	style.display = style.display || 'block';

    	if (renderWidth === null || renderWidth === '') {
    		var displayWidth = readUsedSize(canvas, 'width');
    		if (displayWidth !== undefined) {
    			canvas.width = displayWidth;
    		}
    	}

    	if (renderHeight === null || renderHeight === '') {
    		if (canvas.style.height === '') {
    			// If no explicit render height and style height, let's apply the aspect ratio,
    			// which one can be specified by the user but also by charts as default option
    			// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
    			canvas.height = canvas.width / (config.options.aspectRatio || 2);
    		} else {
    			var displayHeight = readUsedSize(canvas, 'height');
    			if (displayWidth !== undefined) {
    				canvas.height = displayHeight;
    			}
    		}
    	}

    	return canvas;
    }

    /**
     * Detects support for options object argument in addEventListener.
     * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
     * @private
     */
    var supportsEventListenerOptions = (function() {
    	var supports = false;
    	try {
    		var options = Object.defineProperty({}, 'passive', {
    			// eslint-disable-next-line getter-return
    			get: function() {
    				supports = true;
    			}
    		});
    		window.addEventListener('e', null, options);
    	} catch (e) {
    		// continue regardless of error
    	}
    	return supports;
    }());

    // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
    // https://github.com/chartjs/Chart.js/issues/4287
    var eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;

    function addListener(node, type, listener) {
    	node.addEventListener(type, listener, eventListenerOptions);
    }

    function removeListener(node, type, listener) {
    	node.removeEventListener(type, listener, eventListenerOptions);
    }

    function createEvent(type, chart, x, y, nativeEvent) {
    	return {
    		type: type,
    		chart: chart,
    		native: nativeEvent || null,
    		x: x !== undefined ? x : null,
    		y: y !== undefined ? y : null,
    	};
    }

    function fromNativeEvent(event, chart) {
    	var type = EVENT_TYPES[event.type] || event.type;
    	var pos = helpers$1.getRelativePosition(event, chart);
    	return createEvent(type, chart, pos.x, pos.y, event);
    }

    function throttled(fn, thisArg) {
    	var ticking = false;
    	var args = [];

    	return function() {
    		args = Array.prototype.slice.call(arguments);
    		thisArg = thisArg || this;

    		if (!ticking) {
    			ticking = true;
    			helpers$1.requestAnimFrame.call(window, function() {
    				ticking = false;
    				fn.apply(thisArg, args);
    			});
    		}
    	};
    }

    function createDiv(cls) {
    	var el = document.createElement('div');
    	el.className = cls || '';
    	return el;
    }

    // Implementation based on https://github.com/marcj/css-element-queries
    function createResizer(handler) {
    	var maxSize = 1000000;

    	// NOTE(SB) Don't use innerHTML because it could be considered unsafe.
    	// https://github.com/chartjs/Chart.js/issues/5902
    	var resizer = createDiv(CSS_SIZE_MONITOR);
    	var expand = createDiv(CSS_SIZE_MONITOR + '-expand');
    	var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');

    	expand.appendChild(createDiv());
    	shrink.appendChild(createDiv());

    	resizer.appendChild(expand);
    	resizer.appendChild(shrink);
    	resizer._reset = function() {
    		expand.scrollLeft = maxSize;
    		expand.scrollTop = maxSize;
    		shrink.scrollLeft = maxSize;
    		shrink.scrollTop = maxSize;
    	};

    	var onScroll = function() {
    		resizer._reset();
    		handler();
    	};

    	addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
    	addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));

    	return resizer;
    }

    // https://davidwalsh.name/detect-node-insertion
    function watchForRender(node, handler) {
    	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
    	var proxy = expando.renderProxy = function(e) {
    		if (e.animationName === CSS_RENDER_ANIMATION) {
    			handler();
    		}
    	};

    	helpers$1.each(ANIMATION_START_EVENTS, function(type) {
    		addListener(node, type, proxy);
    	});

    	// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
    	// is removed then added back immediately (same animation frame?). Accessing the
    	// `offsetParent` property will force a reflow and re-evaluate the CSS animation.
    	// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
    	// https://github.com/chartjs/Chart.js/issues/4737
    	expando.reflow = !!node.offsetParent;

    	node.classList.add(CSS_RENDER_MONITOR);
    }

    function unwatchForRender(node) {
    	var expando = node[EXPANDO_KEY] || {};
    	var proxy = expando.renderProxy;

    	if (proxy) {
    		helpers$1.each(ANIMATION_START_EVENTS, function(type) {
    			removeListener(node, type, proxy);
    		});

    		delete expando.renderProxy;
    	}

    	node.classList.remove(CSS_RENDER_MONITOR);
    }

    function addResizeListener(node, listener, chart) {
    	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});

    	// Let's keep track of this added resizer and thus avoid DOM query when removing it.
    	var resizer = expando.resizer = createResizer(throttled(function() {
    		if (expando.resizer) {
    			var container = chart.options.maintainAspectRatio && node.parentNode;
    			var w = container ? container.clientWidth : 0;
    			listener(createEvent('resize', chart));
    			if (container && container.clientWidth < w && chart.canvas) {
    				// If the container size shrank during chart resize, let's assume
    				// scrollbar appeared. So we resize again with the scrollbar visible -
    				// effectively making chart smaller and the scrollbar hidden again.
    				// Because we are inside `throttled`, and currently `ticking`, scroll
    				// events are ignored during this whole 2 resize process.
    				// If we assumed wrong and something else happened, we are resizing
    				// twice in a frame (potential performance issue)
    				listener(createEvent('resize', chart));
    			}
    		}
    	}));

    	// The resizer needs to be attached to the node parent, so we first need to be
    	// sure that `node` is attached to the DOM before injecting the resizer element.
    	watchForRender(node, function() {
    		if (expando.resizer) {
    			var container = node.parentNode;
    			if (container && container !== resizer.parentNode) {
    				container.insertBefore(resizer, container.firstChild);
    			}

    			// The container size might have changed, let's reset the resizer state.
    			resizer._reset();
    		}
    	});
    }

    function removeResizeListener(node) {
    	var expando = node[EXPANDO_KEY] || {};
    	var resizer = expando.resizer;

    	delete expando.resizer;
    	unwatchForRender(node);

    	if (resizer && resizer.parentNode) {
    		resizer.parentNode.removeChild(resizer);
    	}
    }

    /**
     * Injects CSS styles inline if the styles are not already present.
     * @param {HTMLDocument|ShadowRoot} rootNode - the node to contain the <style>.
     * @param {string} css - the CSS to be injected.
     */
    function injectCSS(rootNode, css) {
    	// https://stackoverflow.com/q/3922139
    	var expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});
    	if (!expando.containsStyles) {
    		expando.containsStyles = true;
    		css = '/* Chart.js */\n' + css;
    		var style = document.createElement('style');
    		style.setAttribute('type', 'text/css');
    		style.appendChild(document.createTextNode(css));
    		rootNode.appendChild(style);
    	}
    }

    var platform_dom$2 = {
    	/**
    	 * When `true`, prevents the automatic injection of the stylesheet required to
    	 * correctly detect when the chart is added to the DOM and then resized. This
    	 * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)
    	 * to be manually imported to make this library compatible with any CSP.
    	 * See https://github.com/chartjs/Chart.js/issues/5208
    	 */
    	disableCSSInjection: false,

    	/**
    	 * This property holds whether this platform is enabled for the current environment.
    	 * Currently used by platform.js to select the proper implementation.
    	 * @private
    	 */
    	_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',

    	/**
    	 * Initializes resources that depend on platform options.
    	 * @param {HTMLCanvasElement} canvas - The Canvas element.
    	 * @private
    	 */
    	_ensureLoaded: function(canvas) {
    		if (!this.disableCSSInjection) {
    			// If the canvas is in a shadow DOM, then the styles must also be inserted
    			// into the same shadow DOM.
    			// https://github.com/chartjs/Chart.js/issues/5763
    			var root = canvas.getRootNode ? canvas.getRootNode() : document;
    			var targetNode = root.host ? root : document.head;
    			injectCSS(targetNode, stylesheet);
    		}
    	},

    	acquireContext: function(item, config) {
    		if (typeof item === 'string') {
    			item = document.getElementById(item);
    		} else if (item.length) {
    			// Support for array based queries (such as jQuery)
    			item = item[0];
    		}

    		if (item && item.canvas) {
    			// Support for any object associated to a canvas (including a context2d)
    			item = item.canvas;
    		}

    		// To prevent canvas fingerprinting, some add-ons undefine the getContext
    		// method, for example: https://github.com/kkapsner/CanvasBlocker
    		// https://github.com/chartjs/Chart.js/issues/2807
    		var context = item && item.getContext && item.getContext('2d');

    		// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
    		// inside an iframe or when running in a protected environment. We could guess the
    		// types from their toString() value but let's keep things flexible and assume it's
    		// a sufficient condition if the item has a context2D which has item as `canvas`.
    		// https://github.com/chartjs/Chart.js/issues/3887
    		// https://github.com/chartjs/Chart.js/issues/4102
    		// https://github.com/chartjs/Chart.js/issues/4152
    		if (context && context.canvas === item) {
    			// Load platform resources on first chart creation, to make it possible to
    			// import the library before setting platform options.
    			this._ensureLoaded(item);
    			initCanvas(item, config);
    			return context;
    		}

    		return null;
    	},

    	releaseContext: function(context) {
    		var canvas = context.canvas;
    		if (!canvas[EXPANDO_KEY]) {
    			return;
    		}

    		var initial = canvas[EXPANDO_KEY].initial;
    		['height', 'width'].forEach(function(prop) {
    			var value = initial[prop];
    			if (helpers$1.isNullOrUndef(value)) {
    				canvas.removeAttribute(prop);
    			} else {
    				canvas.setAttribute(prop, value);
    			}
    		});

    		helpers$1.each(initial.style || {}, function(value, key) {
    			canvas.style[key] = value;
    		});

    		// The canvas render size might have been changed (and thus the state stack discarded),
    		// we can't use save() and restore() to restore the initial state. So make sure that at
    		// least the canvas context is reset to the default state by setting the canvas width.
    		// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
    		// eslint-disable-next-line no-self-assign
    		canvas.width = canvas.width;

    		delete canvas[EXPANDO_KEY];
    	},

    	addEventListener: function(chart, type, listener) {
    		var canvas = chart.canvas;
    		if (type === 'resize') {
    			// Note: the resize event is not supported on all browsers.
    			addResizeListener(canvas, listener, chart);
    			return;
    		}

    		var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
    		var proxies = expando.proxies || (expando.proxies = {});
    		var proxy = proxies[chart.id + '_' + type] = function(event) {
    			listener(fromNativeEvent(event, chart));
    		};

    		addListener(canvas, type, proxy);
    	},

    	removeEventListener: function(chart, type, listener) {
    		var canvas = chart.canvas;
    		if (type === 'resize') {
    			// Note: the resize event is not supported on all browsers.
    			removeResizeListener(canvas);
    			return;
    		}

    		var expando = listener[EXPANDO_KEY] || {};
    		var proxies = expando.proxies || {};
    		var proxy = proxies[chart.id + '_' + type];
    		if (!proxy) {
    			return;
    		}

    		removeListener(canvas, type, proxy);
    	}
    };

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use EventTarget.addEventListener instead.
     * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
     * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
     * @function Chart.helpers.addEvent
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.addEvent = addListener;

    /**
     * Provided for backward compatibility, use EventTarget.removeEventListener instead.
     * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
     * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
     * @function Chart.helpers.removeEvent
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.removeEvent = removeListener;

    // @TODO Make possible to select another platform at build time.
    var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;

    /**
     * @namespace Chart.platform
     * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
     * @since 2.4.0
     */
    var platform = helpers$1.extend({
    	/**
    	 * @since 2.7.0
    	 */
    	initialize: function() {},

    	/**
    	 * Called at chart construction time, returns a context2d instance implementing
    	 * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
    	 * @param {*} item - The native item from which to acquire context (platform specific)
    	 * @param {object} options - The chart options
    	 * @returns {CanvasRenderingContext2D} context2d instance
    	 */
    	acquireContext: function() {},

    	/**
    	 * Called at chart destruction time, releases any resources associated to the context
    	 * previously returned by the acquireContext() method.
    	 * @param {CanvasRenderingContext2D} context - The context2d instance
    	 * @returns {boolean} true if the method succeeded, else false
    	 */
    	releaseContext: function() {},

    	/**
    	 * Registers the specified listener on the given chart.
    	 * @param {Chart} chart - Chart from which to listen for event
    	 * @param {string} type - The ({@link IEvent}) type to listen for
    	 * @param {function} listener - Receives a notification (an object that implements
    	 * the {@link IEvent} interface) when an event of the specified type occurs.
    	 */
    	addEventListener: function() {},

    	/**
    	 * Removes the specified listener previously registered with addEventListener.
    	 * @param {Chart} chart - Chart from which to remove the listener
    	 * @param {string} type - The ({@link IEvent}) type to remove
    	 * @param {function} listener - The listener function to remove from the event target.
    	 */
    	removeEventListener: function() {}

    }, implementation);

    core_defaults._set('global', {
    	plugins: {}
    });

    /**
     * The plugin service singleton
     * @namespace Chart.plugins
     * @since 2.1.0
     */
    var core_plugins = {
    	/**
    	 * Globally registered plugins.
    	 * @private
    	 */
    	_plugins: [],

    	/**
    	 * This identifier is used to invalidate the descriptors cache attached to each chart
    	 * when a global plugin is registered or unregistered. In this case, the cache ID is
    	 * incremented and descriptors are regenerated during following API calls.
    	 * @private
    	 */
    	_cacheId: 0,

    	/**
    	 * Registers the given plugin(s) if not already registered.
    	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
    	 */
    	register: function(plugins) {
    		var p = this._plugins;
    		([]).concat(plugins).forEach(function(plugin) {
    			if (p.indexOf(plugin) === -1) {
    				p.push(plugin);
    			}
    		});

    		this._cacheId++;
    	},

    	/**
    	 * Unregisters the given plugin(s) only if registered.
    	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
    	 */
    	unregister: function(plugins) {
    		var p = this._plugins;
    		([]).concat(plugins).forEach(function(plugin) {
    			var idx = p.indexOf(plugin);
    			if (idx !== -1) {
    				p.splice(idx, 1);
    			}
    		});

    		this._cacheId++;
    	},

    	/**
    	 * Remove all registered plugins.
    	 * @since 2.1.5
    	 */
    	clear: function() {
    		this._plugins = [];
    		this._cacheId++;
    	},

    	/**
    	 * Returns the number of registered plugins?
    	 * @returns {number}
    	 * @since 2.1.5
    	 */
    	count: function() {
    		return this._plugins.length;
    	},

    	/**
    	 * Returns all registered plugin instances.
    	 * @returns {IPlugin[]} array of plugin objects.
    	 * @since 2.1.5
    	 */
    	getAll: function() {
    		return this._plugins;
    	},

    	/**
    	 * Calls enabled plugins for `chart` on the specified hook and with the given args.
    	 * This method immediately returns as soon as a plugin explicitly returns false. The
    	 * returned value can be used, for instance, to interrupt the current action.
    	 * @param {Chart} chart - The chart instance for which plugins should be called.
    	 * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
    	 * @param {Array} [args] - Extra arguments to apply to the hook call.
    	 * @returns {boolean} false if any of the plugins return false, else returns true.
    	 */
    	notify: function(chart, hook, args) {
    		var descriptors = this.descriptors(chart);
    		var ilen = descriptors.length;
    		var i, descriptor, plugin, params, method;

    		for (i = 0; i < ilen; ++i) {
    			descriptor = descriptors[i];
    			plugin = descriptor.plugin;
    			method = plugin[hook];
    			if (typeof method === 'function') {
    				params = [chart].concat(args || []);
    				params.push(descriptor.options);
    				if (method.apply(plugin, params) === false) {
    					return false;
    				}
    			}
    		}

    		return true;
    	},

    	/**
    	 * Returns descriptors of enabled plugins for the given chart.
    	 * @returns {object[]} [{ plugin, options }]
    	 * @private
    	 */
    	descriptors: function(chart) {
    		var cache = chart.$plugins || (chart.$plugins = {});
    		if (cache.id === this._cacheId) {
    			return cache.descriptors;
    		}

    		var plugins = [];
    		var descriptors = [];
    		var config = (chart && chart.config) || {};
    		var options = (config.options && config.options.plugins) || {};

    		this._plugins.concat(config.plugins || []).forEach(function(plugin) {
    			var idx = plugins.indexOf(plugin);
    			if (idx !== -1) {
    				return;
    			}

    			var id = plugin.id;
    			var opts = options[id];
    			if (opts === false) {
    				return;
    			}

    			if (opts === true) {
    				opts = helpers$1.clone(core_defaults.global.plugins[id]);
    			}

    			plugins.push(plugin);
    			descriptors.push({
    				plugin: plugin,
    				options: opts || {}
    			});
    		});

    		cache.descriptors = descriptors;
    		cache.id = this._cacheId;
    		return descriptors;
    	},

    	/**
    	 * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
    	 * but in some cases, this reference can be changed by the user when updating options.
    	 * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
    	 * @private
    	 */
    	_invalidate: function(chart) {
    		delete chart.$plugins;
    	}
    };

    var core_scaleService = {
    	// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
    	// use the new chart options to grab the correct scale
    	constructors: {},
    	// Use a registration function so that we can move to an ES6 map when we no longer need to support
    	// old browsers

    	// Scale config defaults
    	defaults: {},
    	registerScaleType: function(type, scaleConstructor, scaleDefaults) {
    		this.constructors[type] = scaleConstructor;
    		this.defaults[type] = helpers$1.clone(scaleDefaults);
    	},
    	getScaleConstructor: function(type) {
    		return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
    	},
    	getScaleDefaults: function(type) {
    		// Return the scale defaults merged with the global settings so that we always use the latest ones
    		return this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};
    	},
    	updateScaleDefaults: function(type, additions) {
    		var me = this;
    		if (me.defaults.hasOwnProperty(type)) {
    			me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
    		}
    	},
    	addScalesToLayout: function(chart) {
    		// Adds each scale to the chart.boxes array to be sized accordingly
    		helpers$1.each(chart.scales, function(scale) {
    			// Set ILayoutItem parameters for backwards compatibility
    			scale.fullWidth = scale.options.fullWidth;
    			scale.position = scale.options.position;
    			scale.weight = scale.options.weight;
    			core_layouts.addBox(chart, scale);
    		});
    	}
    };

    var valueOrDefault$8 = helpers$1.valueOrDefault;
    var getRtlHelper = helpers$1.rtl.getRtlAdapter;

    core_defaults._set('global', {
    	tooltips: {
    		enabled: true,
    		custom: null,
    		mode: 'nearest',
    		position: 'average',
    		intersect: true,
    		backgroundColor: 'rgba(0,0,0,0.8)',
    		titleFontStyle: 'bold',
    		titleSpacing: 2,
    		titleMarginBottom: 6,
    		titleFontColor: '#fff',
    		titleAlign: 'left',
    		bodySpacing: 2,
    		bodyFontColor: '#fff',
    		bodyAlign: 'left',
    		footerFontStyle: 'bold',
    		footerSpacing: 2,
    		footerMarginTop: 6,
    		footerFontColor: '#fff',
    		footerAlign: 'left',
    		yPadding: 6,
    		xPadding: 6,
    		caretPadding: 2,
    		caretSize: 5,
    		cornerRadius: 6,
    		multiKeyBackground: '#fff',
    		displayColors: true,
    		borderColor: 'rgba(0,0,0,0)',
    		borderWidth: 0,
    		callbacks: {
    			// Args are: (tooltipItems, data)
    			beforeTitle: helpers$1.noop,
    			title: function(tooltipItems, data) {
    				var title = '';
    				var labels = data.labels;
    				var labelCount = labels ? labels.length : 0;

    				if (tooltipItems.length > 0) {
    					var item = tooltipItems[0];
    					if (item.label) {
    						title = item.label;
    					} else if (item.xLabel) {
    						title = item.xLabel;
    					} else if (labelCount > 0 && item.index < labelCount) {
    						title = labels[item.index];
    					}
    				}

    				return title;
    			},
    			afterTitle: helpers$1.noop,

    			// Args are: (tooltipItems, data)
    			beforeBody: helpers$1.noop,

    			// Args are: (tooltipItem, data)
    			beforeLabel: helpers$1.noop,
    			label: function(tooltipItem, data) {
    				var label = data.datasets[tooltipItem.datasetIndex].label || '';

    				if (label) {
    					label += ': ';
    				}
    				if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
    					label += tooltipItem.value;
    				} else {
    					label += tooltipItem.yLabel;
    				}
    				return label;
    			},
    			labelColor: function(tooltipItem, chart) {
    				var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
    				var activeElement = meta.data[tooltipItem.index];
    				var view = activeElement._view;
    				return {
    					borderColor: view.borderColor,
    					backgroundColor: view.backgroundColor
    				};
    			},
    			labelTextColor: function() {
    				return this._options.bodyFontColor;
    			},
    			afterLabel: helpers$1.noop,

    			// Args are: (tooltipItems, data)
    			afterBody: helpers$1.noop,

    			// Args are: (tooltipItems, data)
    			beforeFooter: helpers$1.noop,
    			footer: helpers$1.noop,
    			afterFooter: helpers$1.noop
    		}
    	}
    });

    var positioners = {
    	/**
    	 * Average mode places the tooltip at the average position of the elements shown
    	 * @function Chart.Tooltip.positioners.average
    	 * @param elements {ChartElement[]} the elements being displayed in the tooltip
    	 * @returns {object} tooltip position
    	 */
    	average: function(elements) {
    		if (!elements.length) {
    			return false;
    		}

    		var i, len;
    		var x = 0;
    		var y = 0;
    		var count = 0;

    		for (i = 0, len = elements.length; i < len; ++i) {
    			var el = elements[i];
    			if (el && el.hasValue()) {
    				var pos = el.tooltipPosition();
    				x += pos.x;
    				y += pos.y;
    				++count;
    			}
    		}

    		return {
    			x: x / count,
    			y: y / count
    		};
    	},

    	/**
    	 * Gets the tooltip position nearest of the item nearest to the event position
    	 * @function Chart.Tooltip.positioners.nearest
    	 * @param elements {Chart.Element[]} the tooltip elements
    	 * @param eventPosition {object} the position of the event in canvas coordinates
    	 * @returns {object} the tooltip position
    	 */
    	nearest: function(elements, eventPosition) {
    		var x = eventPosition.x;
    		var y = eventPosition.y;
    		var minDistance = Number.POSITIVE_INFINITY;
    		var i, len, nearestElement;

    		for (i = 0, len = elements.length; i < len; ++i) {
    			var el = elements[i];
    			if (el && el.hasValue()) {
    				var center = el.getCenterPoint();
    				var d = helpers$1.distanceBetweenPoints(eventPosition, center);

    				if (d < minDistance) {
    					minDistance = d;
    					nearestElement = el;
    				}
    			}
    		}

    		if (nearestElement) {
    			var tp = nearestElement.tooltipPosition();
    			x = tp.x;
    			y = tp.y;
    		}

    		return {
    			x: x,
    			y: y
    		};
    	}
    };

    // Helper to push or concat based on if the 2nd parameter is an array or not
    function pushOrConcat(base, toPush) {
    	if (toPush) {
    		if (helpers$1.isArray(toPush)) {
    			// base = base.concat(toPush);
    			Array.prototype.push.apply(base, toPush);
    		} else {
    			base.push(toPush);
    		}
    	}

    	return base;
    }

    /**
     * Returns array of strings split by newline
     * @param {string} value - The value to split by newline.
     * @returns {string[]} value if newline present - Returned from String split() method
     * @function
     */
    function splitNewlines(str) {
    	if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
    		return str.split('\n');
    	}
    	return str;
    }


    /**
     * Private helper to create a tooltip item model
     * @param element - the chart element (point, arc, bar) to create the tooltip item for
     * @return new tooltip item
     */
    function createTooltipItem(element) {
    	var xScale = element._xScale;
    	var yScale = element._yScale || element._scale; // handle radar || polarArea charts
    	var index = element._index;
    	var datasetIndex = element._datasetIndex;
    	var controller = element._chart.getDatasetMeta(datasetIndex).controller;
    	var indexScale = controller._getIndexScale();
    	var valueScale = controller._getValueScale();

    	return {
    		xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
    		yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
    		label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',
    		value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',
    		index: index,
    		datasetIndex: datasetIndex,
    		x: element._model.x,
    		y: element._model.y
    	};
    }

    /**
     * Helper to get the reset model for the tooltip
     * @param tooltipOpts {object} the tooltip options
     */
    function getBaseModel(tooltipOpts) {
    	var globalDefaults = core_defaults.global;

    	return {
    		// Positioning
    		xPadding: tooltipOpts.xPadding,
    		yPadding: tooltipOpts.yPadding,
    		xAlign: tooltipOpts.xAlign,
    		yAlign: tooltipOpts.yAlign,

    		// Drawing direction and text direction
    		rtl: tooltipOpts.rtl,
    		textDirection: tooltipOpts.textDirection,

    		// Body
    		bodyFontColor: tooltipOpts.bodyFontColor,
    		_bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
    		_bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
    		_bodyAlign: tooltipOpts.bodyAlign,
    		bodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
    		bodySpacing: tooltipOpts.bodySpacing,

    		// Title
    		titleFontColor: tooltipOpts.titleFontColor,
    		_titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
    		_titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
    		titleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
    		_titleAlign: tooltipOpts.titleAlign,
    		titleSpacing: tooltipOpts.titleSpacing,
    		titleMarginBottom: tooltipOpts.titleMarginBottom,

    		// Footer
    		footerFontColor: tooltipOpts.footerFontColor,
    		_footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
    		_footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
    		footerFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
    		_footerAlign: tooltipOpts.footerAlign,
    		footerSpacing: tooltipOpts.footerSpacing,
    		footerMarginTop: tooltipOpts.footerMarginTop,

    		// Appearance
    		caretSize: tooltipOpts.caretSize,
    		cornerRadius: tooltipOpts.cornerRadius,
    		backgroundColor: tooltipOpts.backgroundColor,
    		opacity: 0,
    		legendColorBackground: tooltipOpts.multiKeyBackground,
    		displayColors: tooltipOpts.displayColors,
    		borderColor: tooltipOpts.borderColor,
    		borderWidth: tooltipOpts.borderWidth
    	};
    }

    /**
     * Get the size of the tooltip
     */
    function getTooltipSize(tooltip, model) {
    	var ctx = tooltip._chart.ctx;

    	var height = model.yPadding * 2; // Tooltip Padding
    	var width = 0;

    	// Count of all lines in the body
    	var body = model.body;
    	var combinedBodyLength = body.reduce(function(count, bodyItem) {
    		return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
    	}, 0);
    	combinedBodyLength += model.beforeBody.length + model.afterBody.length;

    	var titleLineCount = model.title.length;
    	var footerLineCount = model.footer.length;
    	var titleFontSize = model.titleFontSize;
    	var bodyFontSize = model.bodyFontSize;
    	var footerFontSize = model.footerFontSize;

    	height += titleLineCount * titleFontSize; // Title Lines
    	height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
    	height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
    	height += combinedBodyLength * bodyFontSize; // Body Lines
    	height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
    	height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
    	height += footerLineCount * (footerFontSize); // Footer Lines
    	height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing

    	// Title width
    	var widthPadding = 0;
    	var maxLineWidth = function(line) {
    		width = Math.max(width, ctx.measureText(line).width + widthPadding);
    	};

    	ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
    	helpers$1.each(model.title, maxLineWidth);

    	// Body width
    	ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
    	helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);

    	// Body lines may include some extra width due to the color box
    	widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
    	helpers$1.each(body, function(bodyItem) {
    		helpers$1.each(bodyItem.before, maxLineWidth);
    		helpers$1.each(bodyItem.lines, maxLineWidth);
    		helpers$1.each(bodyItem.after, maxLineWidth);
    	});

    	// Reset back to 0
    	widthPadding = 0;

    	// Footer width
    	ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
    	helpers$1.each(model.footer, maxLineWidth);

    	// Add padding
    	width += 2 * model.xPadding;

    	return {
    		width: width,
    		height: height
    	};
    }

    /**
     * Helper to get the alignment of a tooltip given the size
     */
    function determineAlignment(tooltip, size) {
    	var model = tooltip._model;
    	var chart = tooltip._chart;
    	var chartArea = tooltip._chart.chartArea;
    	var xAlign = 'center';
    	var yAlign = 'center';

    	if (model.y < size.height) {
    		yAlign = 'top';
    	} else if (model.y > (chart.height - size.height)) {
    		yAlign = 'bottom';
    	}

    	var lf, rf; // functions to determine left, right alignment
    	var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
    	var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
    	var midX = (chartArea.left + chartArea.right) / 2;
    	var midY = (chartArea.top + chartArea.bottom) / 2;

    	if (yAlign === 'center') {
    		lf = function(x) {
    			return x <= midX;
    		};
    		rf = function(x) {
    			return x > midX;
    		};
    	} else {
    		lf = function(x) {
    			return x <= (size.width / 2);
    		};
    		rf = function(x) {
    			return x >= (chart.width - (size.width / 2));
    		};
    	}

    	olf = function(x) {
    		return x + size.width + model.caretSize + model.caretPadding > chart.width;
    	};
    	orf = function(x) {
    		return x - size.width - model.caretSize - model.caretPadding < 0;
    	};
    	yf = function(y) {
    		return y <= midY ? 'top' : 'bottom';
    	};

    	if (lf(model.x)) {
    		xAlign = 'left';

    		// Is tooltip too wide and goes over the right side of the chart.?
    		if (olf(model.x)) {
    			xAlign = 'center';
    			yAlign = yf(model.y);
    		}
    	} else if (rf(model.x)) {
    		xAlign = 'right';

    		// Is tooltip too wide and goes outside left edge of canvas?
    		if (orf(model.x)) {
    			xAlign = 'center';
    			yAlign = yf(model.y);
    		}
    	}

    	var opts = tooltip._options;
    	return {
    		xAlign: opts.xAlign ? opts.xAlign : xAlign,
    		yAlign: opts.yAlign ? opts.yAlign : yAlign
    	};
    }

    /**
     * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
     */
    function getBackgroundPoint(vm, size, alignment, chart) {
    	// Background Position
    	var x = vm.x;
    	var y = vm.y;

    	var caretSize = vm.caretSize;
    	var caretPadding = vm.caretPadding;
    	var cornerRadius = vm.cornerRadius;
    	var xAlign = alignment.xAlign;
    	var yAlign = alignment.yAlign;
    	var paddingAndSize = caretSize + caretPadding;
    	var radiusAndPadding = cornerRadius + caretPadding;

    	if (xAlign === 'right') {
    		x -= size.width;
    	} else if (xAlign === 'center') {
    		x -= (size.width / 2);
    		if (x + size.width > chart.width) {
    			x = chart.width - size.width;
    		}
    		if (x < 0) {
    			x = 0;
    		}
    	}

    	if (yAlign === 'top') {
    		y += paddingAndSize;
    	} else if (yAlign === 'bottom') {
    		y -= size.height + paddingAndSize;
    	} else {
    		y -= (size.height / 2);
    	}

    	if (yAlign === 'center') {
    		if (xAlign === 'left') {
    			x += paddingAndSize;
    		} else if (xAlign === 'right') {
    			x -= paddingAndSize;
    		}
    	} else if (xAlign === 'left') {
    		x -= radiusAndPadding;
    	} else if (xAlign === 'right') {
    		x += radiusAndPadding;
    	}

    	return {
    		x: x,
    		y: y
    	};
    }

    function getAlignedX(vm, align) {
    	return align === 'center'
    		? vm.x + vm.width / 2
    		: align === 'right'
    			? vm.x + vm.width - vm.xPadding
    			: vm.x + vm.xPadding;
    }

    /**
     * Helper to build before and after body lines
     */
    function getBeforeAfterBodyLines(callback) {
    	return pushOrConcat([], splitNewlines(callback));
    }

    var exports$4 = core_element.extend({
    	initialize: function() {
    		this._model = getBaseModel(this._options);
    		this._lastActive = [];
    	},

    	// Get the title
    	// Args are: (tooltipItem, data)
    	getTitle: function() {
    		var me = this;
    		var opts = me._options;
    		var callbacks = opts.callbacks;

    		var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
    		var title = callbacks.title.apply(me, arguments);
    		var afterTitle = callbacks.afterTitle.apply(me, arguments);

    		var lines = [];
    		lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    		lines = pushOrConcat(lines, splitNewlines(title));
    		lines = pushOrConcat(lines, splitNewlines(afterTitle));

    		return lines;
    	},

    	// Args are: (tooltipItem, data)
    	getBeforeBody: function() {
    		return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
    	},

    	// Args are: (tooltipItem, data)
    	getBody: function(tooltipItems, data) {
    		var me = this;
    		var callbacks = me._options.callbacks;
    		var bodyItems = [];

    		helpers$1.each(tooltipItems, function(tooltipItem) {
    			var bodyItem = {
    				before: [],
    				lines: [],
    				after: []
    			};
    			pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
    			pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
    			pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));

    			bodyItems.push(bodyItem);
    		});

    		return bodyItems;
    	},

    	// Args are: (tooltipItem, data)
    	getAfterBody: function() {
    		return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
    	},

    	// Get the footer and beforeFooter and afterFooter lines
    	// Args are: (tooltipItem, data)
    	getFooter: function() {
    		var me = this;
    		var callbacks = me._options.callbacks;

    		var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
    		var footer = callbacks.footer.apply(me, arguments);
    		var afterFooter = callbacks.afterFooter.apply(me, arguments);

    		var lines = [];
    		lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    		lines = pushOrConcat(lines, splitNewlines(footer));
    		lines = pushOrConcat(lines, splitNewlines(afterFooter));

    		return lines;
    	},

    	update: function(changed) {
    		var me = this;
    		var opts = me._options;

    		// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
    		// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
    		// which breaks any animations.
    		var existingModel = me._model;
    		var model = me._model = getBaseModel(opts);
    		var active = me._active;

    		var data = me._data;

    		// In the case where active.length === 0 we need to keep these at existing values for good animations
    		var alignment = {
    			xAlign: existingModel.xAlign,
    			yAlign: existingModel.yAlign
    		};
    		var backgroundPoint = {
    			x: existingModel.x,
    			y: existingModel.y
    		};
    		var tooltipSize = {
    			width: existingModel.width,
    			height: existingModel.height
    		};
    		var tooltipPosition = {
    			x: existingModel.caretX,
    			y: existingModel.caretY
    		};

    		var i, len;

    		if (active.length) {
    			model.opacity = 1;

    			var labelColors = [];
    			var labelTextColors = [];
    			tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);

    			var tooltipItems = [];
    			for (i = 0, len = active.length; i < len; ++i) {
    				tooltipItems.push(createTooltipItem(active[i]));
    			}

    			// If the user provided a filter function, use it to modify the tooltip items
    			if (opts.filter) {
    				tooltipItems = tooltipItems.filter(function(a) {
    					return opts.filter(a, data);
    				});
    			}

    			// If the user provided a sorting function, use it to modify the tooltip items
    			if (opts.itemSort) {
    				tooltipItems = tooltipItems.sort(function(a, b) {
    					return opts.itemSort(a, b, data);
    				});
    			}

    			// Determine colors for boxes
    			helpers$1.each(tooltipItems, function(tooltipItem) {
    				labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
    				labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
    			});


    			// Build the Text Lines
    			model.title = me.getTitle(tooltipItems, data);
    			model.beforeBody = me.getBeforeBody(tooltipItems, data);
    			model.body = me.getBody(tooltipItems, data);
    			model.afterBody = me.getAfterBody(tooltipItems, data);
    			model.footer = me.getFooter(tooltipItems, data);

    			// Initial positioning and colors
    			model.x = tooltipPosition.x;
    			model.y = tooltipPosition.y;
    			model.caretPadding = opts.caretPadding;
    			model.labelColors = labelColors;
    			model.labelTextColors = labelTextColors;

    			// data points
    			model.dataPoints = tooltipItems;

    			// We need to determine alignment of the tooltip
    			tooltipSize = getTooltipSize(this, model);
    			alignment = determineAlignment(this, tooltipSize);
    			// Final Size and Position
    			backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
    		} else {
    			model.opacity = 0;
    		}

    		model.xAlign = alignment.xAlign;
    		model.yAlign = alignment.yAlign;
    		model.x = backgroundPoint.x;
    		model.y = backgroundPoint.y;
    		model.width = tooltipSize.width;
    		model.height = tooltipSize.height;

    		// Point where the caret on the tooltip points to
    		model.caretX = tooltipPosition.x;
    		model.caretY = tooltipPosition.y;

    		me._model = model;

    		if (changed && opts.custom) {
    			opts.custom.call(me, model);
    		}

    		return me;
    	},

    	drawCaret: function(tooltipPoint, size) {
    		var ctx = this._chart.ctx;
    		var vm = this._view;
    		var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);

    		ctx.lineTo(caretPosition.x1, caretPosition.y1);
    		ctx.lineTo(caretPosition.x2, caretPosition.y2);
    		ctx.lineTo(caretPosition.x3, caretPosition.y3);
    	},
    	getCaretPosition: function(tooltipPoint, size, vm) {
    		var x1, x2, x3, y1, y2, y3;
    		var caretSize = vm.caretSize;
    		var cornerRadius = vm.cornerRadius;
    		var xAlign = vm.xAlign;
    		var yAlign = vm.yAlign;
    		var ptX = tooltipPoint.x;
    		var ptY = tooltipPoint.y;
    		var width = size.width;
    		var height = size.height;

    		if (yAlign === 'center') {
    			y2 = ptY + (height / 2);

    			if (xAlign === 'left') {
    				x1 = ptX;
    				x2 = x1 - caretSize;
    				x3 = x1;

    				y1 = y2 + caretSize;
    				y3 = y2 - caretSize;
    			} else {
    				x1 = ptX + width;
    				x2 = x1 + caretSize;
    				x3 = x1;

    				y1 = y2 - caretSize;
    				y3 = y2 + caretSize;
    			}
    		} else {
    			if (xAlign === 'left') {
    				x2 = ptX + cornerRadius + (caretSize);
    				x1 = x2 - caretSize;
    				x3 = x2 + caretSize;
    			} else if (xAlign === 'right') {
    				x2 = ptX + width - cornerRadius - caretSize;
    				x1 = x2 - caretSize;
    				x3 = x2 + caretSize;
    			} else {
    				x2 = vm.caretX;
    				x1 = x2 - caretSize;
    				x3 = x2 + caretSize;
    			}
    			if (yAlign === 'top') {
    				y1 = ptY;
    				y2 = y1 - caretSize;
    				y3 = y1;
    			} else {
    				y1 = ptY + height;
    				y2 = y1 + caretSize;
    				y3 = y1;
    				// invert drawing order
    				var tmp = x3;
    				x3 = x1;
    				x1 = tmp;
    			}
    		}
    		return {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};
    	},

    	drawTitle: function(pt, vm, ctx) {
    		var title = vm.title;
    		var length = title.length;
    		var titleFontSize, titleSpacing, i;

    		if (length) {
    			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

    			pt.x = getAlignedX(vm, vm._titleAlign);

    			ctx.textAlign = rtlHelper.textAlign(vm._titleAlign);
    			ctx.textBaseline = 'middle';

    			titleFontSize = vm.titleFontSize;
    			titleSpacing = vm.titleSpacing;

    			ctx.fillStyle = vm.titleFontColor;
    			ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);

    			for (i = 0; i < length; ++i) {
    				ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);
    				pt.y += titleFontSize + titleSpacing; // Line Height and spacing

    				if (i + 1 === length) {
    					pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
    				}
    			}
    		}
    	},

    	drawBody: function(pt, vm, ctx) {
    		var bodyFontSize = vm.bodyFontSize;
    		var bodySpacing = vm.bodySpacing;
    		var bodyAlign = vm._bodyAlign;
    		var body = vm.body;
    		var drawColorBoxes = vm.displayColors;
    		var xLinePadding = 0;
    		var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;

    		var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

    		var fillLineOfText = function(line) {
    			ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);
    			pt.y += bodyFontSize + bodySpacing;
    		};

    		var bodyItem, textColor, labelColors, lines, i, j, ilen, jlen;
    		var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);

    		ctx.textAlign = bodyAlign;
    		ctx.textBaseline = 'middle';
    		ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);

    		pt.x = getAlignedX(vm, bodyAlignForCalculation);

    		// Before body lines
    		ctx.fillStyle = vm.bodyFontColor;
    		helpers$1.each(vm.beforeBody, fillLineOfText);

    		xLinePadding = drawColorBoxes && bodyAlignForCalculation !== 'right'
    			? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)
    			: 0;

    		// Draw body lines now
    		for (i = 0, ilen = body.length; i < ilen; ++i) {
    			bodyItem = body[i];
    			textColor = vm.labelTextColors[i];
    			labelColors = vm.labelColors[i];

    			ctx.fillStyle = textColor;
    			helpers$1.each(bodyItem.before, fillLineOfText);

    			lines = bodyItem.lines;
    			for (j = 0, jlen = lines.length; j < jlen; ++j) {
    				// Draw Legend-like boxes if needed
    				if (drawColorBoxes) {
    					var rtlColorX = rtlHelper.x(colorX);

    					// Fill a white rect so that colours merge nicely if the opacity is < 1
    					ctx.fillStyle = vm.legendColorBackground;
    					ctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

    					// Border
    					ctx.lineWidth = 1;
    					ctx.strokeStyle = labelColors.borderColor;
    					ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

    					// Inner square
    					ctx.fillStyle = labelColors.backgroundColor;
    					ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
    					ctx.fillStyle = textColor;
    				}

    				fillLineOfText(lines[j]);
    			}

    			helpers$1.each(bodyItem.after, fillLineOfText);
    		}

    		// Reset back to 0 for after body
    		xLinePadding = 0;

    		// After body lines
    		helpers$1.each(vm.afterBody, fillLineOfText);
    		pt.y -= bodySpacing; // Remove last body spacing
    	},

    	drawFooter: function(pt, vm, ctx) {
    		var footer = vm.footer;
    		var length = footer.length;
    		var footerFontSize, i;

    		if (length) {
    			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

    			pt.x = getAlignedX(vm, vm._footerAlign);
    			pt.y += vm.footerMarginTop;

    			ctx.textAlign = rtlHelper.textAlign(vm._footerAlign);
    			ctx.textBaseline = 'middle';

    			footerFontSize = vm.footerFontSize;

    			ctx.fillStyle = vm.footerFontColor;
    			ctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);

    			for (i = 0; i < length; ++i) {
    				ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);
    				pt.y += footerFontSize + vm.footerSpacing;
    			}
    		}
    	},

    	drawBackground: function(pt, vm, ctx, tooltipSize) {
    		ctx.fillStyle = vm.backgroundColor;
    		ctx.strokeStyle = vm.borderColor;
    		ctx.lineWidth = vm.borderWidth;
    		var xAlign = vm.xAlign;
    		var yAlign = vm.yAlign;
    		var x = pt.x;
    		var y = pt.y;
    		var width = tooltipSize.width;
    		var height = tooltipSize.height;
    		var radius = vm.cornerRadius;

    		ctx.beginPath();
    		ctx.moveTo(x + radius, y);
    		if (yAlign === 'top') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x + width - radius, y);
    		ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    		if (yAlign === 'center' && xAlign === 'right') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x + width, y + height - radius);
    		ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    		if (yAlign === 'bottom') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x + radius, y + height);
    		ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    		if (yAlign === 'center' && xAlign === 'left') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x, y + radius);
    		ctx.quadraticCurveTo(x, y, x + radius, y);
    		ctx.closePath();

    		ctx.fill();

    		if (vm.borderWidth > 0) {
    			ctx.stroke();
    		}
    	},

    	draw: function() {
    		var ctx = this._chart.ctx;
    		var vm = this._view;

    		if (vm.opacity === 0) {
    			return;
    		}

    		var tooltipSize = {
    			width: vm.width,
    			height: vm.height
    		};
    		var pt = {
    			x: vm.x,
    			y: vm.y
    		};

    		// IE11/Edge does not like very small opacities, so snap to 0
    		var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;

    		// Truthy/falsey value for empty tooltip
    		var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;

    		if (this._options.enabled && hasTooltipContent) {
    			ctx.save();
    			ctx.globalAlpha = opacity;

    			// Draw Background
    			this.drawBackground(pt, vm, ctx, tooltipSize);

    			// Draw Title, Body, and Footer
    			pt.y += vm.yPadding;

    			helpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);

    			// Titles
    			this.drawTitle(pt, vm, ctx);

    			// Body
    			this.drawBody(pt, vm, ctx);

    			// Footer
    			this.drawFooter(pt, vm, ctx);

    			helpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);

    			ctx.restore();
    		}
    	},

    	/**
    	 * Handle an event
    	 * @private
    	 * @param {IEvent} event - The event to handle
    	 * @returns {boolean} true if the tooltip changed
    	 */
    	handleEvent: function(e) {
    		var me = this;
    		var options = me._options;
    		var changed = false;

    		me._lastActive = me._lastActive || [];

    		// Find Active Elements for tooltips
    		if (e.type === 'mouseout') {
    			me._active = [];
    		} else {
    			me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
    			if (options.reverse) {
    				me._active.reverse();
    			}
    		}

    		// Remember Last Actives
    		changed = !helpers$1.arrayEquals(me._active, me._lastActive);

    		// Only handle target event on tooltip change
    		if (changed) {
    			me._lastActive = me._active;

    			if (options.enabled || options.custom) {
    				me._eventPosition = {
    					x: e.x,
    					y: e.y
    				};

    				me.update(true);
    				me.pivot();
    			}
    		}

    		return changed;
    	}
    });

    /**
     * @namespace Chart.Tooltip.positioners
     */
    var positioners_1 = positioners;

    var core_tooltip = exports$4;
    core_tooltip.positioners = positioners_1;

    var valueOrDefault$9 = helpers$1.valueOrDefault;

    core_defaults._set('global', {
    	elements: {},
    	events: [
    		'mousemove',
    		'mouseout',
    		'click',
    		'touchstart',
    		'touchmove'
    	],
    	hover: {
    		onHover: null,
    		mode: 'nearest',
    		intersect: true,
    		animationDuration: 400
    	},
    	onClick: null,
    	maintainAspectRatio: true,
    	responsive: true,
    	responsiveAnimationDuration: 0
    });

    /**
     * Recursively merge the given config objects representing the `scales` option
     * by incorporating scale defaults in `xAxes` and `yAxes` array items, then
     * returns a deep copy of the result, thus doesn't alter inputs.
     */
    function mergeScaleConfig(/* config objects ... */) {
    	return helpers$1.merge({}, [].slice.call(arguments), {
    		merger: function(key, target, source, options) {
    			if (key === 'xAxes' || key === 'yAxes') {
    				var slen = source[key].length;
    				var i, type, scale;

    				if (!target[key]) {
    					target[key] = [];
    				}

    				for (i = 0; i < slen; ++i) {
    					scale = source[key][i];
    					type = valueOrDefault$9(scale.type, key === 'xAxes' ? 'category' : 'linear');

    					if (i >= target[key].length) {
    						target[key].push({});
    					}

    					if (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {
    						// new/untyped scale or type changed: let's apply the new defaults
    						// then merge source scale to correctly overwrite the defaults.
    						helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);
    					} else {
    						// scales type are the same
    						helpers$1.merge(target[key][i], scale);
    					}
    				}
    			} else {
    				helpers$1._merger(key, target, source, options);
    			}
    		}
    	});
    }

    /**
     * Recursively merge the given config objects as the root options by handling
     * default scale options for the `scales` and `scale` properties, then returns
     * a deep copy of the result, thus doesn't alter inputs.
     */
    function mergeConfig(/* config objects ... */) {
    	return helpers$1.merge({}, [].slice.call(arguments), {
    		merger: function(key, target, source, options) {
    			var tval = target[key] || {};
    			var sval = source[key];

    			if (key === 'scales') {
    				// scale config merging is complex. Add our own function here for that
    				target[key] = mergeScaleConfig(tval, sval);
    			} else if (key === 'scale') {
    				// used in polar area & radar charts since there is only one scale
    				target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
    			} else {
    				helpers$1._merger(key, target, source, options);
    			}
    		}
    	});
    }

    function initConfig(config) {
    	config = config || {};

    	// Do NOT use mergeConfig for the data object because this method merges arrays
    	// and so would change references to labels and datasets, preventing data updates.
    	var data = config.data = config.data || {};
    	data.datasets = data.datasets || [];
    	data.labels = data.labels || [];

    	config.options = mergeConfig(
    		core_defaults.global,
    		core_defaults[config.type],
    		config.options || {});

    	return config;
    }

    function updateConfig(chart) {
    	var newOptions = chart.options;

    	helpers$1.each(chart.scales, function(scale) {
    		core_layouts.removeBox(chart, scale);
    	});

    	newOptions = mergeConfig(
    		core_defaults.global,
    		core_defaults[chart.config.type],
    		newOptions);

    	chart.options = chart.config.options = newOptions;
    	chart.ensureScalesHaveIDs();
    	chart.buildOrUpdateScales();

    	// Tooltip
    	chart.tooltip._options = newOptions.tooltips;
    	chart.tooltip.initialize();
    }

    function nextAvailableScaleId(axesOpts, prefix, index) {
    	var id;
    	var hasId = function(obj) {
    		return obj.id === id;
    	};

    	do {
    		id = prefix + index++;
    	} while (helpers$1.findIndex(axesOpts, hasId) >= 0);

    	return id;
    }

    function positionIsHorizontal(position) {
    	return position === 'top' || position === 'bottom';
    }

    function compare2Level(l1, l2) {
    	return function(a, b) {
    		return a[l1] === b[l1]
    			? a[l2] - b[l2]
    			: a[l1] - b[l1];
    	};
    }

    var Chart = function(item, config) {
    	this.construct(item, config);
    	return this;
    };

    helpers$1.extend(Chart.prototype, /** @lends Chart */ {
    	/**
    	 * @private
    	 */
    	construct: function(item, config) {
    		var me = this;

    		config = initConfig(config);

    		var context = platform.acquireContext(item, config);
    		var canvas = context && context.canvas;
    		var height = canvas && canvas.height;
    		var width = canvas && canvas.width;

    		me.id = helpers$1.uid();
    		me.ctx = context;
    		me.canvas = canvas;
    		me.config = config;
    		me.width = width;
    		me.height = height;
    		me.aspectRatio = height ? width / height : null;
    		me.options = config.options;
    		me._bufferedRender = false;
    		me._layers = [];

    		/**
    		 * Provided for backward compatibility, Chart and Chart.Controller have been merged,
    		 * the "instance" still need to be defined since it might be called from plugins.
    		 * @prop Chart#chart
    		 * @deprecated since version 2.6.0
    		 * @todo remove at version 3
    		 * @private
    		 */
    		me.chart = me;
    		me.controller = me; // chart.chart.controller #inception

    		// Add the chart instance to the global namespace
    		Chart.instances[me.id] = me;

    		// Define alias to the config data: `chart.data === chart.config.data`
    		Object.defineProperty(me, 'data', {
    			get: function() {
    				return me.config.data;
    			},
    			set: function(value) {
    				me.config.data = value;
    			}
    		});

    		if (!context || !canvas) {
    			// The given item is not a compatible context2d element, let's return before finalizing
    			// the chart initialization but after setting basic chart / controller properties that
    			// can help to figure out that the chart is not valid (e.g chart.canvas !== null);
    			// https://github.com/chartjs/Chart.js/issues/2807
    			console.error("Failed to create chart: can't acquire context from the given item");
    			return;
    		}

    		me.initialize();
    		me.update();
    	},

    	/**
    	 * @private
    	 */
    	initialize: function() {
    		var me = this;

    		// Before init plugin notification
    		core_plugins.notify(me, 'beforeInit');

    		helpers$1.retinaScale(me, me.options.devicePixelRatio);

    		me.bindEvents();

    		if (me.options.responsive) {
    			// Initial resize before chart draws (must be silent to preserve initial animations).
    			me.resize(true);
    		}

    		me.initToolTip();

    		// After init plugin notification
    		core_plugins.notify(me, 'afterInit');

    		return me;
    	},

    	clear: function() {
    		helpers$1.canvas.clear(this);
    		return this;
    	},

    	stop: function() {
    		// Stops any current animation loop occurring
    		core_animations.cancelAnimation(this);
    		return this;
    	},

    	resize: function(silent) {
    		var me = this;
    		var options = me.options;
    		var canvas = me.canvas;
    		var aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;

    		// the canvas render width and height will be casted to integers so make sure that
    		// the canvas display style uses the same integer values to avoid blurring effect.

    		// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed
    		var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));
    		var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));

    		if (me.width === newWidth && me.height === newHeight) {
    			return;
    		}

    		canvas.width = me.width = newWidth;
    		canvas.height = me.height = newHeight;
    		canvas.style.width = newWidth + 'px';
    		canvas.style.height = newHeight + 'px';

    		helpers$1.retinaScale(me, options.devicePixelRatio);

    		if (!silent) {
    			// Notify any plugins about the resize
    			var newSize = {width: newWidth, height: newHeight};
    			core_plugins.notify(me, 'resize', [newSize]);

    			// Notify of resize
    			if (options.onResize) {
    				options.onResize(me, newSize);
    			}

    			me.stop();
    			me.update({
    				duration: options.responsiveAnimationDuration
    			});
    		}
    	},

    	ensureScalesHaveIDs: function() {
    		var options = this.options;
    		var scalesOptions = options.scales || {};
    		var scaleOptions = options.scale;

    		helpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {
    			if (!xAxisOptions.id) {
    				xAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, 'x-axis-', index);
    			}
    		});

    		helpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {
    			if (!yAxisOptions.id) {
    				yAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, 'y-axis-', index);
    			}
    		});

    		if (scaleOptions) {
    			scaleOptions.id = scaleOptions.id || 'scale';
    		}
    	},

    	/**
    	 * Builds a map of scale ID to scale object for future lookup.
    	 */
    	buildOrUpdateScales: function() {
    		var me = this;
    		var options = me.options;
    		var scales = me.scales || {};
    		var items = [];
    		var updated = Object.keys(scales).reduce(function(obj, id) {
    			obj[id] = false;
    			return obj;
    		}, {});

    		if (options.scales) {
    			items = items.concat(
    				(options.scales.xAxes || []).map(function(xAxisOptions) {
    					return {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};
    				}),
    				(options.scales.yAxes || []).map(function(yAxisOptions) {
    					return {options: yAxisOptions, dtype: 'linear', dposition: 'left'};
    				})
    			);
    		}

    		if (options.scale) {
    			items.push({
    				options: options.scale,
    				dtype: 'radialLinear',
    				isDefault: true,
    				dposition: 'chartArea'
    			});
    		}

    		helpers$1.each(items, function(item) {
    			var scaleOptions = item.options;
    			var id = scaleOptions.id;
    			var scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);

    			if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
    				scaleOptions.position = item.dposition;
    			}

    			updated[id] = true;
    			var scale = null;
    			if (id in scales && scales[id].type === scaleType) {
    				scale = scales[id];
    				scale.options = scaleOptions;
    				scale.ctx = me.ctx;
    				scale.chart = me;
    			} else {
    				var scaleClass = core_scaleService.getScaleConstructor(scaleType);
    				if (!scaleClass) {
    					return;
    				}
    				scale = new scaleClass({
    					id: id,
    					type: scaleType,
    					options: scaleOptions,
    					ctx: me.ctx,
    					chart: me
    				});
    				scales[scale.id] = scale;
    			}

    			scale.mergeTicksOptions();

    			// TODO(SB): I think we should be able to remove this custom case (options.scale)
    			// and consider it as a regular scale part of the "scales"" map only! This would
    			// make the logic easier and remove some useless? custom code.
    			if (item.isDefault) {
    				me.scale = scale;
    			}
    		});
    		// clear up discarded scales
    		helpers$1.each(updated, function(hasUpdated, id) {
    			if (!hasUpdated) {
    				delete scales[id];
    			}
    		});

    		me.scales = scales;

    		core_scaleService.addScalesToLayout(this);
    	},

    	buildOrUpdateControllers: function() {
    		var me = this;
    		var newControllers = [];
    		var datasets = me.data.datasets;
    		var i, ilen;

    		for (i = 0, ilen = datasets.length; i < ilen; i++) {
    			var dataset = datasets[i];
    			var meta = me.getDatasetMeta(i);
    			var type = dataset.type || me.config.type;

    			if (meta.type && meta.type !== type) {
    				me.destroyDatasetMeta(i);
    				meta = me.getDatasetMeta(i);
    			}
    			meta.type = type;
    			meta.order = dataset.order || 0;
    			meta.index = i;

    			if (meta.controller) {
    				meta.controller.updateIndex(i);
    				meta.controller.linkScales();
    			} else {
    				var ControllerClass = controllers[meta.type];
    				if (ControllerClass === undefined) {
    					throw new Error('"' + meta.type + '" is not a chart type.');
    				}

    				meta.controller = new ControllerClass(me, i);
    				newControllers.push(meta.controller);
    			}
    		}

    		return newControllers;
    	},

    	/**
    	 * Reset the elements of all datasets
    	 * @private
    	 */
    	resetElements: function() {
    		var me = this;
    		helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
    			me.getDatasetMeta(datasetIndex).controller.reset();
    		}, me);
    	},

    	/**
    	* Resets the chart back to it's state before the initial animation
    	*/
    	reset: function() {
    		this.resetElements();
    		this.tooltip.initialize();
    	},

    	update: function(config) {
    		var me = this;
    		var i, ilen;

    		if (!config || typeof config !== 'object') {
    			// backwards compatibility
    			config = {
    				duration: config,
    				lazy: arguments[1]
    			};
    		}

    		updateConfig(me);

    		// plugins options references might have change, let's invalidate the cache
    		// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
    		core_plugins._invalidate(me);

    		if (core_plugins.notify(me, 'beforeUpdate') === false) {
    			return;
    		}

    		// In case the entire data object changed
    		me.tooltip._data = me.data;

    		// Make sure dataset controllers are updated and new controllers are reset
    		var newControllers = me.buildOrUpdateControllers();

    		// Make sure all dataset controllers have correct meta data counts
    		for (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
    			me.getDatasetMeta(i).controller.buildOrUpdateElements();
    		}

    		me.updateLayout();

    		// Can only reset the new controllers after the scales have been updated
    		if (me.options.animation && me.options.animation.duration) {
    			helpers$1.each(newControllers, function(controller) {
    				controller.reset();
    			});
    		}

    		me.updateDatasets();

    		// Need to reset tooltip in case it is displayed with elements that are removed
    		// after update.
    		me.tooltip.initialize();

    		// Last active contains items that were previously in the tooltip.
    		// When we reset the tooltip, we need to clear it
    		me.lastActive = [];

    		// Do this before render so that any plugins that need final scale updates can use it
    		core_plugins.notify(me, 'afterUpdate');

    		me._layers.sort(compare2Level('z', '_idx'));

    		if (me._bufferedRender) {
    			me._bufferedRequest = {
    				duration: config.duration,
    				easing: config.easing,
    				lazy: config.lazy
    			};
    		} else {
    			me.render(config);
    		}
    	},

    	/**
    	 * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
    	 * hook, in which case, plugins will not be called on `afterLayout`.
    	 * @private
    	 */
    	updateLayout: function() {
    		var me = this;

    		if (core_plugins.notify(me, 'beforeLayout') === false) {
    			return;
    		}

    		core_layouts.update(this, this.width, this.height);

    		me._layers = [];
    		helpers$1.each(me.boxes, function(box) {
    			// _configure is called twice, once in core.scale.update and once here.
    			// Here the boxes are fully updated and at their final positions.
    			if (box._configure) {
    				box._configure();
    			}
    			me._layers.push.apply(me._layers, box._layers());
    		}, me);

    		me._layers.forEach(function(item, index) {
    			item._idx = index;
    		});

    		/**
    		 * Provided for backward compatibility, use `afterLayout` instead.
    		 * @method IPlugin#afterScaleUpdate
    		 * @deprecated since version 2.5.0
    		 * @todo remove at version 3
    		 * @private
    		 */
    		core_plugins.notify(me, 'afterScaleUpdate');
    		core_plugins.notify(me, 'afterLayout');
    	},

    	/**
    	 * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
    	 * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
    	 * @private
    	 */
    	updateDatasets: function() {
    		var me = this;

    		if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {
    			return;
    		}

    		for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
    			me.updateDataset(i);
    		}

    		core_plugins.notify(me, 'afterDatasetsUpdate');
    	},

    	/**
    	 * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
    	 * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
    	 * @private
    	 */
    	updateDataset: function(index) {
    		var me = this;
    		var meta = me.getDatasetMeta(index);
    		var args = {
    			meta: meta,
    			index: index
    		};

    		if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
    			return;
    		}

    		meta.controller._update();

    		core_plugins.notify(me, 'afterDatasetUpdate', [args]);
    	},

    	render: function(config) {
    		var me = this;

    		if (!config || typeof config !== 'object') {
    			// backwards compatibility
    			config = {
    				duration: config,
    				lazy: arguments[1]
    			};
    		}

    		var animationOptions = me.options.animation;
    		var duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);
    		var lazy = config.lazy;

    		if (core_plugins.notify(me, 'beforeRender') === false) {
    			return;
    		}

    		var onComplete = function(animation) {
    			core_plugins.notify(me, 'afterRender');
    			helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);
    		};

    		if (animationOptions && duration) {
    			var animation = new core_animation({
    				numSteps: duration / 16.66, // 60 fps
    				easing: config.easing || animationOptions.easing,

    				render: function(chart, animationObject) {
    					var easingFunction = helpers$1.easing.effects[animationObject.easing];
    					var currentStep = animationObject.currentStep;
    					var stepDecimal = currentStep / animationObject.numSteps;

    					chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
    				},

    				onAnimationProgress: animationOptions.onProgress,
    				onAnimationComplete: onComplete
    			});

    			core_animations.addAnimation(me, animation, duration, lazy);
    		} else {
    			me.draw();

    			// See https://github.com/chartjs/Chart.js/issues/3781
    			onComplete(new core_animation({numSteps: 0, chart: me}));
    		}

    		return me;
    	},

    	draw: function(easingValue) {
    		var me = this;
    		var i, layers;

    		me.clear();

    		if (helpers$1.isNullOrUndef(easingValue)) {
    			easingValue = 1;
    		}

    		me.transition(easingValue);

    		if (me.width <= 0 || me.height <= 0) {
    			return;
    		}

    		if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
    			return;
    		}

    		// Because of plugin hooks (before/afterDatasetsDraw), datasets can't
    		// currently be part of layers. Instead, we draw
    		// layers <= 0 before(default, backward compat), and the rest after
    		layers = me._layers;
    		for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
    			layers[i].draw(me.chartArea);
    		}

    		me.drawDatasets(easingValue);

    		// Rest of layers
    		for (; i < layers.length; ++i) {
    			layers[i].draw(me.chartArea);
    		}

    		me._drawTooltip(easingValue);

    		core_plugins.notify(me, 'afterDraw', [easingValue]);
    	},

    	/**
    	 * @private
    	 */
    	transition: function(easingValue) {
    		var me = this;

    		for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
    			if (me.isDatasetVisible(i)) {
    				me.getDatasetMeta(i).controller.transition(easingValue);
    			}
    		}

    		me.tooltip.transition(easingValue);
    	},

    	/**
    	 * @private
    	 */
    	_getSortedDatasetMetas: function(filterVisible) {
    		var me = this;
    		var datasets = me.data.datasets || [];
    		var result = [];
    		var i, ilen;

    		for (i = 0, ilen = datasets.length; i < ilen; ++i) {
    			if (!filterVisible || me.isDatasetVisible(i)) {
    				result.push(me.getDatasetMeta(i));
    			}
    		}

    		result.sort(compare2Level('order', 'index'));

    		return result;
    	},

    	/**
    	 * @private
    	 */
    	_getSortedVisibleDatasetMetas: function() {
    		return this._getSortedDatasetMetas(true);
    	},

    	/**
    	 * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
    	 * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
    	 * @private
    	 */
    	drawDatasets: function(easingValue) {
    		var me = this;
    		var metasets, i;

    		if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
    			return;
    		}

    		metasets = me._getSortedVisibleDatasetMetas();
    		for (i = metasets.length - 1; i >= 0; --i) {
    			me.drawDataset(metasets[i], easingValue);
    		}

    		core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
    	},

    	/**
    	 * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
    	 * hook, in which case, plugins will not be called on `afterDatasetDraw`.
    	 * @private
    	 */
    	drawDataset: function(meta, easingValue) {
    		var me = this;
    		var args = {
    			meta: meta,
    			index: meta.index,
    			easingValue: easingValue
    		};

    		if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
    			return;
    		}

    		meta.controller.draw(easingValue);

    		core_plugins.notify(me, 'afterDatasetDraw', [args]);
    	},

    	/**
    	 * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
    	 * hook, in which case, plugins will not be called on `afterTooltipDraw`.
    	 * @private
    	 */
    	_drawTooltip: function(easingValue) {
    		var me = this;
    		var tooltip = me.tooltip;
    		var args = {
    			tooltip: tooltip,
    			easingValue: easingValue
    		};

    		if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
    			return;
    		}

    		tooltip.draw();

    		core_plugins.notify(me, 'afterTooltipDraw', [args]);
    	},

    	/**
    	 * Get the single element that was clicked on
    	 * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
    	 */
    	getElementAtEvent: function(e) {
    		return core_interaction.modes.single(this, e);
    	},

    	getElementsAtEvent: function(e) {
    		return core_interaction.modes.label(this, e, {intersect: true});
    	},

    	getElementsAtXAxis: function(e) {
    		return core_interaction.modes['x-axis'](this, e, {intersect: true});
    	},

    	getElementsAtEventForMode: function(e, mode, options) {
    		var method = core_interaction.modes[mode];
    		if (typeof method === 'function') {
    			return method(this, e, options);
    		}

    		return [];
    	},

    	getDatasetAtEvent: function(e) {
    		return core_interaction.modes.dataset(this, e, {intersect: true});
    	},

    	getDatasetMeta: function(datasetIndex) {
    		var me = this;
    		var dataset = me.data.datasets[datasetIndex];
    		if (!dataset._meta) {
    			dataset._meta = {};
    		}

    		var meta = dataset._meta[me.id];
    		if (!meta) {
    			meta = dataset._meta[me.id] = {
    				type: null,
    				data: [],
    				dataset: null,
    				controller: null,
    				hidden: null,			// See isDatasetVisible() comment
    				xAxisID: null,
    				yAxisID: null,
    				order: dataset.order || 0,
    				index: datasetIndex
    			};
    		}

    		return meta;
    	},

    	getVisibleDatasetCount: function() {
    		var count = 0;
    		for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
    			if (this.isDatasetVisible(i)) {
    				count++;
    			}
    		}
    		return count;
    	},

    	isDatasetVisible: function(datasetIndex) {
    		var meta = this.getDatasetMeta(datasetIndex);

    		// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
    		// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
    		return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
    	},

    	generateLegend: function() {
    		return this.options.legendCallback(this);
    	},

    	/**
    	 * @private
    	 */
    	destroyDatasetMeta: function(datasetIndex) {
    		var id = this.id;
    		var dataset = this.data.datasets[datasetIndex];
    		var meta = dataset._meta && dataset._meta[id];

    		if (meta) {
    			meta.controller.destroy();
    			delete dataset._meta[id];
    		}
    	},

    	destroy: function() {
    		var me = this;
    		var canvas = me.canvas;
    		var i, ilen;

    		me.stop();

    		// dataset controllers need to cleanup associated data
    		for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
    			me.destroyDatasetMeta(i);
    		}

    		if (canvas) {
    			me.unbindEvents();
    			helpers$1.canvas.clear(me);
    			platform.releaseContext(me.ctx);
    			me.canvas = null;
    			me.ctx = null;
    		}

    		core_plugins.notify(me, 'destroy');

    		delete Chart.instances[me.id];
    	},

    	toBase64Image: function() {
    		return this.canvas.toDataURL.apply(this.canvas, arguments);
    	},

    	initToolTip: function() {
    		var me = this;
    		me.tooltip = new core_tooltip({
    			_chart: me,
    			_chartInstance: me, // deprecated, backward compatibility
    			_data: me.data,
    			_options: me.options.tooltips
    		}, me);
    	},

    	/**
    	 * @private
    	 */
    	bindEvents: function() {
    		var me = this;
    		var listeners = me._listeners = {};
    		var listener = function() {
    			me.eventHandler.apply(me, arguments);
    		};

    		helpers$1.each(me.options.events, function(type) {
    			platform.addEventListener(me, type, listener);
    			listeners[type] = listener;
    		});

    		// Elements used to detect size change should not be injected for non responsive charts.
    		// See https://github.com/chartjs/Chart.js/issues/2210
    		if (me.options.responsive) {
    			listener = function() {
    				me.resize();
    			};

    			platform.addEventListener(me, 'resize', listener);
    			listeners.resize = listener;
    		}
    	},

    	/**
    	 * @private
    	 */
    	unbindEvents: function() {
    		var me = this;
    		var listeners = me._listeners;
    		if (!listeners) {
    			return;
    		}

    		delete me._listeners;
    		helpers$1.each(listeners, function(listener, type) {
    			platform.removeEventListener(me, type, listener);
    		});
    	},

    	updateHoverStyle: function(elements, mode, enabled) {
    		var prefix = enabled ? 'set' : 'remove';
    		var element, i, ilen;

    		for (i = 0, ilen = elements.length; i < ilen; ++i) {
    			element = elements[i];
    			if (element) {
    				this.getDatasetMeta(element._datasetIndex).controller[prefix + 'HoverStyle'](element);
    			}
    		}

    		if (mode === 'dataset') {
    			this.getDatasetMeta(elements[0]._datasetIndex).controller['_' + prefix + 'DatasetHoverStyle']();
    		}
    	},

    	/**
    	 * @private
    	 */
    	eventHandler: function(e) {
    		var me = this;
    		var tooltip = me.tooltip;

    		if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {
    			return;
    		}

    		// Buffer any update calls so that renders do not occur
    		me._bufferedRender = true;
    		me._bufferedRequest = null;

    		var changed = me.handleEvent(e);
    		// for smooth tooltip animations issue #4989
    		// the tooltip should be the source of change
    		// Animation check workaround:
    		// tooltip._start will be null when tooltip isn't animating
    		if (tooltip) {
    			changed = tooltip._start
    				? tooltip.handleEvent(e)
    				: changed | tooltip.handleEvent(e);
    		}

    		core_plugins.notify(me, 'afterEvent', [e]);

    		var bufferedRequest = me._bufferedRequest;
    		if (bufferedRequest) {
    			// If we have an update that was triggered, we need to do a normal render
    			me.render(bufferedRequest);
    		} else if (changed && !me.animating) {
    			// If entering, leaving, or changing elements, animate the change via pivot
    			me.stop();

    			// We only need to render at this point. Updating will cause scales to be
    			// recomputed generating flicker & using more memory than necessary.
    			me.render({
    				duration: me.options.hover.animationDuration,
    				lazy: true
    			});
    		}

    		me._bufferedRender = false;
    		me._bufferedRequest = null;

    		return me;
    	},

    	/**
    	 * Handle an event
    	 * @private
    	 * @param {IEvent} event the event to handle
    	 * @return {boolean} true if the chart needs to re-render
    	 */
    	handleEvent: function(e) {
    		var me = this;
    		var options = me.options || {};
    		var hoverOptions = options.hover;
    		var changed = false;

    		me.lastActive = me.lastActive || [];

    		// Find Active Elements for hover and tooltips
    		if (e.type === 'mouseout') {
    			me.active = [];
    		} else {
    			me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
    		}

    		// Invoke onHover hook
    		// Need to call with native event here to not break backwards compatibility
    		helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);

    		if (e.type === 'mouseup' || e.type === 'click') {
    			if (options.onClick) {
    				// Use e.native here for backwards compatibility
    				options.onClick.call(me, e.native, me.active);
    			}
    		}

    		// Remove styling for last active (even if it may still be active)
    		if (me.lastActive.length) {
    			me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
    		}

    		// Built in hover styling
    		if (me.active.length && hoverOptions.mode) {
    			me.updateHoverStyle(me.active, hoverOptions.mode, true);
    		}

    		changed = !helpers$1.arrayEquals(me.active, me.lastActive);

    		// Remember Last Actives
    		me.lastActive = me.active;

    		return changed;
    	}
    });

    /**
     * NOTE(SB) We actually don't use this container anymore but we need to keep it
     * for backward compatibility. Though, it can still be useful for plugins that
     * would need to work on multiple charts?!
     */
    Chart.instances = {};

    var core_controller = Chart;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart instead.
     * @class Chart.Controller
     * @deprecated since version 2.6
     * @todo remove at version 3
     * @private
     */
    Chart.Controller = Chart;

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart
     * @deprecated since version 2.8
     * @todo remove at version 3
     * @private
     */
    Chart.types = {};

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart.helpers.configMerge
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.configMerge = mergeConfig;

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart.helpers.scaleMerge
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.scaleMerge = mergeScaleConfig;

    var core_helpers = function() {

    	// -- Basic js utility methods

    	helpers$1.where = function(collection, filterCallback) {
    		if (helpers$1.isArray(collection) && Array.prototype.filter) {
    			return collection.filter(filterCallback);
    		}
    		var filtered = [];

    		helpers$1.each(collection, function(item) {
    			if (filterCallback(item)) {
    				filtered.push(item);
    			}
    		});

    		return filtered;
    	};
    	helpers$1.findIndex = Array.prototype.findIndex ?
    		function(array, callback, scope) {
    			return array.findIndex(callback, scope);
    		} :
    		function(array, callback, scope) {
    			scope = scope === undefined ? array : scope;
    			for (var i = 0, ilen = array.length; i < ilen; ++i) {
    				if (callback.call(scope, array[i], i, array)) {
    					return i;
    				}
    			}
    			return -1;
    		};
    	helpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
    		// Default to start of the array
    		if (helpers$1.isNullOrUndef(startIndex)) {
    			startIndex = -1;
    		}
    		for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
    			var currentItem = arrayToSearch[i];
    			if (filterCallback(currentItem)) {
    				return currentItem;
    			}
    		}
    	};
    	helpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
    		// Default to end of the array
    		if (helpers$1.isNullOrUndef(startIndex)) {
    			startIndex = arrayToSearch.length;
    		}
    		for (var i = startIndex - 1; i >= 0; i--) {
    			var currentItem = arrayToSearch[i];
    			if (filterCallback(currentItem)) {
    				return currentItem;
    			}
    		}
    	};

    	// -- Math methods
    	helpers$1.isNumber = function(n) {
    		return !isNaN(parseFloat(n)) && isFinite(n);
    	};
    	helpers$1.almostEquals = function(x, y, epsilon) {
    		return Math.abs(x - y) < epsilon;
    	};
    	helpers$1.almostWhole = function(x, epsilon) {
    		var rounded = Math.round(x);
    		return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);
    	};
    	helpers$1.max = function(array) {
    		return array.reduce(function(max, value) {
    			if (!isNaN(value)) {
    				return Math.max(max, value);
    			}
    			return max;
    		}, Number.NEGATIVE_INFINITY);
    	};
    	helpers$1.min = function(array) {
    		return array.reduce(function(min, value) {
    			if (!isNaN(value)) {
    				return Math.min(min, value);
    			}
    			return min;
    		}, Number.POSITIVE_INFINITY);
    	};
    	helpers$1.sign = Math.sign ?
    		function(x) {
    			return Math.sign(x);
    		} :
    		function(x) {
    			x = +x; // convert to a number
    			if (x === 0 || isNaN(x)) {
    				return x;
    			}
    			return x > 0 ? 1 : -1;
    		};
    	helpers$1.toRadians = function(degrees) {
    		return degrees * (Math.PI / 180);
    	};
    	helpers$1.toDegrees = function(radians) {
    		return radians * (180 / Math.PI);
    	};

    	/**
    	 * Returns the number of decimal places
    	 * i.e. the number of digits after the decimal point, of the value of this Number.
    	 * @param {number} x - A number.
    	 * @returns {number} The number of decimal places.
    	 * @private
    	 */
    	helpers$1._decimalPlaces = function(x) {
    		if (!helpers$1.isFinite(x)) {
    			return;
    		}
    		var e = 1;
    		var p = 0;
    		while (Math.round(x * e) / e !== x) {
    			e *= 10;
    			p++;
    		}
    		return p;
    	};

    	// Gets the angle from vertical upright to the point about a centre.
    	helpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {
    		var distanceFromXCenter = anglePoint.x - centrePoint.x;
    		var distanceFromYCenter = anglePoint.y - centrePoint.y;
    		var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);

    		var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

    		if (angle < (-0.5 * Math.PI)) {
    			angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
    		}

    		return {
    			angle: angle,
    			distance: radialDistanceFromCenter
    		};
    	};
    	helpers$1.distanceBetweenPoints = function(pt1, pt2) {
    		return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
    	};

    	/**
    	 * Provided for backward compatibility, not available anymore
    	 * @function Chart.helpers.aliasPixel
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 */
    	helpers$1.aliasPixel = function(pixelWidth) {
    		return (pixelWidth % 2 === 0) ? 0 : 0.5;
    	};

    	/**
    	 * Returns the aligned pixel value to avoid anti-aliasing blur
    	 * @param {Chart} chart - The chart instance.
    	 * @param {number} pixel - A pixel value.
    	 * @param {number} width - The width of the element.
    	 * @returns {number} The aligned pixel value.
    	 * @private
    	 */
    	helpers$1._alignPixel = function(chart, pixel, width) {
    		var devicePixelRatio = chart.currentDevicePixelRatio;
    		var halfWidth = width / 2;
    		return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
    	};

    	helpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
    		// Props to Rob Spencer at scaled innovation for his post on splining between points
    		// http://scaledinnovation.com/analytics/splines/aboutSplines.html

    		// This function must also respect "skipped" points

    		var previous = firstPoint.skip ? middlePoint : firstPoint;
    		var current = middlePoint;
    		var next = afterPoint.skip ? middlePoint : afterPoint;

    		var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
    		var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));

    		var s01 = d01 / (d01 + d12);
    		var s12 = d12 / (d01 + d12);

    		// If all points are the same, s01 & s02 will be inf
    		s01 = isNaN(s01) ? 0 : s01;
    		s12 = isNaN(s12) ? 0 : s12;

    		var fa = t * s01; // scaling factor for triangle Ta
    		var fb = t * s12;

    		return {
    			previous: {
    				x: current.x - fa * (next.x - previous.x),
    				y: current.y - fa * (next.y - previous.y)
    			},
    			next: {
    				x: current.x + fb * (next.x - previous.x),
    				y: current.y + fb * (next.y - previous.y)
    			}
    		};
    	};
    	helpers$1.EPSILON = Number.EPSILON || 1e-14;
    	helpers$1.splineCurveMonotone = function(points) {
    		// This function calculates Bézier control points in a similar way than |splineCurve|,
    		// but preserves monotonicity of the provided data and ensures no local extremums are added
    		// between the dataset discrete points due to the interpolation.
    		// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation

    		var pointsWithTangents = (points || []).map(function(point) {
    			return {
    				model: point._model,
    				deltaK: 0,
    				mK: 0
    			};
    		});

    		// Calculate slopes (deltaK) and initialize tangents (mK)
    		var pointsLen = pointsWithTangents.length;
    		var i, pointBefore, pointCurrent, pointAfter;
    		for (i = 0; i < pointsLen; ++i) {
    			pointCurrent = pointsWithTangents[i];
    			if (pointCurrent.model.skip) {
    				continue;
    			}

    			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
    			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
    			if (pointAfter && !pointAfter.model.skip) {
    				var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);

    				// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
    				pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
    			}

    			if (!pointBefore || pointBefore.model.skip) {
    				pointCurrent.mK = pointCurrent.deltaK;
    			} else if (!pointAfter || pointAfter.model.skip) {
    				pointCurrent.mK = pointBefore.deltaK;
    			} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
    				pointCurrent.mK = 0;
    			} else {
    				pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
    			}
    		}

    		// Adjust tangents to ensure monotonic properties
    		var alphaK, betaK, tauK, squaredMagnitude;
    		for (i = 0; i < pointsLen - 1; ++i) {
    			pointCurrent = pointsWithTangents[i];
    			pointAfter = pointsWithTangents[i + 1];
    			if (pointCurrent.model.skip || pointAfter.model.skip) {
    				continue;
    			}

    			if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
    				pointCurrent.mK = pointAfter.mK = 0;
    				continue;
    			}

    			alphaK = pointCurrent.mK / pointCurrent.deltaK;
    			betaK = pointAfter.mK / pointCurrent.deltaK;
    			squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    			if (squaredMagnitude <= 9) {
    				continue;
    			}

    			tauK = 3 / Math.sqrt(squaredMagnitude);
    			pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
    			pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
    		}

    		// Compute control points
    		var deltaX;
    		for (i = 0; i < pointsLen; ++i) {
    			pointCurrent = pointsWithTangents[i];
    			if (pointCurrent.model.skip) {
    				continue;
    			}

    			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
    			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
    			if (pointBefore && !pointBefore.model.skip) {
    				deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
    				pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
    				pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
    			}
    			if (pointAfter && !pointAfter.model.skip) {
    				deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
    				pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
    				pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
    			}
    		}
    	};
    	helpers$1.nextItem = function(collection, index, loop) {
    		if (loop) {
    			return index >= collection.length - 1 ? collection[0] : collection[index + 1];
    		}
    		return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
    	};
    	helpers$1.previousItem = function(collection, index, loop) {
    		if (loop) {
    			return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
    		}
    		return index <= 0 ? collection[0] : collection[index - 1];
    	};
    	// Implementation of the nice number algorithm used in determining where axis labels will go
    	helpers$1.niceNum = function(range, round) {
    		var exponent = Math.floor(helpers$1.log10(range));
    		var fraction = range / Math.pow(10, exponent);
    		var niceFraction;

    		if (round) {
    			if (fraction < 1.5) {
    				niceFraction = 1;
    			} else if (fraction < 3) {
    				niceFraction = 2;
    			} else if (fraction < 7) {
    				niceFraction = 5;
    			} else {
    				niceFraction = 10;
    			}
    		} else if (fraction <= 1.0) {
    			niceFraction = 1;
    		} else if (fraction <= 2) {
    			niceFraction = 2;
    		} else if (fraction <= 5) {
    			niceFraction = 5;
    		} else {
    			niceFraction = 10;
    		}

    		return niceFraction * Math.pow(10, exponent);
    	};
    	// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
    	helpers$1.requestAnimFrame = (function() {
    		if (typeof window === 'undefined') {
    			return function(callback) {
    				callback();
    			};
    		}
    		return window.requestAnimationFrame ||
    			window.webkitRequestAnimationFrame ||
    			window.mozRequestAnimationFrame ||
    			window.oRequestAnimationFrame ||
    			window.msRequestAnimationFrame ||
    			function(callback) {
    				return window.setTimeout(callback, 1000 / 60);
    			};
    	}());
    	// -- DOM methods
    	helpers$1.getRelativePosition = function(evt, chart) {
    		var mouseX, mouseY;
    		var e = evt.originalEvent || evt;
    		var canvas = evt.target || evt.srcElement;
    		var boundingRect = canvas.getBoundingClientRect();

    		var touches = e.touches;
    		if (touches && touches.length > 0) {
    			mouseX = touches[0].clientX;
    			mouseY = touches[0].clientY;

    		} else {
    			mouseX = e.clientX;
    			mouseY = e.clientY;
    		}

    		// Scale mouse coordinates into canvas coordinates
    		// by following the pattern laid out by 'jerryj' in the comments of
    		// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
    		var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));
    		var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));
    		var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));
    		var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));
    		var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
    		var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;

    		// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
    		// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
    		mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
    		mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);

    		return {
    			x: mouseX,
    			y: mouseY
    		};

    	};

    	// Private helper function to convert max-width/max-height values that may be percentages into a number
    	function parseMaxStyle(styleValue, node, parentProperty) {
    		var valueInPixels;
    		if (typeof styleValue === 'string') {
    			valueInPixels = parseInt(styleValue, 10);

    			if (styleValue.indexOf('%') !== -1) {
    				// percentage * size in dimension
    				valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    			}
    		} else {
    			valueInPixels = styleValue;
    		}

    		return valueInPixels;
    	}

    	/**
    	 * Returns if the given value contains an effective constraint.
    	 * @private
    	 */
    	function isConstrainedValue(value) {
    		return value !== undefined && value !== null && value !== 'none';
    	}

    	/**
    	 * Returns the max width or height of the given DOM node in a cross-browser compatible fashion
    	 * @param {HTMLElement} domNode - the node to check the constraint on
    	 * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')
    	 * @param {string} percentageProperty - property of parent to use when calculating width as a percentage
    	 * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}
    	 */
    	function getConstraintDimension(domNode, maxStyle, percentageProperty) {
    		var view = document.defaultView;
    		var parentNode = helpers$1._getParentNode(domNode);
    		var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
    		var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
    		var hasCNode = isConstrainedValue(constrainedNode);
    		var hasCContainer = isConstrainedValue(constrainedContainer);
    		var infinity = Number.POSITIVE_INFINITY;

    		if (hasCNode || hasCContainer) {
    			return Math.min(
    				hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
    				hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
    		}

    		return 'none';
    	}
    	// returns Number or undefined if no constraint
    	helpers$1.getConstraintWidth = function(domNode) {
    		return getConstraintDimension(domNode, 'max-width', 'clientWidth');
    	};
    	// returns Number or undefined if no constraint
    	helpers$1.getConstraintHeight = function(domNode) {
    		return getConstraintDimension(domNode, 'max-height', 'clientHeight');
    	};
    	/**
    	 * @private
     	 */
    	helpers$1._calculatePadding = function(container, padding, parentDimension) {
    		padding = helpers$1.getStyle(container, padding);

    		return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
    	};
    	/**
    	 * @private
    	 */
    	helpers$1._getParentNode = function(domNode) {
    		var parent = domNode.parentNode;
    		if (parent && parent.toString() === '[object ShadowRoot]') {
    			parent = parent.host;
    		}
    		return parent;
    	};
    	helpers$1.getMaximumWidth = function(domNode) {
    		var container = helpers$1._getParentNode(domNode);
    		if (!container) {
    			return domNode.clientWidth;
    		}

    		var clientWidth = container.clientWidth;
    		var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);
    		var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);

    		var w = clientWidth - paddingLeft - paddingRight;
    		var cw = helpers$1.getConstraintWidth(domNode);
    		return isNaN(cw) ? w : Math.min(w, cw);
    	};
    	helpers$1.getMaximumHeight = function(domNode) {
    		var container = helpers$1._getParentNode(domNode);
    		if (!container) {
    			return domNode.clientHeight;
    		}

    		var clientHeight = container.clientHeight;
    		var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);
    		var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);

    		var h = clientHeight - paddingTop - paddingBottom;
    		var ch = helpers$1.getConstraintHeight(domNode);
    		return isNaN(ch) ? h : Math.min(h, ch);
    	};
    	helpers$1.getStyle = function(el, property) {
    		return el.currentStyle ?
    			el.currentStyle[property] :
    			document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
    	};
    	helpers$1.retinaScale = function(chart, forceRatio) {
    		var pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;
    		if (pixelRatio === 1) {
    			return;
    		}

    		var canvas = chart.canvas;
    		var height = chart.height;
    		var width = chart.width;

    		canvas.height = height * pixelRatio;
    		canvas.width = width * pixelRatio;
    		chart.ctx.scale(pixelRatio, pixelRatio);

    		// If no style has been set on the canvas, the render size is used as display size,
    		// making the chart visually bigger, so let's enforce it to the "correct" values.
    		// See https://github.com/chartjs/Chart.js/issues/3575
    		if (!canvas.style.height && !canvas.style.width) {
    			canvas.style.height = height + 'px';
    			canvas.style.width = width + 'px';
    		}
    	};
    	// -- Canvas methods
    	helpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {
    		return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
    	};
    	helpers$1.longestText = function(ctx, font, arrayOfThings, cache) {
    		cache = cache || {};
    		var data = cache.data = cache.data || {};
    		var gc = cache.garbageCollect = cache.garbageCollect || [];

    		if (cache.font !== font) {
    			data = cache.data = {};
    			gc = cache.garbageCollect = [];
    			cache.font = font;
    		}

    		ctx.font = font;
    		var longest = 0;
    		var ilen = arrayOfThings.length;
    		var i, j, jlen, thing, nestedThing;
    		for (i = 0; i < ilen; i++) {
    			thing = arrayOfThings[i];

    			// Undefined strings and arrays should not be measured
    			if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {
    				longest = helpers$1.measureText(ctx, data, gc, longest, thing);
    			} else if (helpers$1.isArray(thing)) {
    				// if it is an array lets measure each element
    				// to do maybe simplify this function a bit so we can do this more recursively?
    				for (j = 0, jlen = thing.length; j < jlen; j++) {
    					nestedThing = thing[j];
    					// Undefined strings and arrays should not be measured
    					if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
    						longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
    					}
    				}
    			}
    		}

    		var gcLen = gc.length / 2;
    		if (gcLen > arrayOfThings.length) {
    			for (i = 0; i < gcLen; i++) {
    				delete data[gc[i]];
    			}
    			gc.splice(0, gcLen);
    		}
    		return longest;
    	};
    	helpers$1.measureText = function(ctx, data, gc, longest, string) {
    		var textWidth = data[string];
    		if (!textWidth) {
    			textWidth = data[string] = ctx.measureText(string).width;
    			gc.push(string);
    		}
    		if (textWidth > longest) {
    			longest = textWidth;
    		}
    		return longest;
    	};

    	/**
    	 * @deprecated
    	 */
    	helpers$1.numberOfLabelLines = function(arrayOfThings) {
    		var numberOfLines = 1;
    		helpers$1.each(arrayOfThings, function(thing) {
    			if (helpers$1.isArray(thing)) {
    				if (thing.length > numberOfLines) {
    					numberOfLines = thing.length;
    				}
    			}
    		});
    		return numberOfLines;
    	};

    	helpers$1.color = !chartjsColor ?
    		function(value) {
    			console.error('Color.js not found!');
    			return value;
    		} :
    		function(value) {
    			/* global CanvasGradient */
    			if (value instanceof CanvasGradient) {
    				value = core_defaults.global.defaultColor;
    			}

    			return chartjsColor(value);
    		};

    	helpers$1.getHoverColor = function(colorValue) {
    		/* global CanvasPattern */
    		return (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?
    			colorValue :
    			helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
    	};
    };

    function abstract() {
    	throw new Error(
    		'This method is not implemented: either no adapter can ' +
    		'be found or an incomplete integration was provided.'
    	);
    }

    /**
     * Date adapter (current used by the time scale)
     * @namespace Chart._adapters._date
     * @memberof Chart._adapters
     * @private
     */

    /**
     * Currently supported unit string values.
     * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}
     * @memberof Chart._adapters._date
     * @name Unit
     */

    /**
     * @class
     */
    function DateAdapter(options) {
    	this.options = options || {};
    }

    helpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {
    	/**
    	 * Returns a map of time formats for the supported formatting units defined
    	 * in Unit as well as 'datetime' representing a detailed date/time string.
    	 * @returns {{string: string}}
    	 */
    	formats: abstract,

    	/**
    	 * Parses the given `value` and return the associated timestamp.
    	 * @param {any} value - the value to parse (usually comes from the data)
    	 * @param {string} [format] - the expected data format
    	 * @returns {(number|null)}
    	 * @function
    	 */
    	parse: abstract,

    	/**
    	 * Returns the formatted date in the specified `format` for a given `timestamp`.
    	 * @param {number} timestamp - the timestamp to format
    	 * @param {string} format - the date/time token
    	 * @return {string}
    	 * @function
    	 */
    	format: abstract,

    	/**
    	 * Adds the specified `amount` of `unit` to the given `timestamp`.
    	 * @param {number} timestamp - the input timestamp
    	 * @param {number} amount - the amount to add
    	 * @param {Unit} unit - the unit as string
    	 * @return {number}
    	 * @function
    	 */
    	add: abstract,

    	/**
    	 * Returns the number of `unit` between the given timestamps.
    	 * @param {number} max - the input timestamp (reference)
    	 * @param {number} min - the timestamp to substract
    	 * @param {Unit} unit - the unit as string
    	 * @return {number}
    	 * @function
    	 */
    	diff: abstract,

    	/**
    	 * Returns start of `unit` for the given `timestamp`.
    	 * @param {number} timestamp - the input timestamp
    	 * @param {Unit} unit - the unit as string
    	 * @param {number} [weekday] - the ISO day of the week with 1 being Monday
    	 * and 7 being Sunday (only needed if param *unit* is `isoWeek`).
    	 * @function
    	 */
    	startOf: abstract,

    	/**
    	 * Returns end of `unit` for the given `timestamp`.
    	 * @param {number} timestamp - the input timestamp
    	 * @param {Unit} unit - the unit as string
    	 * @function
    	 */
    	endOf: abstract,

    	// DEPRECATIONS

    	/**
    	 * Provided for backward compatibility for scale.getValueForPixel(),
    	 * this method should be overridden only by the moment adapter.
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 * @private
    	 */
    	_create: function(value) {
    		return value;
    	}
    });

    DateAdapter.override = function(members) {
    	helpers$1.extend(DateAdapter.prototype, members);
    };

    var _date = DateAdapter;

    var core_adapters = {
    	_date: _date
    };

    /**
     * Namespace to hold static tick generation functions
     * @namespace Chart.Ticks
     */
    var core_ticks = {
    	/**
    	 * Namespace to hold formatters for different types of ticks
    	 * @namespace Chart.Ticks.formatters
    	 */
    	formatters: {
    		/**
    		 * Formatter for value labels
    		 * @method Chart.Ticks.formatters.values
    		 * @param value the value to display
    		 * @return {string|string[]} the label to display
    		 */
    		values: function(value) {
    			return helpers$1.isArray(value) ? value : '' + value;
    		},

    		/**
    		 * Formatter for linear numeric ticks
    		 * @method Chart.Ticks.formatters.linear
    		 * @param tickValue {number} the value to be formatted
    		 * @param index {number} the position of the tickValue parameter in the ticks array
    		 * @param ticks {number[]} the list of ticks being converted
    		 * @return {string} string representation of the tickValue parameter
    		 */
    		linear: function(tickValue, index, ticks) {
    			// If we have lots of ticks, don't use the ones
    			var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];

    			// If we have a number like 2.5 as the delta, figure out how many decimal places we need
    			if (Math.abs(delta) > 1) {
    				if (tickValue !== Math.floor(tickValue)) {
    					// not an integer
    					delta = tickValue - Math.floor(tickValue);
    				}
    			}

    			var logDelta = helpers$1.log10(Math.abs(delta));
    			var tickString = '';

    			if (tickValue !== 0) {
    				var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
    				if (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation
    					var logTick = helpers$1.log10(Math.abs(tickValue));
    					var numExponential = Math.floor(logTick) - Math.floor(logDelta);
    					numExponential = Math.max(Math.min(numExponential, 20), 0);
    					tickString = tickValue.toExponential(numExponential);
    				} else {
    					var numDecimal = -1 * Math.floor(logDelta);
    					numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
    					tickString = tickValue.toFixed(numDecimal);
    				}
    			} else {
    				tickString = '0'; // never show decimal places for 0
    			}

    			return tickString;
    		},

    		logarithmic: function(tickValue, index, ticks) {
    			var remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));

    			if (tickValue === 0) {
    				return '0';
    			} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
    				return tickValue.toExponential();
    			}
    			return '';
    		}
    	}
    };

    var isArray = helpers$1.isArray;
    var isNullOrUndef = helpers$1.isNullOrUndef;
    var valueOrDefault$a = helpers$1.valueOrDefault;
    var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;

    core_defaults._set('scale', {
    	display: true,
    	position: 'left',
    	offset: false,

    	// grid line settings
    	gridLines: {
    		display: true,
    		color: 'rgba(0,0,0,0.1)',
    		lineWidth: 1,
    		drawBorder: true,
    		drawOnChartArea: true,
    		drawTicks: true,
    		tickMarkLength: 10,
    		zeroLineWidth: 1,
    		zeroLineColor: 'rgba(0,0,0,0.25)',
    		zeroLineBorderDash: [],
    		zeroLineBorderDashOffset: 0.0,
    		offsetGridLines: false,
    		borderDash: [],
    		borderDashOffset: 0.0
    	},

    	// scale label
    	scaleLabel: {
    		// display property
    		display: false,

    		// actual label
    		labelString: '',

    		// top/bottom padding
    		padding: {
    			top: 4,
    			bottom: 4
    		}
    	},

    	// label settings
    	ticks: {
    		beginAtZero: false,
    		minRotation: 0,
    		maxRotation: 50,
    		mirror: false,
    		padding: 0,
    		reverse: false,
    		display: true,
    		autoSkip: true,
    		autoSkipPadding: 0,
    		labelOffset: 0,
    		// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
    		callback: core_ticks.formatters.values,
    		minor: {},
    		major: {}
    	}
    });

    /** Returns a new array containing numItems from arr */
    function sample(arr, numItems) {
    	var result = [];
    	var increment = arr.length / numItems;
    	var i = 0;
    	var len = arr.length;

    	for (; i < len; i += increment) {
    		result.push(arr[Math.floor(i)]);
    	}
    	return result;
    }

    function getPixelForGridLine(scale, index, offsetGridLines) {
    	var length = scale.getTicks().length;
    	var validIndex = Math.min(index, length - 1);
    	var lineValue = scale.getPixelForTick(validIndex);
    	var start = scale._startPixel;
    	var end = scale._endPixel;
    	var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.
    	var offset;

    	if (offsetGridLines) {
    		if (length === 1) {
    			offset = Math.max(lineValue - start, end - lineValue);
    		} else if (index === 0) {
    			offset = (scale.getPixelForTick(1) - lineValue) / 2;
    		} else {
    			offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
    		}
    		lineValue += validIndex < index ? offset : -offset;

    		// Return undefined if the pixel is out of the range
    		if (lineValue < start - epsilon || lineValue > end + epsilon) {
    			return;
    		}
    	}
    	return lineValue;
    }

    function garbageCollect(caches, length) {
    	helpers$1.each(caches, function(cache) {
    		var gc = cache.gc;
    		var gcLen = gc.length / 2;
    		var i;
    		if (gcLen > length) {
    			for (i = 0; i < gcLen; ++i) {
    				delete cache.data[gc[i]];
    			}
    			gc.splice(0, gcLen);
    		}
    	});
    }

    /**
     * Returns {width, height, offset} objects for the first, last, widest, highest tick
     * labels where offset indicates the anchor point offset from the top in pixels.
     */
    function computeLabelSizes(ctx, tickFonts, ticks, caches) {
    	var length = ticks.length;
    	var widths = [];
    	var heights = [];
    	var offsets = [];
    	var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;

    	for (i = 0; i < length; ++i) {
    		label = ticks[i].label;
    		tickFont = ticks[i].major ? tickFonts.major : tickFonts.minor;
    		ctx.font = fontString = tickFont.string;
    		cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};
    		lineHeight = tickFont.lineHeight;
    		width = height = 0;
    		// Undefined labels and arrays should not be measured
    		if (!isNullOrUndef(label) && !isArray(label)) {
    			width = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);
    			height = lineHeight;
    		} else if (isArray(label)) {
    			// if it is an array let's measure each element
    			for (j = 0, jlen = label.length; j < jlen; ++j) {
    				nestedLabel = label[j];
    				// Undefined labels and arrays should not be measured
    				if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
    					width = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);
    					height += lineHeight;
    				}
    			}
    		}
    		widths.push(width);
    		heights.push(height);
    		offsets.push(lineHeight / 2);
    	}
    	garbageCollect(caches, length);

    	widest = widths.indexOf(Math.max.apply(null, widths));
    	highest = heights.indexOf(Math.max.apply(null, heights));

    	function valueAt(idx) {
    		return {
    			width: widths[idx] || 0,
    			height: heights[idx] || 0,
    			offset: offsets[idx] || 0
    		};
    	}

    	return {
    		first: valueAt(0),
    		last: valueAt(length - 1),
    		widest: valueAt(widest),
    		highest: valueAt(highest)
    	};
    }

    function getTickMarkLength(options) {
    	return options.drawTicks ? options.tickMarkLength : 0;
    }

    function getScaleLabelHeight(options) {
    	var font, padding;

    	if (!options.display) {
    		return 0;
    	}

    	font = helpers$1.options._parseFont(options);
    	padding = helpers$1.options.toPadding(options.padding);

    	return font.lineHeight + padding.height;
    }

    function parseFontOptions(options, nestedOpts) {
    	return helpers$1.extend(helpers$1.options._parseFont({
    		fontFamily: valueOrDefault$a(nestedOpts.fontFamily, options.fontFamily),
    		fontSize: valueOrDefault$a(nestedOpts.fontSize, options.fontSize),
    		fontStyle: valueOrDefault$a(nestedOpts.fontStyle, options.fontStyle),
    		lineHeight: valueOrDefault$a(nestedOpts.lineHeight, options.lineHeight)
    	}), {
    		color: helpers$1.options.resolve([nestedOpts.fontColor, options.fontColor, core_defaults.global.defaultFontColor])
    	});
    }

    function parseTickFontOptions(options) {
    	var minor = parseFontOptions(options, options.minor);
    	var major = options.major.enabled ? parseFontOptions(options, options.major) : minor;

    	return {minor: minor, major: major};
    }

    function nonSkipped(ticksToFilter) {
    	var filtered = [];
    	var item, index, len;
    	for (index = 0, len = ticksToFilter.length; index < len; ++index) {
    		item = ticksToFilter[index];
    		if (typeof item._index !== 'undefined') {
    			filtered.push(item);
    		}
    	}
    	return filtered;
    }

    function getEvenSpacing(arr) {
    	var len = arr.length;
    	var i, diff;

    	if (len < 2) {
    		return false;
    	}

    	for (diff = arr[0], i = 1; i < len; ++i) {
    		if (arr[i] - arr[i - 1] !== diff) {
    			return false;
    		}
    	}
    	return diff;
    }

    function calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {
    	var evenMajorSpacing = getEvenSpacing(majorIndices);
    	var spacing = (ticks.length - 1) / ticksLimit;
    	var factors, factor, i, ilen;

    	// If the major ticks are evenly spaced apart, place the minor ticks
    	// so that they divide the major ticks into even chunks
    	if (!evenMajorSpacing) {
    		return Math.max(spacing, 1);
    	}

    	factors = helpers$1.math._factorize(evenMajorSpacing);
    	for (i = 0, ilen = factors.length - 1; i < ilen; i++) {
    		factor = factors[i];
    		if (factor > spacing) {
    			return factor;
    		}
    	}
    	return Math.max(spacing, 1);
    }

    function getMajorIndices(ticks) {
    	var result = [];
    	var i, ilen;
    	for (i = 0, ilen = ticks.length; i < ilen; i++) {
    		if (ticks[i].major) {
    			result.push(i);
    		}
    	}
    	return result;
    }

    function skipMajors(ticks, majorIndices, spacing) {
    	var count = 0;
    	var next = majorIndices[0];
    	var i, tick;

    	spacing = Math.ceil(spacing);
    	for (i = 0; i < ticks.length; i++) {
    		tick = ticks[i];
    		if (i === next) {
    			tick._index = i;
    			count++;
    			next = majorIndices[count * spacing];
    		} else {
    			delete tick.label;
    		}
    	}
    }

    function skip(ticks, spacing, majorStart, majorEnd) {
    	var start = valueOrDefault$a(majorStart, 0);
    	var end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);
    	var count = 0;
    	var length, i, tick, next;

    	spacing = Math.ceil(spacing);
    	if (majorEnd) {
    		length = majorEnd - majorStart;
    		spacing = length / Math.floor(length / spacing);
    	}

    	next = start;

    	while (next < 0) {
    		count++;
    		next = Math.round(start + count * spacing);
    	}

    	for (i = Math.max(start, 0); i < end; i++) {
    		tick = ticks[i];
    		if (i === next) {
    			tick._index = i;
    			count++;
    			next = Math.round(start + count * spacing);
    		} else {
    			delete tick.label;
    		}
    	}
    }

    var Scale = core_element.extend({

    	zeroLineIndex: 0,

    	/**
    	 * Get the padding needed for the scale
    	 * @method getPadding
    	 * @private
    	 * @returns {Padding} the necessary padding
    	 */
    	getPadding: function() {
    		var me = this;
    		return {
    			left: me.paddingLeft || 0,
    			top: me.paddingTop || 0,
    			right: me.paddingRight || 0,
    			bottom: me.paddingBottom || 0
    		};
    	},

    	/**
    	 * Returns the scale tick objects ({label, major})
    	 * @since 2.7
    	 */
    	getTicks: function() {
    		return this._ticks;
    	},

    	/**
    	* @private
    	*/
    	_getLabels: function() {
    		var data = this.chart.data;
    		return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
    	},

    	// These methods are ordered by lifecyle. Utilities then follow.
    	// Any function defined here is inherited by all scale types.
    	// Any function can be extended by the scale type

    	/**
    	 * Provided for backward compatibility, not available anymore
    	 * @function Chart.Scale.mergeTicksOptions
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 */
    	mergeTicksOptions: function() {
    		// noop
    	},

    	beforeUpdate: function() {
    		helpers$1.callback(this.options.beforeUpdate, [this]);
    	},

    	/**
    	 * @param {number} maxWidth - the max width in pixels
    	 * @param {number} maxHeight - the max height in pixels
    	 * @param {object} margins - the space between the edge of the other scales and edge of the chart
    	 *   This space comes from two sources:
    	 *     - padding - space that's required to show the labels at the edges of the scale
    	 *     - thickness of scales or legends in another orientation
    	 */
    	update: function(maxWidth, maxHeight, margins) {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var sampleSize = tickOpts.sampleSize;
    		var i, ilen, labels, ticks, samplingEnabled;

    		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
    		me.beforeUpdate();

    		// Absorb the master measurements
    		me.maxWidth = maxWidth;
    		me.maxHeight = maxHeight;
    		me.margins = helpers$1.extend({
    			left: 0,
    			right: 0,
    			top: 0,
    			bottom: 0
    		}, margins);

    		me._ticks = null;
    		me.ticks = null;
    		me._labelSizes = null;
    		me._maxLabelLines = 0;
    		me.longestLabelWidth = 0;
    		me.longestTextCache = me.longestTextCache || {};
    		me._gridLineItems = null;
    		me._labelItems = null;

    		// Dimensions
    		me.beforeSetDimensions();
    		me.setDimensions();
    		me.afterSetDimensions();

    		// Data min/max
    		me.beforeDataLimits();
    		me.determineDataLimits();
    		me.afterDataLimits();

    		// Ticks - `this.ticks` is now DEPRECATED!
    		// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
    		// and must not be accessed directly from outside this class. `this.ticks` being
    		// around for long time and not marked as private, we can't change its structure
    		// without unexpected breaking changes. If you need to access the scale ticks,
    		// use scale.getTicks() instead.

    		me.beforeBuildTicks();

    		// New implementations should return an array of objects but for BACKWARD COMPAT,
    		// we still support no return (`this.ticks` internally set by calling this method).
    		ticks = me.buildTicks() || [];

    		// Allow modification of ticks in callback.
    		ticks = me.afterBuildTicks(ticks) || ticks;

    		// Ensure ticks contains ticks in new tick format
    		if ((!ticks || !ticks.length) && me.ticks) {
    			ticks = [];
    			for (i = 0, ilen = me.ticks.length; i < ilen; ++i) {
    				ticks.push({
    					value: me.ticks[i],
    					major: false
    				});
    			}
    		}

    		me._ticks = ticks;

    		// Compute tick rotation and fit using a sampled subset of labels
    		// We generally don't need to compute the size of every single label for determining scale size
    		samplingEnabled = sampleSize < ticks.length;
    		labels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);

    		// _configure is called twice, once here, once from core.controller.updateLayout.
    		// Here we haven't been positioned yet, but dimensions are correct.
    		// Variables set in _configure are needed for calculateTickRotation, and
    		// it's ok that coordinates are not correct there, only dimensions matter.
    		me._configure();

    		// Tick Rotation
    		me.beforeCalculateTickRotation();
    		me.calculateTickRotation();
    		me.afterCalculateTickRotation();

    		me.beforeFit();
    		me.fit();
    		me.afterFit();

    		// Auto-skip
    		me._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto') ? me._autoSkip(ticks) : ticks;

    		if (samplingEnabled) {
    			// Generate labels using all non-skipped ticks
    			labels = me._convertTicksToLabels(me._ticksToDraw);
    		}

    		me.ticks = labels;   // BACKWARD COMPATIBILITY

    		// IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!

    		me.afterUpdate();

    		// TODO(v3): remove minSize as a public property and return value from all layout boxes. It is unused
    		// make maxWidth and maxHeight private
    		return me.minSize;
    	},

    	/**
    	 * @private
    	 */
    	_configure: function() {
    		var me = this;
    		var reversePixels = me.options.ticks.reverse;
    		var startPixel, endPixel;

    		if (me.isHorizontal()) {
    			startPixel = me.left;
    			endPixel = me.right;
    		} else {
    			startPixel = me.top;
    			endPixel = me.bottom;
    			// by default vertical scales are from bottom to top, so pixels are reversed
    			reversePixels = !reversePixels;
    		}
    		me._startPixel = startPixel;
    		me._endPixel = endPixel;
    		me._reversePixels = reversePixels;
    		me._length = endPixel - startPixel;
    	},

    	afterUpdate: function() {
    		helpers$1.callback(this.options.afterUpdate, [this]);
    	},

    	//

    	beforeSetDimensions: function() {
    		helpers$1.callback(this.options.beforeSetDimensions, [this]);
    	},
    	setDimensions: function() {
    		var me = this;
    		// Set the unconstrained dimension before label rotation
    		if (me.isHorizontal()) {
    			// Reset position before calculating rotation
    			me.width = me.maxWidth;
    			me.left = 0;
    			me.right = me.width;
    		} else {
    			me.height = me.maxHeight;

    			// Reset position before calculating rotation
    			me.top = 0;
    			me.bottom = me.height;
    		}

    		// Reset padding
    		me.paddingLeft = 0;
    		me.paddingTop = 0;
    		me.paddingRight = 0;
    		me.paddingBottom = 0;
    	},
    	afterSetDimensions: function() {
    		helpers$1.callback(this.options.afterSetDimensions, [this]);
    	},

    	// Data limits
    	beforeDataLimits: function() {
    		helpers$1.callback(this.options.beforeDataLimits, [this]);
    	},
    	determineDataLimits: helpers$1.noop,
    	afterDataLimits: function() {
    		helpers$1.callback(this.options.afterDataLimits, [this]);
    	},

    	//
    	beforeBuildTicks: function() {
    		helpers$1.callback(this.options.beforeBuildTicks, [this]);
    	},
    	buildTicks: helpers$1.noop,
    	afterBuildTicks: function(ticks) {
    		var me = this;
    		// ticks is empty for old axis implementations here
    		if (isArray(ticks) && ticks.length) {
    			return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
    		}
    		// Support old implementations (that modified `this.ticks` directly in buildTicks)
    		me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
    		return ticks;
    	},

    	beforeTickToLabelConversion: function() {
    		helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
    	},
    	convertTicksToLabels: function() {
    		var me = this;
    		// Convert ticks to strings
    		var tickOpts = me.options.ticks;
    		me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
    	},
    	afterTickToLabelConversion: function() {
    		helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
    	},

    	//

    	beforeCalculateTickRotation: function() {
    		helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
    	},
    	calculateTickRotation: function() {
    		var me = this;
    		var options = me.options;
    		var tickOpts = options.ticks;
    		var numTicks = me.getTicks().length;
    		var minRotation = tickOpts.minRotation || 0;
    		var maxRotation = tickOpts.maxRotation;
    		var labelRotation = minRotation;
    		var labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;

    		if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
    			me.labelRotation = minRotation;
    			return;
    		}

    		labelSizes = me._getLabelSizes();
    		maxLabelWidth = labelSizes.widest.width;
    		maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;

    		// Estimate the width of each grid based on the canvas width, the maximum
    		// label width and the number of tick intervals
    		maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
    		tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);

    		// Allow 3 pixels x2 padding either side for label readability
    		if (maxLabelWidth + 6 > tickWidth) {
    			tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
    			maxHeight = me.maxHeight - getTickMarkLength(options.gridLines)
    				- tickOpts.padding - getScaleLabelHeight(options.scaleLabel);
    			maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
    			labelRotation = helpers$1.toDegrees(Math.min(
    				Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),
    				Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)
    			));
    			labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
    		}

    		me.labelRotation = labelRotation;
    	},
    	afterCalculateTickRotation: function() {
    		helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
    	},

    	//

    	beforeFit: function() {
    		helpers$1.callback(this.options.beforeFit, [this]);
    	},
    	fit: function() {
    		var me = this;
    		// Reset
    		var minSize = me.minSize = {
    			width: 0,
    			height: 0
    		};

    		var chart = me.chart;
    		var opts = me.options;
    		var tickOpts = opts.ticks;
    		var scaleLabelOpts = opts.scaleLabel;
    		var gridLineOpts = opts.gridLines;
    		var display = me._isVisible();
    		var isBottom = opts.position === 'bottom';
    		var isHorizontal = me.isHorizontal();

    		// Width
    		if (isHorizontal) {
    			minSize.width = me.maxWidth;
    		} else if (display) {
    			minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
    		}

    		// height
    		if (!isHorizontal) {
    			minSize.height = me.maxHeight; // fill all the height
    		} else if (display) {
    			minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
    		}

    		// Don't bother fitting the ticks if we are not showing the labels
    		if (tickOpts.display && display) {
    			var tickFonts = parseTickFontOptions(tickOpts);
    			var labelSizes = me._getLabelSizes();
    			var firstLabelSize = labelSizes.first;
    			var lastLabelSize = labelSizes.last;
    			var widestLabelSize = labelSizes.widest;
    			var highestLabelSize = labelSizes.highest;
    			var lineSpace = tickFonts.minor.lineHeight * 0.4;
    			var tickPadding = tickOpts.padding;

    			if (isHorizontal) {
    				// A horizontal axis is more constrained by the height.
    				var isRotated = me.labelRotation !== 0;
    				var angleRadians = helpers$1.toRadians(me.labelRotation);
    				var cosRotation = Math.cos(angleRadians);
    				var sinRotation = Math.sin(angleRadians);

    				var labelHeight = sinRotation * widestLabelSize.width
    					+ cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0))
    					+ (isRotated ? 0 : lineSpace); // padding

    				minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);

    				var offsetLeft = me.getPixelForTick(0) - me.left;
    				var offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);
    				var paddingLeft, paddingRight;

    				// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
    				// which means that the right padding is dominated by the font height
    				if (isRotated) {
    					paddingLeft = isBottom ?
    						cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset :
    						sinRotation * (firstLabelSize.height - firstLabelSize.offset);
    					paddingRight = isBottom ?
    						sinRotation * (lastLabelSize.height - lastLabelSize.offset) :
    						cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
    				} else {
    					paddingLeft = firstLabelSize.width / 2;
    					paddingRight = lastLabelSize.width / 2;
    				}

    				// Adjust padding taking into account changes in offsets
    				// and add 3 px to move away from canvas edges
    				me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
    				me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
    			} else {
    				// A vertical axis is more constrained by the width. Labels are the
    				// dominant factor here, so get that length first and account for padding
    				var labelWidth = tickOpts.mirror ? 0 :
    					// use lineSpace for consistency with horizontal axis
    					// tickPadding is not implemented for horizontal
    					widestLabelSize.width + tickPadding + lineSpace;

    				minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);

    				me.paddingTop = firstLabelSize.height / 2;
    				me.paddingBottom = lastLabelSize.height / 2;
    			}
    		}

    		me.handleMargins();

    		if (isHorizontal) {
    			me.width = me._length = chart.width - me.margins.left - me.margins.right;
    			me.height = minSize.height;
    		} else {
    			me.width = minSize.width;
    			me.height = me._length = chart.height - me.margins.top - me.margins.bottom;
    		}
    	},

    	/**
    	 * Handle margins and padding interactions
    	 * @private
    	 */
    	handleMargins: function() {
    		var me = this;
    		if (me.margins) {
    			me.margins.left = Math.max(me.paddingLeft, me.margins.left);
    			me.margins.top = Math.max(me.paddingTop, me.margins.top);
    			me.margins.right = Math.max(me.paddingRight, me.margins.right);
    			me.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);
    		}
    	},

    	afterFit: function() {
    		helpers$1.callback(this.options.afterFit, [this]);
    	},

    	// Shared Methods
    	isHorizontal: function() {
    		var pos = this.options.position;
    		return pos === 'top' || pos === 'bottom';
    	},
    	isFullWidth: function() {
    		return this.options.fullWidth;
    	},

    	// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
    	getRightValue: function(rawValue) {
    		// Null and undefined values first
    		if (isNullOrUndef(rawValue)) {
    			return NaN;
    		}
    		// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
    		if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {
    			return NaN;
    		}

    		// If it is in fact an object, dive in one more level
    		if (rawValue) {
    			if (this.isHorizontal()) {
    				if (rawValue.x !== undefined) {
    					return this.getRightValue(rawValue.x);
    				}
    			} else if (rawValue.y !== undefined) {
    				return this.getRightValue(rawValue.y);
    			}
    		}

    		// Value is good, return it
    		return rawValue;
    	},

    	_convertTicksToLabels: function(ticks) {
    		var me = this;
    		var labels, i, ilen;

    		me.ticks = ticks.map(function(tick) {
    			return tick.value;
    		});

    		me.beforeTickToLabelConversion();

    		// New implementations should return the formatted tick labels but for BACKWARD
    		// COMPAT, we still support no return (`this.ticks` internally changed by calling
    		// this method and supposed to contain only string values).
    		labels = me.convertTicksToLabels(ticks) || me.ticks;

    		me.afterTickToLabelConversion();

    		// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)
    		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
    			ticks[i].label = labels[i];
    		}

    		return labels;
    	},

    	/**
    	 * @private
    	 */
    	_getLabelSizes: function() {
    		var me = this;
    		var labelSizes = me._labelSizes;

    		if (!labelSizes) {
    			me._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);
    			me.longestLabelWidth = labelSizes.widest.width;
    		}

    		return labelSizes;
    	},

    	/**
    	 * @private
    	 */
    	_parseValue: function(value) {
    		var start, end, min, max;

    		if (isArray(value)) {
    			start = +this.getRightValue(value[0]);
    			end = +this.getRightValue(value[1]);
    			min = Math.min(start, end);
    			max = Math.max(start, end);
    		} else {
    			value = +this.getRightValue(value);
    			start = undefined;
    			end = value;
    			min = value;
    			max = value;
    		}

    		return {
    			min: min,
    			max: max,
    			start: start,
    			end: end
    		};
    	},

    	/**
    	* @private
    	*/
    	_getScaleLabel: function(rawValue) {
    		var v = this._parseValue(rawValue);
    		if (v.start !== undefined) {
    			return '[' + v.start + ', ' + v.end + ']';
    		}

    		return +this.getRightValue(rawValue);
    	},

    	/**
    	 * Used to get the value to display in the tooltip for the data at the given index
    	 * @param index
    	 * @param datasetIndex
    	 */
    	getLabelForIndex: helpers$1.noop,

    	/**
    	 * Returns the location of the given data point. Value can either be an index or a numerical value
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 * @param value
    	 * @param index
    	 * @param datasetIndex
    	 */
    	getPixelForValue: helpers$1.noop,

    	/**
    	 * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 * @param pixel
    	 */
    	getValueForPixel: helpers$1.noop,

    	/**
    	 * Returns the location of the tick at the given index
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 */
    	getPixelForTick: function(index) {
    		var me = this;
    		var offset = me.options.offset;
    		var numTicks = me._ticks.length;
    		var tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);

    		return index < 0 || index > numTicks - 1
    			? null
    			: me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));
    	},

    	/**
    	 * Utility for getting the pixel location of a percentage of scale
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 */
    	getPixelForDecimal: function(decimal) {
    		var me = this;

    		if (me._reversePixels) {
    			decimal = 1 - decimal;
    		}

    		return me._startPixel + decimal * me._length;
    	},

    	getDecimalForPixel: function(pixel) {
    		var decimal = (pixel - this._startPixel) / this._length;
    		return this._reversePixels ? 1 - decimal : decimal;
    	},

    	/**
    	 * Returns the pixel for the minimum chart value
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 */
    	getBasePixel: function() {
    		return this.getPixelForValue(this.getBaseValue());
    	},

    	getBaseValue: function() {
    		var me = this;
    		var min = me.min;
    		var max = me.max;

    		return me.beginAtZero ? 0 :
    			min < 0 && max < 0 ? max :
    			min > 0 && max > 0 ? min :
    			0;
    	},

    	/**
    	 * Returns a subset of ticks to be plotted to avoid overlapping labels.
    	 * @private
    	 */
    	_autoSkip: function(ticks) {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var axisLength = me._length;
    		var ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;
    		var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
    		var numMajorIndices = majorIndices.length;
    		var first = majorIndices[0];
    		var last = majorIndices[numMajorIndices - 1];
    		var i, ilen, spacing, avgMajorSpacing;

    		// If there are too many major ticks to display them all
    		if (numMajorIndices > ticksLimit) {
    			skipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);
    			return nonSkipped(ticks);
    		}

    		spacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);

    		if (numMajorIndices > 0) {
    			for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
    				skip(ticks, spacing, majorIndices[i], majorIndices[i + 1]);
    			}
    			avgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;
    			skip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
    			skip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
    			return nonSkipped(ticks);
    		}
    		skip(ticks, spacing);
    		return nonSkipped(ticks);
    	},

    	/**
    	 * @private
    	 */
    	_tickSize: function() {
    		var me = this;
    		var optionTicks = me.options.ticks;

    		// Calculate space needed by label in axis direction.
    		var rot = helpers$1.toRadians(me.labelRotation);
    		var cos = Math.abs(Math.cos(rot));
    		var sin = Math.abs(Math.sin(rot));

    		var labelSizes = me._getLabelSizes();
    		var padding = optionTicks.autoSkipPadding || 0;
    		var w = labelSizes ? labelSizes.widest.width + padding : 0;
    		var h = labelSizes ? labelSizes.highest.height + padding : 0;

    		// Calculate space needed for 1 tick in axis direction.
    		return me.isHorizontal()
    			? h * cos > w * sin ? w / cos : h / sin
    			: h * sin < w * cos ? h / cos : w / sin;
    	},

    	/**
    	 * @private
    	 */
    	_isVisible: function() {
    		var me = this;
    		var chart = me.chart;
    		var display = me.options.display;
    		var i, ilen, meta;

    		if (display !== 'auto') {
    			return !!display;
    		}

    		// When 'auto', the scale is visible if at least one associated dataset is visible.
    		for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
    			if (chart.isDatasetVisible(i)) {
    				meta = chart.getDatasetMeta(i);
    				if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
    					return true;
    				}
    			}
    		}

    		return false;
    	},

    	/**
    	 * @private
    	 */
    	_computeGridLineItems: function(chartArea) {
    		var me = this;
    		var chart = me.chart;
    		var options = me.options;
    		var gridLines = options.gridLines;
    		var position = options.position;
    		var offsetGridLines = gridLines.offsetGridLines;
    		var isHorizontal = me.isHorizontal();
    		var ticks = me._ticksToDraw;
    		var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);

    		var tl = getTickMarkLength(gridLines);
    		var items = [];
    		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
    		var axisHalfWidth = axisWidth / 2;
    		var alignPixel = helpers$1._alignPixel;
    		var alignBorderValue = function(pixel) {
    			return alignPixel(chart, pixel, axisWidth);
    		};
    		var borderValue, i, tick, lineValue, alignedLineValue;
    		var tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;

    		if (position === 'top') {
    			borderValue = alignBorderValue(me.bottom);
    			ty1 = me.bottom - tl;
    			ty2 = borderValue - axisHalfWidth;
    			y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
    			y2 = chartArea.bottom;
    		} else if (position === 'bottom') {
    			borderValue = alignBorderValue(me.top);
    			y1 = chartArea.top;
    			y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
    			ty1 = borderValue + axisHalfWidth;
    			ty2 = me.top + tl;
    		} else if (position === 'left') {
    			borderValue = alignBorderValue(me.right);
    			tx1 = me.right - tl;
    			tx2 = borderValue - axisHalfWidth;
    			x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
    			x2 = chartArea.right;
    		} else {
    			borderValue = alignBorderValue(me.left);
    			x1 = chartArea.left;
    			x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
    			tx1 = borderValue + axisHalfWidth;
    			tx2 = me.left + tl;
    		}

    		for (i = 0; i < ticksLength; ++i) {
    			tick = ticks[i] || {};

    			// autoskipper skipped this tick (#4635)
    			if (isNullOrUndef(tick.label) && i < ticks.length) {
    				continue;
    			}

    			if (i === me.zeroLineIndex && options.offset === offsetGridLines) {
    				// Draw the first index specially
    				lineWidth = gridLines.zeroLineWidth;
    				lineColor = gridLines.zeroLineColor;
    				borderDash = gridLines.zeroLineBorderDash || [];
    				borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;
    			} else {
    				lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i, 1);
    				lineColor = valueAtIndexOrDefault(gridLines.color, i, 'rgba(0,0,0,0.1)');
    				borderDash = gridLines.borderDash || [];
    				borderDashOffset = gridLines.borderDashOffset || 0.0;
    			}

    			lineValue = getPixelForGridLine(me, tick._index || i, offsetGridLines);

    			// Skip if the pixel is out of the range
    			if (lineValue === undefined) {
    				continue;
    			}

    			alignedLineValue = alignPixel(chart, lineValue, lineWidth);

    			if (isHorizontal) {
    				tx1 = tx2 = x1 = x2 = alignedLineValue;
    			} else {
    				ty1 = ty2 = y1 = y2 = alignedLineValue;
    			}

    			items.push({
    				tx1: tx1,
    				ty1: ty1,
    				tx2: tx2,
    				ty2: ty2,
    				x1: x1,
    				y1: y1,
    				x2: x2,
    				y2: y2,
    				width: lineWidth,
    				color: lineColor,
    				borderDash: borderDash,
    				borderDashOffset: borderDashOffset,
    			});
    		}

    		items.ticksLength = ticksLength;
    		items.borderValue = borderValue;

    		return items;
    	},

    	/**
    	 * @private
    	 */
    	_computeLabelItems: function() {
    		var me = this;
    		var options = me.options;
    		var optionTicks = options.ticks;
    		var position = options.position;
    		var isMirrored = optionTicks.mirror;
    		var isHorizontal = me.isHorizontal();
    		var ticks = me._ticksToDraw;
    		var fonts = parseTickFontOptions(optionTicks);
    		var tickPadding = optionTicks.padding;
    		var tl = getTickMarkLength(options.gridLines);
    		var rotation = -helpers$1.toRadians(me.labelRotation);
    		var items = [];
    		var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;

    		if (position === 'top') {
    			y = me.bottom - tl - tickPadding;
    			textAlign = !rotation ? 'center' : 'left';
    		} else if (position === 'bottom') {
    			y = me.top + tl + tickPadding;
    			textAlign = !rotation ? 'center' : 'right';
    		} else if (position === 'left') {
    			x = me.right - (isMirrored ? 0 : tl) - tickPadding;
    			textAlign = isMirrored ? 'left' : 'right';
    		} else {
    			x = me.left + (isMirrored ? 0 : tl) + tickPadding;
    			textAlign = isMirrored ? 'right' : 'left';
    		}

    		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
    			tick = ticks[i];
    			label = tick.label;

    			// autoskipper skipped this tick (#4635)
    			if (isNullOrUndef(label)) {
    				continue;
    			}

    			pixel = me.getPixelForTick(tick._index || i) + optionTicks.labelOffset;
    			font = tick.major ? fonts.major : fonts.minor;
    			lineHeight = font.lineHeight;
    			lineCount = isArray(label) ? label.length : 1;

    			if (isHorizontal) {
    				x = pixel;
    				textOffset = position === 'top'
    					? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight
    					: (!rotation ? 0.5 : 0) * lineHeight;
    			} else {
    				y = pixel;
    				textOffset = (1 - lineCount) * lineHeight / 2;
    			}

    			items.push({
    				x: x,
    				y: y,
    				rotation: rotation,
    				label: label,
    				font: font,
    				textOffset: textOffset,
    				textAlign: textAlign
    			});
    		}

    		return items;
    	},

    	/**
    	 * @private
    	 */
    	_drawGrid: function(chartArea) {
    		var me = this;
    		var gridLines = me.options.gridLines;

    		if (!gridLines.display) {
    			return;
    		}

    		var ctx = me.ctx;
    		var chart = me.chart;
    		var alignPixel = helpers$1._alignPixel;
    		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
    		var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
    		var width, color, i, ilen, item;

    		for (i = 0, ilen = items.length; i < ilen; ++i) {
    			item = items[i];
    			width = item.width;
    			color = item.color;

    			if (width && color) {
    				ctx.save();
    				ctx.lineWidth = width;
    				ctx.strokeStyle = color;
    				if (ctx.setLineDash) {
    					ctx.setLineDash(item.borderDash);
    					ctx.lineDashOffset = item.borderDashOffset;
    				}

    				ctx.beginPath();

    				if (gridLines.drawTicks) {
    					ctx.moveTo(item.tx1, item.ty1);
    					ctx.lineTo(item.tx2, item.ty2);
    				}

    				if (gridLines.drawOnChartArea) {
    					ctx.moveTo(item.x1, item.y1);
    					ctx.lineTo(item.x2, item.y2);
    				}

    				ctx.stroke();
    				ctx.restore();
    			}
    		}

    		if (axisWidth) {
    			// Draw the line at the edge of the axis
    			var firstLineWidth = axisWidth;
    			var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);
    			var borderValue = items.borderValue;
    			var x1, x2, y1, y2;

    			if (me.isHorizontal()) {
    				x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
    				x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
    				y1 = y2 = borderValue;
    			} else {
    				y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
    				y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
    				x1 = x2 = borderValue;
    			}

    			ctx.lineWidth = axisWidth;
    			ctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
    			ctx.beginPath();
    			ctx.moveTo(x1, y1);
    			ctx.lineTo(x2, y2);
    			ctx.stroke();
    		}
    	},

    	/**
    	 * @private
    	 */
    	_drawLabels: function() {
    		var me = this;
    		var optionTicks = me.options.ticks;

    		if (!optionTicks.display) {
    			return;
    		}

    		var ctx = me.ctx;
    		var items = me._labelItems || (me._labelItems = me._computeLabelItems());
    		var i, j, ilen, jlen, item, tickFont, label, y;

    		for (i = 0, ilen = items.length; i < ilen; ++i) {
    			item = items[i];
    			tickFont = item.font;

    			// Make sure we draw text in the correct color and font
    			ctx.save();
    			ctx.translate(item.x, item.y);
    			ctx.rotate(item.rotation);
    			ctx.font = tickFont.string;
    			ctx.fillStyle = tickFont.color;
    			ctx.textBaseline = 'middle';
    			ctx.textAlign = item.textAlign;

    			label = item.label;
    			y = item.textOffset;
    			if (isArray(label)) {
    				for (j = 0, jlen = label.length; j < jlen; ++j) {
    					// We just make sure the multiline element is a string here..
    					ctx.fillText('' + label[j], 0, y);
    					y += tickFont.lineHeight;
    				}
    			} else {
    				ctx.fillText(label, 0, y);
    			}
    			ctx.restore();
    		}
    	},

    	/**
    	 * @private
    	 */
    	_drawTitle: function() {
    		var me = this;
    		var ctx = me.ctx;
    		var options = me.options;
    		var scaleLabel = options.scaleLabel;

    		if (!scaleLabel.display) {
    			return;
    		}

    		var scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);
    		var scaleLabelFont = helpers$1.options._parseFont(scaleLabel);
    		var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
    		var halfLineHeight = scaleLabelFont.lineHeight / 2;
    		var position = options.position;
    		var rotation = 0;
    		var scaleLabelX, scaleLabelY;

    		if (me.isHorizontal()) {
    			scaleLabelX = me.left + me.width / 2; // midpoint of the width
    			scaleLabelY = position === 'bottom'
    				? me.bottom - halfLineHeight - scaleLabelPadding.bottom
    				: me.top + halfLineHeight + scaleLabelPadding.top;
    		} else {
    			var isLeft = position === 'left';
    			scaleLabelX = isLeft
    				? me.left + halfLineHeight + scaleLabelPadding.top
    				: me.right - halfLineHeight - scaleLabelPadding.top;
    			scaleLabelY = me.top + me.height / 2;
    			rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
    		}

    		ctx.save();
    		ctx.translate(scaleLabelX, scaleLabelY);
    		ctx.rotate(rotation);
    		ctx.textAlign = 'center';
    		ctx.textBaseline = 'middle';
    		ctx.fillStyle = scaleLabelFontColor; // render in correct colour
    		ctx.font = scaleLabelFont.string;
    		ctx.fillText(scaleLabel.labelString, 0, 0);
    		ctx.restore();
    	},

    	draw: function(chartArea) {
    		var me = this;

    		if (!me._isVisible()) {
    			return;
    		}

    		me._drawGrid(chartArea);
    		me._drawTitle();
    		me._drawLabels();
    	},

    	/**
    	 * @private
    	 */
    	_layers: function() {
    		var me = this;
    		var opts = me.options;
    		var tz = opts.ticks && opts.ticks.z || 0;
    		var gz = opts.gridLines && opts.gridLines.z || 0;

    		if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
    			// backward compatibility: draw has been overridden by custom scale
    			return [{
    				z: tz,
    				draw: function() {
    					me.draw.apply(me, arguments);
    				}
    			}];
    		}

    		return [{
    			z: gz,
    			draw: function() {
    				me._drawGrid.apply(me, arguments);
    				me._drawTitle.apply(me, arguments);
    			}
    		}, {
    			z: tz,
    			draw: function() {
    				me._drawLabels.apply(me, arguments);
    			}
    		}];
    	},

    	/**
    	 * @private
    	 */
    	_getMatchingVisibleMetas: function(type) {
    		var me = this;
    		var isHorizontal = me.isHorizontal();
    		return me.chart._getSortedVisibleDatasetMetas()
    			.filter(function(meta) {
    				return (!type || meta.type === type)
    					&& (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);
    			});
    	}
    });

    Scale.prototype._draw = Scale.prototype.draw;

    var core_scale = Scale;

    var isNullOrUndef$1 = helpers$1.isNullOrUndef;

    var defaultConfig = {
    	position: 'bottom'
    };

    var scale_category = core_scale.extend({
    	determineDataLimits: function() {
    		var me = this;
    		var labels = me._getLabels();
    		var ticksOpts = me.options.ticks;
    		var min = ticksOpts.min;
    		var max = ticksOpts.max;
    		var minIndex = 0;
    		var maxIndex = labels.length - 1;
    		var findIndex;

    		if (min !== undefined) {
    			// user specified min value
    			findIndex = labels.indexOf(min);
    			if (findIndex >= 0) {
    				minIndex = findIndex;
    			}
    		}

    		if (max !== undefined) {
    			// user specified max value
    			findIndex = labels.indexOf(max);
    			if (findIndex >= 0) {
    				maxIndex = findIndex;
    			}
    		}

    		me.minIndex = minIndex;
    		me.maxIndex = maxIndex;
    		me.min = labels[minIndex];
    		me.max = labels[maxIndex];
    	},

    	buildTicks: function() {
    		var me = this;
    		var labels = me._getLabels();
    		var minIndex = me.minIndex;
    		var maxIndex = me.maxIndex;

    		// If we are viewing some subset of labels, slice the original array
    		me.ticks = (minIndex === 0 && maxIndex === labels.length - 1) ? labels : labels.slice(minIndex, maxIndex + 1);
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		var me = this;
    		var chart = me.chart;

    		if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
    			return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
    		}

    		return me._getLabels()[index];
    	},

    	_configure: function() {
    		var me = this;
    		var offset = me.options.offset;
    		var ticks = me.ticks;

    		core_scale.prototype._configure.call(me);

    		if (!me.isHorizontal()) {
    			// For backward compatibility, vertical category scale reverse is inverted.
    			me._reversePixels = !me._reversePixels;
    		}

    		if (!ticks) {
    			return;
    		}

    		me._startValue = me.minIndex - (offset ? 0.5 : 0);
    		me._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);
    	},

    	// Used to get data value locations.  Value can either be an index or a numerical value
    	getPixelForValue: function(value, index, datasetIndex) {
    		var me = this;
    		var valueCategory, labels, idx;

    		if (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {
    			value = me.chart.data.datasets[datasetIndex].data[index];
    		}

    		// If value is a data object, then index is the index in the data array,
    		// not the index of the scale. We need to change that.
    		if (!isNullOrUndef$1(value)) {
    			valueCategory = me.isHorizontal() ? value.x : value.y;
    		}
    		if (valueCategory !== undefined || (value !== undefined && isNaN(index))) {
    			labels = me._getLabels();
    			value = helpers$1.valueOrDefault(valueCategory, value);
    			idx = labels.indexOf(value);
    			index = idx !== -1 ? idx : index;
    			if (isNaN(index)) {
    				index = value;
    			}
    		}
    		return me.getPixelForDecimal((index - me._startValue) / me._valueRange);
    	},

    	getPixelForTick: function(index) {
    		var ticks = this.ticks;
    		return index < 0 || index > ticks.length - 1
    			? null
    			: this.getPixelForValue(ticks[index], index + this.minIndex);
    	},

    	getValueForPixel: function(pixel) {
    		var me = this;
    		var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
    		return Math.min(Math.max(value, 0), me.ticks.length - 1);
    	},

    	getBasePixel: function() {
    		return this.bottom;
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults = defaultConfig;
    scale_category._defaults = _defaults;

    var noop = helpers$1.noop;
    var isNullOrUndef$2 = helpers$1.isNullOrUndef;

    /**
     * Generate a set of linear ticks
     * @param generationOptions the options used to generate the ticks
     * @param dataRange the range of the data
     * @returns {number[]} array of tick values
     */
    function generateTicks(generationOptions, dataRange) {
    	var ticks = [];
    	// To get a "nice" value for the tick spacing, we will use the appropriately named
    	// "nice number" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
    	// for details.

    	var MIN_SPACING = 1e-14;
    	var stepSize = generationOptions.stepSize;
    	var unit = stepSize || 1;
    	var maxNumSpaces = generationOptions.maxTicks - 1;
    	var min = generationOptions.min;
    	var max = generationOptions.max;
    	var precision = generationOptions.precision;
    	var rmin = dataRange.min;
    	var rmax = dataRange.max;
    	var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
    	var factor, niceMin, niceMax, numSpaces;

    	// Beyond MIN_SPACING floating point numbers being to lose precision
    	// such that we can't do the math necessary to generate ticks
    	if (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {
    		return [rmin, rmax];
    	}

    	numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
    	if (numSpaces > maxNumSpaces) {
    		// If the calculated num of spaces exceeds maxNumSpaces, recalculate it
    		spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
    	}

    	if (stepSize || isNullOrUndef$2(precision)) {
    		// If a precision is not specified, calculate factor based on spacing
    		factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
    	} else {
    		// If the user specified a precision, round to that number of decimal places
    		factor = Math.pow(10, precision);
    		spacing = Math.ceil(spacing * factor) / factor;
    	}

    	niceMin = Math.floor(rmin / spacing) * spacing;
    	niceMax = Math.ceil(rmax / spacing) * spacing;

    	// If min, max and stepSize is set and they make an evenly spaced scale use it.
    	if (stepSize) {
    		// If very close to our whole number, use it.
    		if (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {
    			niceMin = min;
    		}
    		if (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {
    			niceMax = max;
    		}
    	}

    	numSpaces = (niceMax - niceMin) / spacing;
    	// If very close to our rounded value, use it.
    	if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
    		numSpaces = Math.round(numSpaces);
    	} else {
    		numSpaces = Math.ceil(numSpaces);
    	}

    	niceMin = Math.round(niceMin * factor) / factor;
    	niceMax = Math.round(niceMax * factor) / factor;
    	ticks.push(isNullOrUndef$2(min) ? niceMin : min);
    	for (var j = 1; j < numSpaces; ++j) {
    		ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);
    	}
    	ticks.push(isNullOrUndef$2(max) ? niceMax : max);

    	return ticks;
    }

    var scale_linearbase = core_scale.extend({
    	getRightValue: function(value) {
    		if (typeof value === 'string') {
    			return +value;
    		}
    		return core_scale.prototype.getRightValue.call(this, value);
    	},

    	handleTickRangeOptions: function() {
    		var me = this;
    		var opts = me.options;
    		var tickOpts = opts.ticks;

    		// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
    		// do nothing since that would make the chart weird. If the user really wants a weird chart
    		// axis, they can manually override it
    		if (tickOpts.beginAtZero) {
    			var minSign = helpers$1.sign(me.min);
    			var maxSign = helpers$1.sign(me.max);

    			if (minSign < 0 && maxSign < 0) {
    				// move the top up to 0
    				me.max = 0;
    			} else if (minSign > 0 && maxSign > 0) {
    				// move the bottom down to 0
    				me.min = 0;
    			}
    		}

    		var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
    		var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;

    		if (tickOpts.min !== undefined) {
    			me.min = tickOpts.min;
    		} else if (tickOpts.suggestedMin !== undefined) {
    			if (me.min === null) {
    				me.min = tickOpts.suggestedMin;
    			} else {
    				me.min = Math.min(me.min, tickOpts.suggestedMin);
    			}
    		}

    		if (tickOpts.max !== undefined) {
    			me.max = tickOpts.max;
    		} else if (tickOpts.suggestedMax !== undefined) {
    			if (me.max === null) {
    				me.max = tickOpts.suggestedMax;
    			} else {
    				me.max = Math.max(me.max, tickOpts.suggestedMax);
    			}
    		}

    		if (setMin !== setMax) {
    			// We set the min or the max but not both.
    			// So ensure that our range is good
    			// Inverted or 0 length range can happen when
    			// ticks.min is set, and no datasets are visible
    			if (me.min >= me.max) {
    				if (setMin) {
    					me.max = me.min + 1;
    				} else {
    					me.min = me.max - 1;
    				}
    			}
    		}

    		if (me.min === me.max) {
    			me.max++;

    			if (!tickOpts.beginAtZero) {
    				me.min--;
    			}
    		}
    	},

    	getTickLimit: function() {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var stepSize = tickOpts.stepSize;
    		var maxTicksLimit = tickOpts.maxTicksLimit;
    		var maxTicks;

    		if (stepSize) {
    			maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
    		} else {
    			maxTicks = me._computeTickLimit();
    			maxTicksLimit = maxTicksLimit || 11;
    		}

    		if (maxTicksLimit) {
    			maxTicks = Math.min(maxTicksLimit, maxTicks);
    		}

    		return maxTicks;
    	},

    	_computeTickLimit: function() {
    		return Number.POSITIVE_INFINITY;
    	},

    	handleDirectionalChanges: noop,

    	buildTicks: function() {
    		var me = this;
    		var opts = me.options;
    		var tickOpts = opts.ticks;

    		// Figure out what the max number of ticks we can support it is based on the size of
    		// the axis area. For now, we say that the minimum tick spacing in pixels must be 40
    		// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
    		// the graph. Make sure we always have at least 2 ticks
    		var maxTicks = me.getTickLimit();
    		maxTicks = Math.max(2, maxTicks);

    		var numericGeneratorOptions = {
    			maxTicks: maxTicks,
    			min: tickOpts.min,
    			max: tickOpts.max,
    			precision: tickOpts.precision,
    			stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
    		};
    		var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);

    		me.handleDirectionalChanges();

    		// At this point, we need to update our max and min given the tick values since we have expanded the
    		// range of the scale
    		me.max = helpers$1.max(ticks);
    		me.min = helpers$1.min(ticks);

    		if (tickOpts.reverse) {
    			ticks.reverse();

    			me.start = me.max;
    			me.end = me.min;
    		} else {
    			me.start = me.min;
    			me.end = me.max;
    		}
    	},

    	convertTicksToLabels: function() {
    		var me = this;
    		me.ticksAsNumbers = me.ticks.slice();
    		me.zeroLineIndex = me.ticks.indexOf(0);

    		core_scale.prototype.convertTicksToLabels.call(me);
    	},

    	_configure: function() {
    		var me = this;
    		var ticks = me.getTicks();
    		var start = me.min;
    		var end = me.max;
    		var offset;

    		core_scale.prototype._configure.call(me);

    		if (me.options.offset && ticks.length) {
    			offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
    			start -= offset;
    			end += offset;
    		}
    		me._startValue = start;
    		me._endValue = end;
    		me._valueRange = end - start;
    	}
    });

    var defaultConfig$1 = {
    	position: 'left',
    	ticks: {
    		callback: core_ticks.formatters.linear
    	}
    };

    var DEFAULT_MIN = 0;
    var DEFAULT_MAX = 1;

    function getOrCreateStack(stacks, stacked, meta) {
    	var key = [
    		meta.type,
    		// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
    		stacked === undefined && meta.stack === undefined ? meta.index : '',
    		meta.stack
    	].join('.');

    	if (stacks[key] === undefined) {
    		stacks[key] = {
    			pos: [],
    			neg: []
    		};
    	}

    	return stacks[key];
    }

    function stackData(scale, stacks, meta, data) {
    	var opts = scale.options;
    	var stacked = opts.stacked;
    	var stack = getOrCreateStack(stacks, stacked, meta);
    	var pos = stack.pos;
    	var neg = stack.neg;
    	var ilen = data.length;
    	var i, value;

    	for (i = 0; i < ilen; ++i) {
    		value = scale._parseValue(data[i]);
    		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
    			continue;
    		}

    		pos[i] = pos[i] || 0;
    		neg[i] = neg[i] || 0;

    		if (opts.relativePoints) {
    			pos[i] = 100;
    		} else if (value.min < 0 || value.max < 0) {
    			neg[i] += value.min;
    		} else {
    			pos[i] += value.max;
    		}
    	}
    }

    function updateMinMax(scale, meta, data) {
    	var ilen = data.length;
    	var i, value;

    	for (i = 0; i < ilen; ++i) {
    		value = scale._parseValue(data[i]);
    		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
    			continue;
    		}

    		scale.min = Math.min(scale.min, value.min);
    		scale.max = Math.max(scale.max, value.max);
    	}
    }

    var scale_linear = scale_linearbase.extend({
    	determineDataLimits: function() {
    		var me = this;
    		var opts = me.options;
    		var chart = me.chart;
    		var datasets = chart.data.datasets;
    		var metasets = me._getMatchingVisibleMetas();
    		var hasStacks = opts.stacked;
    		var stacks = {};
    		var ilen = metasets.length;
    		var i, meta, data, values;

    		me.min = Number.POSITIVE_INFINITY;
    		me.max = Number.NEGATIVE_INFINITY;

    		if (hasStacks === undefined) {
    			for (i = 0; !hasStacks && i < ilen; ++i) {
    				meta = metasets[i];
    				hasStacks = meta.stack !== undefined;
    			}
    		}

    		for (i = 0; i < ilen; ++i) {
    			meta = metasets[i];
    			data = datasets[meta.index].data;
    			if (hasStacks) {
    				stackData(me, stacks, meta, data);
    			} else {
    				updateMinMax(me, meta, data);
    			}
    		}

    		helpers$1.each(stacks, function(stackValues) {
    			values = stackValues.pos.concat(stackValues.neg);
    			me.min = Math.min(me.min, helpers$1.min(values));
    			me.max = Math.max(me.max, helpers$1.max(values));
    		});

    		me.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
    		me.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;

    		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
    		me.handleTickRangeOptions();
    	},

    	// Returns the maximum number of ticks based on the scale dimension
    	_computeTickLimit: function() {
    		var me = this;
    		var tickFont;

    		if (me.isHorizontal()) {
    			return Math.ceil(me.width / 40);
    		}
    		tickFont = helpers$1.options._parseFont(me.options.ticks);
    		return Math.ceil(me.height / tickFont.lineHeight);
    	},

    	// Called after the ticks are built. We need
    	handleDirectionalChanges: function() {
    		if (!this.isHorizontal()) {
    			// We are in a vertical orientation. The top value is the highest. So reverse the array
    			this.ticks.reverse();
    		}
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
    	},

    	// Utils
    	getPixelForValue: function(value) {
    		var me = this;
    		return me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);
    	},

    	getValueForPixel: function(pixel) {
    		return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
    	},

    	getPixelForTick: function(index) {
    		var ticks = this.ticksAsNumbers;
    		if (index < 0 || index > ticks.length - 1) {
    			return null;
    		}
    		return this.getPixelForValue(ticks[index]);
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$1 = defaultConfig$1;
    scale_linear._defaults = _defaults$1;

    var valueOrDefault$b = helpers$1.valueOrDefault;
    var log10 = helpers$1.math.log10;

    /**
     * Generate a set of logarithmic ticks
     * @param generationOptions the options used to generate the ticks
     * @param dataRange the range of the data
     * @returns {number[]} array of tick values
     */
    function generateTicks$1(generationOptions, dataRange) {
    	var ticks = [];

    	var tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));

    	var endExp = Math.floor(log10(dataRange.max));
    	var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
    	var exp, significand;

    	if (tickVal === 0) {
    		exp = Math.floor(log10(dataRange.minNotZero));
    		significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));

    		ticks.push(tickVal);
    		tickVal = significand * Math.pow(10, exp);
    	} else {
    		exp = Math.floor(log10(tickVal));
    		significand = Math.floor(tickVal / Math.pow(10, exp));
    	}
    	var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;

    	do {
    		ticks.push(tickVal);

    		++significand;
    		if (significand === 10) {
    			significand = 1;
    			++exp;
    			precision = exp >= 0 ? 1 : precision;
    		}

    		tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
    	} while (exp < endExp || (exp === endExp && significand < endSignificand));

    	var lastTick = valueOrDefault$b(generationOptions.max, tickVal);
    	ticks.push(lastTick);

    	return ticks;
    }

    var defaultConfig$2 = {
    	position: 'left',

    	// label settings
    	ticks: {
    		callback: core_ticks.formatters.logarithmic
    	}
    };

    // TODO(v3): change this to positiveOrDefault
    function nonNegativeOrDefault(value, defaultValue) {
    	return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
    }

    var scale_logarithmic = core_scale.extend({
    	determineDataLimits: function() {
    		var me = this;
    		var opts = me.options;
    		var chart = me.chart;
    		var datasets = chart.data.datasets;
    		var isHorizontal = me.isHorizontal();
    		function IDMatches(meta) {
    			return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
    		}
    		var datasetIndex, meta, value, data, i, ilen;

    		// Calculate Range
    		me.min = Number.POSITIVE_INFINITY;
    		me.max = Number.NEGATIVE_INFINITY;
    		me.minNotZero = Number.POSITIVE_INFINITY;

    		var hasStacks = opts.stacked;
    		if (hasStacks === undefined) {
    			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
    				meta = chart.getDatasetMeta(datasetIndex);
    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
    					meta.stack !== undefined) {
    					hasStacks = true;
    					break;
    				}
    			}
    		}

    		if (opts.stacked || hasStacks) {
    			var valuesPerStack = {};

    			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
    				meta = chart.getDatasetMeta(datasetIndex);
    				var key = [
    					meta.type,
    					// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
    					((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
    					meta.stack
    				].join('.');

    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
    					if (valuesPerStack[key] === undefined) {
    						valuesPerStack[key] = [];
    					}

    					data = datasets[datasetIndex].data;
    					for (i = 0, ilen = data.length; i < ilen; i++) {
    						var values = valuesPerStack[key];
    						value = me._parseValue(data[i]);
    						// invalid, hidden and negative values are ignored
    						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
    							continue;
    						}
    						values[i] = values[i] || 0;
    						values[i] += value.max;
    					}
    				}
    			}

    			helpers$1.each(valuesPerStack, function(valuesForType) {
    				if (valuesForType.length > 0) {
    					var minVal = helpers$1.min(valuesForType);
    					var maxVal = helpers$1.max(valuesForType);
    					me.min = Math.min(me.min, minVal);
    					me.max = Math.max(me.max, maxVal);
    				}
    			});

    		} else {
    			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
    				meta = chart.getDatasetMeta(datasetIndex);
    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
    					data = datasets[datasetIndex].data;
    					for (i = 0, ilen = data.length; i < ilen; i++) {
    						value = me._parseValue(data[i]);
    						// invalid, hidden and negative values are ignored
    						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
    							continue;
    						}

    						me.min = Math.min(value.min, me.min);
    						me.max = Math.max(value.max, me.max);

    						if (value.min !== 0) {
    							me.minNotZero = Math.min(value.min, me.minNotZero);
    						}
    					}
    				}
    			}
    		}

    		me.min = helpers$1.isFinite(me.min) ? me.min : null;
    		me.max = helpers$1.isFinite(me.max) ? me.max : null;
    		me.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;

    		// Common base implementation to handle ticks.min, ticks.max
    		this.handleTickRangeOptions();
    	},

    	handleTickRangeOptions: function() {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var DEFAULT_MIN = 1;
    		var DEFAULT_MAX = 10;

    		me.min = nonNegativeOrDefault(tickOpts.min, me.min);
    		me.max = nonNegativeOrDefault(tickOpts.max, me.max);

    		if (me.min === me.max) {
    			if (me.min !== 0 && me.min !== null) {
    				me.min = Math.pow(10, Math.floor(log10(me.min)) - 1);
    				me.max = Math.pow(10, Math.floor(log10(me.max)) + 1);
    			} else {
    				me.min = DEFAULT_MIN;
    				me.max = DEFAULT_MAX;
    			}
    		}
    		if (me.min === null) {
    			me.min = Math.pow(10, Math.floor(log10(me.max)) - 1);
    		}
    		if (me.max === null) {
    			me.max = me.min !== 0
    				? Math.pow(10, Math.floor(log10(me.min)) + 1)
    				: DEFAULT_MAX;
    		}
    		if (me.minNotZero === null) {
    			if (me.min > 0) {
    				me.minNotZero = me.min;
    			} else if (me.max < 1) {
    				me.minNotZero = Math.pow(10, Math.floor(log10(me.max)));
    			} else {
    				me.minNotZero = DEFAULT_MIN;
    			}
    		}
    	},

    	buildTicks: function() {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var reverse = !me.isHorizontal();

    		var generationOptions = {
    			min: nonNegativeOrDefault(tickOpts.min),
    			max: nonNegativeOrDefault(tickOpts.max)
    		};
    		var ticks = me.ticks = generateTicks$1(generationOptions, me);

    		// At this point, we need to update our max and min given the tick values since we have expanded the
    		// range of the scale
    		me.max = helpers$1.max(ticks);
    		me.min = helpers$1.min(ticks);

    		if (tickOpts.reverse) {
    			reverse = !reverse;
    			me.start = me.max;
    			me.end = me.min;
    		} else {
    			me.start = me.min;
    			me.end = me.max;
    		}
    		if (reverse) {
    			ticks.reverse();
    		}
    	},

    	convertTicksToLabels: function() {
    		this.tickValues = this.ticks.slice();

    		core_scale.prototype.convertTicksToLabels.call(this);
    	},

    	// Get the correct tooltip label
    	getLabelForIndex: function(index, datasetIndex) {
    		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
    	},

    	getPixelForTick: function(index) {
    		var ticks = this.tickValues;
    		if (index < 0 || index > ticks.length - 1) {
    			return null;
    		}
    		return this.getPixelForValue(ticks[index]);
    	},

    	/**
    	 * Returns the value of the first tick.
    	 * @param {number} value - The minimum not zero value.
    	 * @return {number} The first tick value.
    	 * @private
    	 */
    	_getFirstTickValue: function(value) {
    		var exp = Math.floor(log10(value));
    		var significand = Math.floor(value / Math.pow(10, exp));

    		return significand * Math.pow(10, exp);
    	},

    	_configure: function() {
    		var me = this;
    		var start = me.min;
    		var offset = 0;

    		core_scale.prototype._configure.call(me);

    		if (start === 0) {
    			start = me._getFirstTickValue(me.minNotZero);
    			offset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;
    		}

    		me._startValue = log10(start);
    		me._valueOffset = offset;
    		me._valueRange = (log10(me.max) - log10(start)) / (1 - offset);
    	},

    	getPixelForValue: function(value) {
    		var me = this;
    		var decimal = 0;

    		value = +me.getRightValue(value);

    		if (value > me.min && value > 0) {
    			decimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;
    		}
    		return me.getPixelForDecimal(decimal);
    	},

    	getValueForPixel: function(pixel) {
    		var me = this;
    		var decimal = me.getDecimalForPixel(pixel);
    		return decimal === 0 && me.min === 0
    			? 0
    			: Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$2 = defaultConfig$2;
    scale_logarithmic._defaults = _defaults$2;

    var valueOrDefault$c = helpers$1.valueOrDefault;
    var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
    var resolve$4 = helpers$1.options.resolve;

    var defaultConfig$3 = {
    	display: true,

    	// Boolean - Whether to animate scaling the chart from the centre
    	animate: true,
    	position: 'chartArea',

    	angleLines: {
    		display: true,
    		color: 'rgba(0,0,0,0.1)',
    		lineWidth: 1,
    		borderDash: [],
    		borderDashOffset: 0.0
    	},

    	gridLines: {
    		circular: false
    	},

    	// label settings
    	ticks: {
    		// Boolean - Show a backdrop to the scale label
    		showLabelBackdrop: true,

    		// String - The colour of the label backdrop
    		backdropColor: 'rgba(255,255,255,0.75)',

    		// Number - The backdrop padding above & below the label in pixels
    		backdropPaddingY: 2,

    		// Number - The backdrop padding to the side of the label in pixels
    		backdropPaddingX: 2,

    		callback: core_ticks.formatters.linear
    	},

    	pointLabels: {
    		// Boolean - if true, show point labels
    		display: true,

    		// Number - Point label font size in pixels
    		fontSize: 10,

    		// Function - Used to convert point labels
    		callback: function(label) {
    			return label;
    		}
    	}
    };

    function getTickBackdropHeight(opts) {
    	var tickOpts = opts.ticks;

    	if (tickOpts.display && opts.display) {
    		return valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
    	}
    	return 0;
    }

    function measureLabelSize(ctx, lineHeight, label) {
    	if (helpers$1.isArray(label)) {
    		return {
    			w: helpers$1.longestText(ctx, ctx.font, label),
    			h: label.length * lineHeight
    		};
    	}

    	return {
    		w: ctx.measureText(label).width,
    		h: lineHeight
    	};
    }

    function determineLimits(angle, pos, size, min, max) {
    	if (angle === min || angle === max) {
    		return {
    			start: pos - (size / 2),
    			end: pos + (size / 2)
    		};
    	} else if (angle < min || angle > max) {
    		return {
    			start: pos - size,
    			end: pos
    		};
    	}

    	return {
    		start: pos,
    		end: pos + size
    	};
    }

    /**
     * Helper function to fit a radial linear scale with point labels
     */
    function fitWithPointLabels(scale) {

    	// Right, this is really confusing and there is a lot of maths going on here
    	// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
    	//
    	// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
    	//
    	// Solution:
    	//
    	// We assume the radius of the polygon is half the size of the canvas at first
    	// at each index we check if the text overlaps.
    	//
    	// Where it does, we store that angle and that index.
    	//
    	// After finding the largest index and angle we calculate how much we need to remove
    	// from the shape radius to move the point inwards by that x.
    	//
    	// We average the left and right distances to get the maximum shape radius that can fit in the box
    	// along with labels.
    	//
    	// Once we have that, we can find the centre point for the chart, by taking the x text protrusion
    	// on each side, removing that from the size, halving it and adding the left x protrusion width.
    	//
    	// This will mean we have a shape fitted to the canvas, as large as it can be with the labels
    	// and position it in the most space efficient manner
    	//
    	// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif

    	var plFont = helpers$1.options._parseFont(scale.options.pointLabels);

    	// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
    	// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
    	var furthestLimits = {
    		l: 0,
    		r: scale.width,
    		t: 0,
    		b: scale.height - scale.paddingTop
    	};
    	var furthestAngles = {};
    	var i, textSize, pointPosition;

    	scale.ctx.font = plFont.string;
    	scale._pointLabelSizes = [];

    	var valueCount = scale.chart.data.labels.length;
    	for (i = 0; i < valueCount; i++) {
    		pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);
    		textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i]);
    		scale._pointLabelSizes[i] = textSize;

    		// Add quarter circle to make degree 0 mean top of circle
    		var angleRadians = scale.getIndexAngle(i);
    		var angle = helpers$1.toDegrees(angleRadians) % 360;
    		var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    		var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);

    		if (hLimits.start < furthestLimits.l) {
    			furthestLimits.l = hLimits.start;
    			furthestAngles.l = angleRadians;
    		}

    		if (hLimits.end > furthestLimits.r) {
    			furthestLimits.r = hLimits.end;
    			furthestAngles.r = angleRadians;
    		}

    		if (vLimits.start < furthestLimits.t) {
    			furthestLimits.t = vLimits.start;
    			furthestAngles.t = angleRadians;
    		}

    		if (vLimits.end > furthestLimits.b) {
    			furthestLimits.b = vLimits.end;
    			furthestAngles.b = angleRadians;
    		}
    	}

    	scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);
    }

    function getTextAlignForAngle(angle) {
    	if (angle === 0 || angle === 180) {
    		return 'center';
    	} else if (angle < 180) {
    		return 'left';
    	}

    	return 'right';
    }

    function fillText(ctx, text, position, lineHeight) {
    	var y = position.y + lineHeight / 2;
    	var i, ilen;

    	if (helpers$1.isArray(text)) {
    		for (i = 0, ilen = text.length; i < ilen; ++i) {
    			ctx.fillText(text[i], position.x, y);
    			y += lineHeight;
    		}
    	} else {
    		ctx.fillText(text, position.x, y);
    	}
    }

    function adjustPointPositionForLabelHeight(angle, textSize, position) {
    	if (angle === 90 || angle === 270) {
    		position.y -= (textSize.h / 2);
    	} else if (angle > 270 || angle < 90) {
    		position.y -= textSize.h;
    	}
    }

    function drawPointLabels(scale) {
    	var ctx = scale.ctx;
    	var opts = scale.options;
    	var pointLabelOpts = opts.pointLabels;
    	var tickBackdropHeight = getTickBackdropHeight(opts);
    	var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
    	var plFont = helpers$1.options._parseFont(pointLabelOpts);

    	ctx.save();

    	ctx.font = plFont.string;
    	ctx.textBaseline = 'middle';

    	for (var i = scale.chart.data.labels.length - 1; i >= 0; i--) {
    		// Extra pixels out for some label spacing
    		var extra = (i === 0 ? tickBackdropHeight / 2 : 0);
    		var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);

    		// Keep this in loop since we may support array properties here
    		var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);
    		ctx.fillStyle = pointLabelFontColor;

    		var angleRadians = scale.getIndexAngle(i);
    		var angle = helpers$1.toDegrees(angleRadians);
    		ctx.textAlign = getTextAlignForAngle(angle);
    		adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
    		fillText(ctx, scale.pointLabels[i], pointLabelPosition, plFont.lineHeight);
    	}
    	ctx.restore();
    }

    function drawRadiusLine(scale, gridLineOpts, radius, index) {
    	var ctx = scale.ctx;
    	var circular = gridLineOpts.circular;
    	var valueCount = scale.chart.data.labels.length;
    	var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
    	var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
    	var pointPosition;

    	if ((!circular && !valueCount) || !lineColor || !lineWidth) {
    		return;
    	}

    	ctx.save();
    	ctx.strokeStyle = lineColor;
    	ctx.lineWidth = lineWidth;
    	if (ctx.setLineDash) {
    		ctx.setLineDash(gridLineOpts.borderDash || []);
    		ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;
    	}

    	ctx.beginPath();
    	if (circular) {
    		// Draw circular arcs between the points
    		ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
    	} else {
    		// Draw straight lines connecting each index
    		pointPosition = scale.getPointPosition(0, radius);
    		ctx.moveTo(pointPosition.x, pointPosition.y);

    		for (var i = 1; i < valueCount; i++) {
    			pointPosition = scale.getPointPosition(i, radius);
    			ctx.lineTo(pointPosition.x, pointPosition.y);
    		}
    	}
    	ctx.closePath();
    	ctx.stroke();
    	ctx.restore();
    }

    function numberOrZero(param) {
    	return helpers$1.isNumber(param) ? param : 0;
    }

    var scale_radialLinear = scale_linearbase.extend({
    	setDimensions: function() {
    		var me = this;

    		// Set the unconstrained dimension before label rotation
    		me.width = me.maxWidth;
    		me.height = me.maxHeight;
    		me.paddingTop = getTickBackdropHeight(me.options) / 2;
    		me.xCenter = Math.floor(me.width / 2);
    		me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
    		me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
    	},

    	determineDataLimits: function() {
    		var me = this;
    		var chart = me.chart;
    		var min = Number.POSITIVE_INFINITY;
    		var max = Number.NEGATIVE_INFINITY;

    		helpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {
    			if (chart.isDatasetVisible(datasetIndex)) {
    				var meta = chart.getDatasetMeta(datasetIndex);

    				helpers$1.each(dataset.data, function(rawValue, index) {
    					var value = +me.getRightValue(rawValue);
    					if (isNaN(value) || meta.data[index].hidden) {
    						return;
    					}

    					min = Math.min(value, min);
    					max = Math.max(value, max);
    				});
    			}
    		});

    		me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
    		me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);

    		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
    		me.handleTickRangeOptions();
    	},

    	// Returns the maximum number of ticks based on the scale dimension
    	_computeTickLimit: function() {
    		return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
    	},

    	convertTicksToLabels: function() {
    		var me = this;

    		scale_linearbase.prototype.convertTicksToLabels.call(me);

    		// Point labels
    		me.pointLabels = me.chart.data.labels.map(function() {
    			var label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);
    			return label || label === 0 ? label : '';
    		});
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
    	},

    	fit: function() {
    		var me = this;
    		var opts = me.options;

    		if (opts.display && opts.pointLabels.display) {
    			fitWithPointLabels(me);
    		} else {
    			me.setCenterPoint(0, 0, 0, 0);
    		}
    	},

    	/**
    	 * Set radius reductions and determine new radius and center point
    	 * @private
    	 */
    	setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
    		var me = this;
    		var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
    		var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
    		var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
    		var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);

    		radiusReductionLeft = numberOrZero(radiusReductionLeft);
    		radiusReductionRight = numberOrZero(radiusReductionRight);
    		radiusReductionTop = numberOrZero(radiusReductionTop);
    		radiusReductionBottom = numberOrZero(radiusReductionBottom);

    		me.drawingArea = Math.min(
    			Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
    			Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
    		me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
    	},

    	setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
    		var me = this;
    		var maxRight = me.width - rightMovement - me.drawingArea;
    		var maxLeft = leftMovement + me.drawingArea;
    		var maxTop = topMovement + me.drawingArea;
    		var maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;

    		me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);
    		me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);
    	},

    	getIndexAngle: function(index) {
    		var chart = this.chart;
    		var angleMultiplier = 360 / chart.data.labels.length;
    		var options = chart.options || {};
    		var startAngle = options.startAngle || 0;

    		// Start from the top instead of right, so remove a quarter of the circle
    		var angle = (index * angleMultiplier + startAngle) % 360;

    		return (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;
    	},

    	getDistanceFromCenterForValue: function(value) {
    		var me = this;

    		if (helpers$1.isNullOrUndef(value)) {
    			return NaN;
    		}

    		// Take into account half font size + the yPadding of the top value
    		var scalingFactor = me.drawingArea / (me.max - me.min);
    		if (me.options.ticks.reverse) {
    			return (me.max - value) * scalingFactor;
    		}
    		return (value - me.min) * scalingFactor;
    	},

    	getPointPosition: function(index, distanceFromCenter) {
    		var me = this;
    		var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
    		return {
    			x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
    			y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
    		};
    	},

    	getPointPositionForValue: function(index, value) {
    		return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
    	},

    	getBasePosition: function(index) {
    		var me = this;
    		var min = me.min;
    		var max = me.max;

    		return me.getPointPositionForValue(index || 0,
    			me.beginAtZero ? 0 :
    			min < 0 && max < 0 ? max :
    			min > 0 && max > 0 ? min :
    			0);
    	},

    	/**
    	 * @private
    	 */
    	_drawGrid: function() {
    		var me = this;
    		var ctx = me.ctx;
    		var opts = me.options;
    		var gridLineOpts = opts.gridLines;
    		var angleLineOpts = opts.angleLines;
    		var lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
    		var lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);
    		var i, offset, position;

    		if (opts.pointLabels.display) {
    			drawPointLabels(me);
    		}

    		if (gridLineOpts.display) {
    			helpers$1.each(me.ticks, function(label, index) {
    				if (index !== 0) {
    					offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
    					drawRadiusLine(me, gridLineOpts, offset, index);
    				}
    			});
    		}

    		if (angleLineOpts.display && lineWidth && lineColor) {
    			ctx.save();
    			ctx.lineWidth = lineWidth;
    			ctx.strokeStyle = lineColor;
    			if (ctx.setLineDash) {
    				ctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
    				ctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);
    			}

    			for (i = me.chart.data.labels.length - 1; i >= 0; i--) {
    				offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
    				position = me.getPointPosition(i, offset);
    				ctx.beginPath();
    				ctx.moveTo(me.xCenter, me.yCenter);
    				ctx.lineTo(position.x, position.y);
    				ctx.stroke();
    			}

    			ctx.restore();
    		}
    	},

    	/**
    	 * @private
    	 */
    	_drawLabels: function() {
    		var me = this;
    		var ctx = me.ctx;
    		var opts = me.options;
    		var tickOpts = opts.ticks;

    		if (!tickOpts.display) {
    			return;
    		}

    		var startAngle = me.getIndexAngle(0);
    		var tickFont = helpers$1.options._parseFont(tickOpts);
    		var tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);
    		var offset, width;

    		ctx.save();
    		ctx.font = tickFont.string;
    		ctx.translate(me.xCenter, me.yCenter);
    		ctx.rotate(startAngle);
    		ctx.textAlign = 'center';
    		ctx.textBaseline = 'middle';

    		helpers$1.each(me.ticks, function(label, index) {
    			if (index === 0 && !tickOpts.reverse) {
    				return;
    			}

    			offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);

    			if (tickOpts.showLabelBackdrop) {
    				width = ctx.measureText(label).width;
    				ctx.fillStyle = tickOpts.backdropColor;

    				ctx.fillRect(
    					-width / 2 - tickOpts.backdropPaddingX,
    					-offset - tickFont.size / 2 - tickOpts.backdropPaddingY,
    					width + tickOpts.backdropPaddingX * 2,
    					tickFont.size + tickOpts.backdropPaddingY * 2
    				);
    			}

    			ctx.fillStyle = tickFontColor;
    			ctx.fillText(label, 0, -offset);
    		});

    		ctx.restore();
    	},

    	/**
    	 * @private
    	 */
    	_drawTitle: helpers$1.noop
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$3 = defaultConfig$3;
    scale_radialLinear._defaults = _defaults$3;

    var deprecated$1 = helpers$1._deprecated;
    var resolve$5 = helpers$1.options.resolve;
    var valueOrDefault$d = helpers$1.valueOrDefault;

    // Integer constants are from the ES6 spec.
    var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
    var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

    var INTERVALS = {
    	millisecond: {
    		common: true,
    		size: 1,
    		steps: 1000
    	},
    	second: {
    		common: true,
    		size: 1000,
    		steps: 60
    	},
    	minute: {
    		common: true,
    		size: 60000,
    		steps: 60
    	},
    	hour: {
    		common: true,
    		size: 3600000,
    		steps: 24
    	},
    	day: {
    		common: true,
    		size: 86400000,
    		steps: 30
    	},
    	week: {
    		common: false,
    		size: 604800000,
    		steps: 4
    	},
    	month: {
    		common: true,
    		size: 2.628e9,
    		steps: 12
    	},
    	quarter: {
    		common: false,
    		size: 7.884e9,
    		steps: 4
    	},
    	year: {
    		common: true,
    		size: 3.154e10
    	}
    };

    var UNITS = Object.keys(INTERVALS);

    function sorter(a, b) {
    	return a - b;
    }

    function arrayUnique(items) {
    	var hash = {};
    	var out = [];
    	var i, ilen, item;

    	for (i = 0, ilen = items.length; i < ilen; ++i) {
    		item = items[i];
    		if (!hash[item]) {
    			hash[item] = true;
    			out.push(item);
    		}
    	}

    	return out;
    }

    function getMin(options) {
    	return helpers$1.valueOrDefault(options.time.min, options.ticks.min);
    }

    function getMax(options) {
    	return helpers$1.valueOrDefault(options.time.max, options.ticks.max);
    }

    /**
     * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
     * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
     * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
     * extremity (left + width or top + height). Note that it would be more optimized to directly
     * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
     * to create the lookup table. The table ALWAYS contains at least two items: min and max.
     *
     * @param {number[]} timestamps - timestamps sorted from lowest to highest.
     * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min
     * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
     * If 'series', timestamps will be positioned at the same distance from each other. In this
     * case, only timestamps that break the time linearity are registered, meaning that in the
     * best case, all timestamps are linear, the table contains only min and max.
     */
    function buildLookupTable(timestamps, min, max, distribution) {
    	if (distribution === 'linear' || !timestamps.length) {
    		return [
    			{time: min, pos: 0},
    			{time: max, pos: 1}
    		];
    	}

    	var table = [];
    	var items = [min];
    	var i, ilen, prev, curr, next;

    	for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
    		curr = timestamps[i];
    		if (curr > min && curr < max) {
    			items.push(curr);
    		}
    	}

    	items.push(max);

    	for (i = 0, ilen = items.length; i < ilen; ++i) {
    		next = items[i + 1];
    		prev = items[i - 1];
    		curr = items[i];

    		// only add points that breaks the scale linearity
    		if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
    			table.push({time: curr, pos: i / (ilen - 1)});
    		}
    	}

    	return table;
    }

    // @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/
    function lookup(table, key, value) {
    	var lo = 0;
    	var hi = table.length - 1;
    	var mid, i0, i1;

    	while (lo >= 0 && lo <= hi) {
    		mid = (lo + hi) >> 1;
    		i0 = table[mid - 1] || null;
    		i1 = table[mid];

    		if (!i0) {
    			// given value is outside table (before first item)
    			return {lo: null, hi: i1};
    		} else if (i1[key] < value) {
    			lo = mid + 1;
    		} else if (i0[key] > value) {
    			hi = mid - 1;
    		} else {
    			return {lo: i0, hi: i1};
    		}
    	}

    	// given value is outside table (after last item)
    	return {lo: i1, hi: null};
    }

    /**
     * Linearly interpolates the given source `value` using the table items `skey` values and
     * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
     * returns the position for a timestamp equal to 42. If value is out of bounds, values at
     * index [0, 1] or [n - 1, n] are used for the interpolation.
     */
    function interpolate$1(table, skey, sval, tkey) {
    	var range = lookup(table, skey, sval);

    	// Note: the lookup table ALWAYS contains at least 2 items (min and max)
    	var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
    	var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;

    	var span = next[skey] - prev[skey];
    	var ratio = span ? (sval - prev[skey]) / span : 0;
    	var offset = (next[tkey] - prev[tkey]) * ratio;

    	return prev[tkey] + offset;
    }

    function toTimestamp(scale, input) {
    	var adapter = scale._adapter;
    	var options = scale.options.time;
    	var parser = options.parser;
    	var format = parser || options.format;
    	var value = input;

    	if (typeof parser === 'function') {
    		value = parser(value);
    	}

    	// Only parse if its not a timestamp already
    	if (!helpers$1.isFinite(value)) {
    		value = typeof format === 'string'
    			? adapter.parse(value, format)
    			: adapter.parse(value);
    	}

    	if (value !== null) {
    		return +value;
    	}

    	// Labels are in an incompatible format and no `parser` has been provided.
    	// The user might still use the deprecated `format` option for parsing.
    	if (!parser && typeof format === 'function') {
    		value = format(input);

    		// `format` could return something else than a timestamp, if so, parse it
    		if (!helpers$1.isFinite(value)) {
    			value = adapter.parse(value);
    		}
    	}

    	return value;
    }

    function parse(scale, input) {
    	if (helpers$1.isNullOrUndef(input)) {
    		return null;
    	}

    	var options = scale.options.time;
    	var value = toTimestamp(scale, scale.getRightValue(input));
    	if (value === null) {
    		return value;
    	}

    	if (options.round) {
    		value = +scale._adapter.startOf(value, options.round);
    	}

    	return value;
    }

    /**
     * Figures out what unit results in an appropriate number of auto-generated ticks
     */
    function determineUnitForAutoTicks(minUnit, min, max, capacity) {
    	var ilen = UNITS.length;
    	var i, interval, factor;

    	for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
    		interval = INTERVALS[UNITS[i]];
    		factor = interval.steps ? interval.steps : MAX_INTEGER;

    		if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
    			return UNITS[i];
    		}
    	}

    	return UNITS[ilen - 1];
    }

    /**
     * Figures out what unit to format a set of ticks with
     */
    function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
    	var i, unit;

    	for (i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
    		unit = UNITS[i];
    		if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
    			return unit;
    		}
    	}

    	return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
    }

    function determineMajorUnit(unit) {
    	for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
    		if (INTERVALS[UNITS[i]].common) {
    			return UNITS[i];
    		}
    	}
    }

    /**
     * Generates a maximum of `capacity` timestamps between min and max, rounded to the
     * `minor` unit using the given scale time `options`.
     * Important: this method can return ticks outside the min and max range, it's the
     * responsibility of the calling code to clamp values if needed.
     */
    function generate(scale, min, max, capacity) {
    	var adapter = scale._adapter;
    	var options = scale.options;
    	var timeOpts = options.time;
    	var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
    	var stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);
    	var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
    	var first = min;
    	var ticks = [];
    	var time;

    	// For 'week' unit, handle the first day of week option
    	if (weekday) {
    		first = +adapter.startOf(first, 'isoWeek', weekday);
    	}

    	// Align first ticks on unit
    	first = +adapter.startOf(first, weekday ? 'day' : minor);

    	// Prevent browser from freezing in case user options request millions of milliseconds
    	if (adapter.diff(max, min, minor) > 100000 * stepSize) {
    		throw min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor;
    	}

    	for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
    		ticks.push(time);
    	}

    	if (time === max || options.bounds === 'ticks') {
    		ticks.push(time);
    	}

    	return ticks;
    }

    /**
     * Returns the start and end offsets from edges in the form of {start, end}
     * where each value is a relative width to the scale and ranges between 0 and 1.
     * They add extra margins on the both sides by scaling down the original scale.
     * Offsets are added when the `offset` option is true.
     */
    function computeOffsets(table, ticks, min, max, options) {
    	var start = 0;
    	var end = 0;
    	var first, last;

    	if (options.offset && ticks.length) {
    		first = interpolate$1(table, 'time', ticks[0], 'pos');
    		if (ticks.length === 1) {
    			start = 1 - first;
    		} else {
    			start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;
    		}
    		last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');
    		if (ticks.length === 1) {
    			end = last;
    		} else {
    			end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;
    		}
    	}

    	return {start: start, end: end, factor: 1 / (start + 1 + end)};
    }

    function setMajorTicks(scale, ticks, map, majorUnit) {
    	var adapter = scale._adapter;
    	var first = +adapter.startOf(ticks[0].value, majorUnit);
    	var last = ticks[ticks.length - 1].value;
    	var major, index;

    	for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    		index = map[major];
    		if (index >= 0) {
    			ticks[index].major = true;
    		}
    	}
    	return ticks;
    }

    function ticksFromTimestamps(scale, values, majorUnit) {
    	var ticks = [];
    	var map = {};
    	var ilen = values.length;
    	var i, value;

    	for (i = 0; i < ilen; ++i) {
    		value = values[i];
    		map[value] = i;

    		ticks.push({
    			value: value,
    			major: false
    		});
    	}

    	// We set the major ticks separately from the above loop because calling startOf for every tick
    	// is expensive when there is a large number of ticks
    	return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
    }

    var defaultConfig$4 = {
    	position: 'bottom',

    	/**
    	 * Data distribution along the scale:
    	 * - 'linear': data are spread according to their time (distances can vary),
    	 * - 'series': data are spread at the same distance from each other.
    	 * @see https://github.com/chartjs/Chart.js/pull/4507
    	 * @since 2.7.0
    	 */
    	distribution: 'linear',

    	/**
    	 * Scale boundary strategy (bypassed by min/max time options)
    	 * - `data`: make sure data are fully visible, ticks outside are removed
    	 * - `ticks`: make sure ticks are fully visible, data outside are truncated
    	 * @see https://github.com/chartjs/Chart.js/pull/4556
    	 * @since 2.7.0
    	 */
    	bounds: 'data',

    	adapters: {},
    	time: {
    		parser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
    		unit: false, // false == automatic or override with week, month, year, etc.
    		round: false, // none, or override with week, month, year, etc.
    		displayFormat: false, // DEPRECATED
    		isoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/
    		minUnit: 'millisecond',
    		displayFormats: {}
    	},
    	ticks: {
    		autoSkip: false,

    		/**
    		 * Ticks generation input values:
    		 * - 'auto': generates "optimal" ticks based on scale size and time options.
    		 * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
    		 * - 'labels': generates ticks from user given `data.labels` values ONLY.
    		 * @see https://github.com/chartjs/Chart.js/pull/4507
    		 * @since 2.7.0
    		 */
    		source: 'auto',

    		major: {
    			enabled: false
    		}
    	}
    };

    var scale_time = core_scale.extend({
    	initialize: function() {
    		this.mergeTicksOptions();
    		core_scale.prototype.initialize.call(this);
    	},

    	update: function() {
    		var me = this;
    		var options = me.options;
    		var time = options.time || (options.time = {});
    		var adapter = me._adapter = new core_adapters._date(options.adapters.date);

    		// DEPRECATIONS: output a message only one time per update
    		deprecated$1('time scale', time.format, 'time.format', 'time.parser');
    		deprecated$1('time scale', time.min, 'time.min', 'ticks.min');
    		deprecated$1('time scale', time.max, 'time.max', 'ticks.max');

    		// Backward compatibility: before introducing adapter, `displayFormats` was
    		// supposed to contain *all* unit/string pairs but this can't be resolved
    		// when loading the scale (adapters are loaded afterward), so let's populate
    		// missing formats on update
    		helpers$1.mergeIf(time.displayFormats, adapter.formats());

    		return core_scale.prototype.update.apply(me, arguments);
    	},

    	/**
    	 * Allows data to be referenced via 't' attribute
    	 */
    	getRightValue: function(rawValue) {
    		if (rawValue && rawValue.t !== undefined) {
    			rawValue = rawValue.t;
    		}
    		return core_scale.prototype.getRightValue.call(this, rawValue);
    	},

    	determineDataLimits: function() {
    		var me = this;
    		var chart = me.chart;
    		var adapter = me._adapter;
    		var options = me.options;
    		var unit = options.time.unit || 'day';
    		var min = MAX_INTEGER;
    		var max = MIN_INTEGER;
    		var timestamps = [];
    		var datasets = [];
    		var labels = [];
    		var i, j, ilen, jlen, data, timestamp, labelsAdded;
    		var dataLabels = me._getLabels();

    		for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {
    			labels.push(parse(me, dataLabels[i]));
    		}

    		for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    			if (chart.isDatasetVisible(i)) {
    				data = chart.data.datasets[i].data;

    				// Let's consider that all data have the same format.
    				if (helpers$1.isObject(data[0])) {
    					datasets[i] = [];

    					for (j = 0, jlen = data.length; j < jlen; ++j) {
    						timestamp = parse(me, data[j]);
    						timestamps.push(timestamp);
    						datasets[i][j] = timestamp;
    					}
    				} else {
    					datasets[i] = labels.slice(0);
    					if (!labelsAdded) {
    						timestamps = timestamps.concat(labels);
    						labelsAdded = true;
    					}
    				}
    			} else {
    				datasets[i] = [];
    			}
    		}

    		if (labels.length) {
    			min = Math.min(min, labels[0]);
    			max = Math.max(max, labels[labels.length - 1]);
    		}

    		if (timestamps.length) {
    			timestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);
    			min = Math.min(min, timestamps[0]);
    			max = Math.max(max, timestamps[timestamps.length - 1]);
    		}

    		min = parse(me, getMin(options)) || min;
    		max = parse(me, getMax(options)) || max;

    		// In case there is no valid min/max, set limits based on unit time option
    		min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;
    		max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;

    		// Make sure that max is strictly higher than min (required by the lookup table)
    		me.min = Math.min(min, max);
    		me.max = Math.max(min + 1, max);

    		// PRIVATE
    		me._table = [];
    		me._timestamps = {
    			data: timestamps,
    			datasets: datasets,
    			labels: labels
    		};
    	},

    	buildTicks: function() {
    		var me = this;
    		var min = me.min;
    		var max = me.max;
    		var options = me.options;
    		var tickOpts = options.ticks;
    		var timeOpts = options.time;
    		var timestamps = me._timestamps;
    		var ticks = [];
    		var capacity = me.getLabelCapacity(min);
    		var source = tickOpts.source;
    		var distribution = options.distribution;
    		var i, ilen, timestamp;

    		if (source === 'data' || (source === 'auto' && distribution === 'series')) {
    			timestamps = timestamps.data;
    		} else if (source === 'labels') {
    			timestamps = timestamps.labels;
    		} else {
    			timestamps = generate(me, min, max, capacity);
    		}

    		if (options.bounds === 'ticks' && timestamps.length) {
    			min = timestamps[0];
    			max = timestamps[timestamps.length - 1];
    		}

    		// Enforce limits with user min/max options
    		min = parse(me, getMin(options)) || min;
    		max = parse(me, getMax(options)) || max;

    		// Remove ticks outside the min/max range
    		for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
    			timestamp = timestamps[i];
    			if (timestamp >= min && timestamp <= max) {
    				ticks.push(timestamp);
    			}
    		}

    		me.min = min;
    		me.max = max;

    		// PRIVATE
    		// determineUnitForFormatting relies on the number of ticks so we don't use it when
    		// autoSkip is enabled because we don't yet know what the final number of ticks will be
    		me._unit = timeOpts.unit || (tickOpts.autoSkip
    			? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity)
    			: determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
    		me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined
    			: determineMajorUnit(me._unit);
    		me._table = buildLookupTable(me._timestamps.data, min, max, distribution);
    		me._offsets = computeOffsets(me._table, ticks, min, max, options);

    		if (tickOpts.reverse) {
    			ticks.reverse();
    		}

    		return ticksFromTimestamps(me, ticks, me._majorUnit);
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		var me = this;
    		var adapter = me._adapter;
    		var data = me.chart.data;
    		var timeOpts = me.options.time;
    		var label = data.labels && index < data.labels.length ? data.labels[index] : '';
    		var value = data.datasets[datasetIndex].data[index];

    		if (helpers$1.isObject(value)) {
    			label = me.getRightValue(value);
    		}
    		if (timeOpts.tooltipFormat) {
    			return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
    		}
    		if (typeof label === 'string') {
    			return label;
    		}
    		return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
    	},

    	/**
    	 * Function to format an individual tick mark
    	 * @private
    	 */
    	tickFormatFunction: function(time, index, ticks, format) {
    		var me = this;
    		var adapter = me._adapter;
    		var options = me.options;
    		var formats = options.time.displayFormats;
    		var minorFormat = formats[me._unit];
    		var majorUnit = me._majorUnit;
    		var majorFormat = formats[majorUnit];
    		var tick = ticks[index];
    		var tickOpts = options.ticks;
    		var major = majorUnit && majorFormat && tick && tick.major;
    		var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);
    		var nestedTickOpts = major ? tickOpts.major : tickOpts.minor;
    		var formatter = resolve$5([
    			nestedTickOpts.callback,
    			nestedTickOpts.userCallback,
    			tickOpts.callback,
    			tickOpts.userCallback
    		]);

    		return formatter ? formatter(label, index, ticks) : label;
    	},

    	convertTicksToLabels: function(ticks) {
    		var labels = [];
    		var i, ilen;

    		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
    			labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));
    		}

    		return labels;
    	},

    	/**
    	 * @private
    	 */
    	getPixelForOffset: function(time) {
    		var me = this;
    		var offsets = me._offsets;
    		var pos = interpolate$1(me._table, 'time', time, 'pos');
    		return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
    	},

    	getPixelForValue: function(value, index, datasetIndex) {
    		var me = this;
    		var time = null;

    		if (index !== undefined && datasetIndex !== undefined) {
    			time = me._timestamps.datasets[datasetIndex][index];
    		}

    		if (time === null) {
    			time = parse(me, value);
    		}

    		if (time !== null) {
    			return me.getPixelForOffset(time);
    		}
    	},

    	getPixelForTick: function(index) {
    		var ticks = this.getTicks();
    		return index >= 0 && index < ticks.length ?
    			this.getPixelForOffset(ticks[index].value) :
    			null;
    	},

    	getValueForPixel: function(pixel) {
    		var me = this;
    		var offsets = me._offsets;
    		var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    		var time = interpolate$1(me._table, 'pos', pos, 'time');

    		// DEPRECATION, we should return time directly
    		return me._adapter._create(time);
    	},

    	/**
    	 * @private
    	 */
    	_getLabelSize: function(label) {
    		var me = this;
    		var ticksOpts = me.options.ticks;
    		var tickLabelWidth = me.ctx.measureText(label).width;
    		var angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
    		var cosRotation = Math.cos(angle);
    		var sinRotation = Math.sin(angle);
    		var tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);

    		return {
    			w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),
    			h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)
    		};
    	},

    	/**
    	 * Crude approximation of what the label width might be
    	 * @private
    	 */
    	getLabelWidth: function(label) {
    		return this._getLabelSize(label).w;
    	},

    	/**
    	 * @private
    	 */
    	getLabelCapacity: function(exampleTime) {
    		var me = this;
    		var timeOpts = me.options.time;
    		var displayFormats = timeOpts.displayFormats;

    		// pick the longest format (milliseconds) for guestimation
    		var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
    		var exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
    		var size = me._getLabelSize(exampleLabel);
    		var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);

    		if (me.options.offset) {
    			capacity--;
    		}

    		return capacity > 0 ? capacity : 1;
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$4 = defaultConfig$4;
    scale_time._defaults = _defaults$4;

    var scales = {
    	category: scale_category,
    	linear: scale_linear,
    	logarithmic: scale_logarithmic,
    	radialLinear: scale_radialLinear,
    	time: scale_time
    };

    var FORMATS = {
    	datetime: 'MMM D, YYYY, h:mm:ss a',
    	millisecond: 'h:mm:ss.SSS a',
    	second: 'h:mm:ss a',
    	minute: 'h:mm a',
    	hour: 'hA',
    	day: 'MMM D',
    	week: 'll',
    	month: 'MMM YYYY',
    	quarter: '[Q]Q - YYYY',
    	year: 'YYYY'
    };

    core_adapters._date.override(typeof moment === 'function' ? {
    	_id: 'moment', // DEBUG ONLY

    	formats: function() {
    		return FORMATS;
    	},

    	parse: function(value, format) {
    		if (typeof value === 'string' && typeof format === 'string') {
    			value = moment(value, format);
    		} else if (!(value instanceof moment)) {
    			value = moment(value);
    		}
    		return value.isValid() ? value.valueOf() : null;
    	},

    	format: function(time, format) {
    		return moment(time).format(format);
    	},

    	add: function(time, amount, unit) {
    		return moment(time).add(amount, unit).valueOf();
    	},

    	diff: function(max, min, unit) {
    		return moment(max).diff(moment(min), unit);
    	},

    	startOf: function(time, unit, weekday) {
    		time = moment(time);
    		if (unit === 'isoWeek') {
    			return time.isoWeekday(weekday).valueOf();
    		}
    		return time.startOf(unit).valueOf();
    	},

    	endOf: function(time, unit) {
    		return moment(time).endOf(unit).valueOf();
    	},

    	// DEPRECATIONS

    	/**
    	 * Provided for backward compatibility with scale.getValueForPixel().
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 * @private
    	 */
    	_create: function(time) {
    		return moment(time);
    	},
    } : {});

    core_defaults._set('global', {
    	plugins: {
    		filler: {
    			propagate: true
    		}
    	}
    });

    var mappers = {
    	dataset: function(source) {
    		var index = source.fill;
    		var chart = source.chart;
    		var meta = chart.getDatasetMeta(index);
    		var visible = meta && chart.isDatasetVisible(index);
    		var points = (visible && meta.dataset._children) || [];
    		var length = points.length || 0;

    		return !length ? null : function(point, i) {
    			return (i < length && points[i]._view) || null;
    		};
    	},

    	boundary: function(source) {
    		var boundary = source.boundary;
    		var x = boundary ? boundary.x : null;
    		var y = boundary ? boundary.y : null;

    		if (helpers$1.isArray(boundary)) {
    			return function(point, i) {
    				return boundary[i];
    			};
    		}

    		return function(point) {
    			return {
    				x: x === null ? point.x : x,
    				y: y === null ? point.y : y,
    			};
    		};
    	}
    };

    // @todo if (fill[0] === '#')
    function decodeFill(el, index, count) {
    	var model = el._model || {};
    	var fill = model.fill;
    	var target;

    	if (fill === undefined) {
    		fill = !!model.backgroundColor;
    	}

    	if (fill === false || fill === null) {
    		return false;
    	}

    	if (fill === true) {
    		return 'origin';
    	}

    	target = parseFloat(fill, 10);
    	if (isFinite(target) && Math.floor(target) === target) {
    		if (fill[0] === '-' || fill[0] === '+') {
    			target = index + target;
    		}

    		if (target === index || target < 0 || target >= count) {
    			return false;
    		}

    		return target;
    	}

    	switch (fill) {
    	// compatibility
    	case 'bottom':
    		return 'start';
    	case 'top':
    		return 'end';
    	case 'zero':
    		return 'origin';
    	// supported boundaries
    	case 'origin':
    	case 'start':
    	case 'end':
    		return fill;
    	// invalid fill values
    	default:
    		return false;
    	}
    }

    function computeLinearBoundary(source) {
    	var model = source.el._model || {};
    	var scale = source.el._scale || {};
    	var fill = source.fill;
    	var target = null;
    	var horizontal;

    	if (isFinite(fill)) {
    		return null;
    	}

    	// Backward compatibility: until v3, we still need to support boundary values set on
    	// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
    	// controllers might still use it (e.g. the Smith chart).

    	if (fill === 'start') {
    		target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
    	} else if (fill === 'end') {
    		target = model.scaleTop === undefined ? scale.top : model.scaleTop;
    	} else if (model.scaleZero !== undefined) {
    		target = model.scaleZero;
    	} else if (scale.getBasePixel) {
    		target = scale.getBasePixel();
    	}

    	if (target !== undefined && target !== null) {
    		if (target.x !== undefined && target.y !== undefined) {
    			return target;
    		}

    		if (helpers$1.isFinite(target)) {
    			horizontal = scale.isHorizontal();
    			return {
    				x: horizontal ? target : null,
    				y: horizontal ? null : target
    			};
    		}
    	}

    	return null;
    }

    function computeCircularBoundary(source) {
    	var scale = source.el._scale;
    	var options = scale.options;
    	var length = scale.chart.data.labels.length;
    	var fill = source.fill;
    	var target = [];
    	var start, end, center, i, point;

    	if (!length) {
    		return null;
    	}

    	start = options.ticks.reverse ? scale.max : scale.min;
    	end = options.ticks.reverse ? scale.min : scale.max;
    	center = scale.getPointPositionForValue(0, start);
    	for (i = 0; i < length; ++i) {
    		point = fill === 'start' || fill === 'end'
    			? scale.getPointPositionForValue(i, fill === 'start' ? start : end)
    			: scale.getBasePosition(i);
    		if (options.gridLines.circular) {
    			point.cx = center.x;
    			point.cy = center.y;
    			point.angle = scale.getIndexAngle(i) - Math.PI / 2;
    		}
    		target.push(point);
    	}
    	return target;
    }

    function computeBoundary(source) {
    	var scale = source.el._scale || {};

    	if (scale.getPointPositionForValue) {
    		return computeCircularBoundary(source);
    	}
    	return computeLinearBoundary(source);
    }

    function resolveTarget(sources, index, propagate) {
    	var source = sources[index];
    	var fill = source.fill;
    	var visited = [index];
    	var target;

    	if (!propagate) {
    		return fill;
    	}

    	while (fill !== false && visited.indexOf(fill) === -1) {
    		if (!isFinite(fill)) {
    			return fill;
    		}

    		target = sources[fill];
    		if (!target) {
    			return false;
    		}

    		if (target.visible) {
    			return fill;
    		}

    		visited.push(fill);
    		fill = target.fill;
    	}

    	return false;
    }

    function createMapper(source) {
    	var fill = source.fill;
    	var type = 'dataset';

    	if (fill === false) {
    		return null;
    	}

    	if (!isFinite(fill)) {
    		type = 'boundary';
    	}

    	return mappers[type](source);
    }

    function isDrawable(point) {
    	return point && !point.skip;
    }

    function drawArea(ctx, curve0, curve1, len0, len1) {
    	var i, cx, cy, r;

    	if (!len0 || !len1) {
    		return;
    	}

    	// building first area curve (normal)
    	ctx.moveTo(curve0[0].x, curve0[0].y);
    	for (i = 1; i < len0; ++i) {
    		helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
    	}

    	if (curve1[0].angle !== undefined) {
    		cx = curve1[0].cx;
    		cy = curve1[0].cy;
    		r = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));
    		for (i = len1 - 1; i > 0; --i) {
    			ctx.arc(cx, cy, r, curve1[i].angle, curve1[i - 1].angle, true);
    		}
    		return;
    	}

    	// joining the two area curves
    	ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);

    	// building opposite area curve (reverse)
    	for (i = len1 - 1; i > 0; --i) {
    		helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
    	}
    }

    function doFill(ctx, points, mapper, view, color, loop) {
    	var count = points.length;
    	var span = view.spanGaps;
    	var curve0 = [];
    	var curve1 = [];
    	var len0 = 0;
    	var len1 = 0;
    	var i, ilen, index, p0, p1, d0, d1, loopOffset;

    	ctx.beginPath();

    	for (i = 0, ilen = count; i < ilen; ++i) {
    		index = i % count;
    		p0 = points[index]._view;
    		p1 = mapper(p0, index, view);
    		d0 = isDrawable(p0);
    		d1 = isDrawable(p1);

    		if (loop && loopOffset === undefined && d0) {
    			loopOffset = i + 1;
    			ilen = count + loopOffset;
    		}

    		if (d0 && d1) {
    			len0 = curve0.push(p0);
    			len1 = curve1.push(p1);
    		} else if (len0 && len1) {
    			if (!span) {
    				drawArea(ctx, curve0, curve1, len0, len1);
    				len0 = len1 = 0;
    				curve0 = [];
    				curve1 = [];
    			} else {
    				if (d0) {
    					curve0.push(p0);
    				}
    				if (d1) {
    					curve1.push(p1);
    				}
    			}
    		}
    	}

    	drawArea(ctx, curve0, curve1, len0, len1);

    	ctx.closePath();
    	ctx.fillStyle = color;
    	ctx.fill();
    }

    var plugin_filler = {
    	id: 'filler',

    	afterDatasetsUpdate: function(chart, options) {
    		var count = (chart.data.datasets || []).length;
    		var propagate = options.propagate;
    		var sources = [];
    		var meta, i, el, source;

    		for (i = 0; i < count; ++i) {
    			meta = chart.getDatasetMeta(i);
    			el = meta.dataset;
    			source = null;

    			if (el && el._model && el instanceof elements.Line) {
    				source = {
    					visible: chart.isDatasetVisible(i),
    					fill: decodeFill(el, i, count),
    					chart: chart,
    					el: el
    				};
    			}

    			meta.$filler = source;
    			sources.push(source);
    		}

    		for (i = 0; i < count; ++i) {
    			source = sources[i];
    			if (!source) {
    				continue;
    			}

    			source.fill = resolveTarget(sources, i, propagate);
    			source.boundary = computeBoundary(source);
    			source.mapper = createMapper(source);
    		}
    	},

    	beforeDatasetsDraw: function(chart) {
    		var metasets = chart._getSortedVisibleDatasetMetas();
    		var ctx = chart.ctx;
    		var meta, i, el, view, points, mapper, color;

    		for (i = metasets.length - 1; i >= 0; --i) {
    			meta = metasets[i].$filler;

    			if (!meta || !meta.visible) {
    				continue;
    			}

    			el = meta.el;
    			view = el._view;
    			points = el._children || [];
    			mapper = meta.mapper;
    			color = view.backgroundColor || core_defaults.global.defaultColor;

    			if (mapper && color && points.length) {
    				helpers$1.canvas.clipArea(ctx, chart.chartArea);
    				doFill(ctx, points, mapper, view, color, el._loop);
    				helpers$1.canvas.unclipArea(ctx);
    			}
    		}
    	}
    };

    var getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;
    var noop$1 = helpers$1.noop;
    var valueOrDefault$e = helpers$1.valueOrDefault;

    core_defaults._set('global', {
    	legend: {
    		display: true,
    		position: 'top',
    		align: 'center',
    		fullWidth: true,
    		reverse: false,
    		weight: 1000,

    		// a callback that will handle
    		onClick: function(e, legendItem) {
    			var index = legendItem.datasetIndex;
    			var ci = this.chart;
    			var meta = ci.getDatasetMeta(index);

    			// See controller.isDatasetVisible comment
    			meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;

    			// We hid a dataset ... rerender the chart
    			ci.update();
    		},

    		onHover: null,
    		onLeave: null,

    		labels: {
    			boxWidth: 40,
    			padding: 10,
    			// Generates labels shown in the legend
    			// Valid properties to return:
    			// text : text to display
    			// fillStyle : fill of coloured box
    			// strokeStyle: stroke of coloured box
    			// hidden : if this legend item refers to a hidden item
    			// lineCap : cap style for line
    			// lineDash
    			// lineDashOffset :
    			// lineJoin :
    			// lineWidth :
    			generateLabels: function(chart) {
    				var datasets = chart.data.datasets;
    				var options = chart.options.legend || {};
    				var usePointStyle = options.labels && options.labels.usePointStyle;

    				return chart._getSortedDatasetMetas().map(function(meta) {
    					var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);

    					return {
    						text: datasets[meta.index].label,
    						fillStyle: style.backgroundColor,
    						hidden: !chart.isDatasetVisible(meta.index),
    						lineCap: style.borderCapStyle,
    						lineDash: style.borderDash,
    						lineDashOffset: style.borderDashOffset,
    						lineJoin: style.borderJoinStyle,
    						lineWidth: style.borderWidth,
    						strokeStyle: style.borderColor,
    						pointStyle: style.pointStyle,
    						rotation: style.rotation,

    						// Below is extra data used for toggling the datasets
    						datasetIndex: meta.index
    					};
    				}, this);
    			}
    		}
    	},

    	legendCallback: function(chart) {
    		var list = document.createElement('ul');
    		var datasets = chart.data.datasets;
    		var i, ilen, listItem, listItemSpan;

    		list.setAttribute('class', chart.id + '-legend');

    		for (i = 0, ilen = datasets.length; i < ilen; i++) {
    			listItem = list.appendChild(document.createElement('li'));
    			listItemSpan = listItem.appendChild(document.createElement('span'));
    			listItemSpan.style.backgroundColor = datasets[i].backgroundColor;
    			if (datasets[i].label) {
    				listItem.appendChild(document.createTextNode(datasets[i].label));
    			}
    		}

    		return list.outerHTML;
    	}
    });

    /**
     * Helper function to get the box width based on the usePointStyle option
     * @param {object} labelopts - the label options on the legend
     * @param {number} fontSize - the label font size
     * @return {number} width of the color box area
     */
    function getBoxWidth(labelOpts, fontSize) {
    	return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?
    		fontSize :
    		labelOpts.boxWidth;
    }

    /**
     * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
     */
    var Legend = core_element.extend({

    	initialize: function(config) {
    		var me = this;
    		helpers$1.extend(me, config);

    		// Contains hit boxes for each dataset (in dataset order)
    		me.legendHitBoxes = [];

    		/**
     		 * @private
     		 */
    		me._hoveredItem = null;

    		// Are we in doughnut mode which has a different data type
    		me.doughnutMode = false;
    	},

    	// These methods are ordered by lifecycle. Utilities then follow.
    	// Any function defined here is inherited by all legend types.
    	// Any function can be extended by the legend type

    	beforeUpdate: noop$1,
    	update: function(maxWidth, maxHeight, margins) {
    		var me = this;

    		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
    		me.beforeUpdate();

    		// Absorb the master measurements
    		me.maxWidth = maxWidth;
    		me.maxHeight = maxHeight;
    		me.margins = margins;

    		// Dimensions
    		me.beforeSetDimensions();
    		me.setDimensions();
    		me.afterSetDimensions();
    		// Labels
    		me.beforeBuildLabels();
    		me.buildLabels();
    		me.afterBuildLabels();

    		// Fit
    		me.beforeFit();
    		me.fit();
    		me.afterFit();
    		//
    		me.afterUpdate();

    		return me.minSize;
    	},
    	afterUpdate: noop$1,

    	//

    	beforeSetDimensions: noop$1,
    	setDimensions: function() {
    		var me = this;
    		// Set the unconstrained dimension before label rotation
    		if (me.isHorizontal()) {
    			// Reset position before calculating rotation
    			me.width = me.maxWidth;
    			me.left = 0;
    			me.right = me.width;
    		} else {
    			me.height = me.maxHeight;

    			// Reset position before calculating rotation
    			me.top = 0;
    			me.bottom = me.height;
    		}

    		// Reset padding
    		me.paddingLeft = 0;
    		me.paddingTop = 0;
    		me.paddingRight = 0;
    		me.paddingBottom = 0;

    		// Reset minSize
    		me.minSize = {
    			width: 0,
    			height: 0
    		};
    	},
    	afterSetDimensions: noop$1,

    	//

    	beforeBuildLabels: noop$1,
    	buildLabels: function() {
    		var me = this;
    		var labelOpts = me.options.labels || {};
    		var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];

    		if (labelOpts.filter) {
    			legendItems = legendItems.filter(function(item) {
    				return labelOpts.filter(item, me.chart.data);
    			});
    		}

    		if (me.options.reverse) {
    			legendItems.reverse();
    		}

    		me.legendItems = legendItems;
    	},
    	afterBuildLabels: noop$1,

    	//

    	beforeFit: noop$1,
    	fit: function() {
    		var me = this;
    		var opts = me.options;
    		var labelOpts = opts.labels;
    		var display = opts.display;

    		var ctx = me.ctx;

    		var labelFont = helpers$1.options._parseFont(labelOpts);
    		var fontSize = labelFont.size;

    		// Reset hit boxes
    		var hitboxes = me.legendHitBoxes = [];

    		var minSize = me.minSize;
    		var isHorizontal = me.isHorizontal();

    		if (isHorizontal) {
    			minSize.width = me.maxWidth; // fill all the width
    			minSize.height = display ? 10 : 0;
    		} else {
    			minSize.width = display ? 10 : 0;
    			minSize.height = me.maxHeight; // fill all the height
    		}

    		// Increase sizes here
    		if (!display) {
    			me.width = minSize.width = me.height = minSize.height = 0;
    			return;
    		}
    		ctx.font = labelFont.string;

    		if (isHorizontal) {
    			// Labels

    			// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
    			var lineWidths = me.lineWidths = [0];
    			var totalHeight = 0;

    			ctx.textAlign = 'left';
    			ctx.textBaseline = 'middle';

    			helpers$1.each(me.legendItems, function(legendItem, i) {
    				var boxWidth = getBoxWidth(labelOpts, fontSize);
    				var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

    				if (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
    					totalHeight += fontSize + labelOpts.padding;
    					lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
    				}

    				// Store the hitbox width and height here. Final position will be updated in `draw`
    				hitboxes[i] = {
    					left: 0,
    					top: 0,
    					width: width,
    					height: fontSize
    				};

    				lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
    			});

    			minSize.height += totalHeight;

    		} else {
    			var vPadding = labelOpts.padding;
    			var columnWidths = me.columnWidths = [];
    			var columnHeights = me.columnHeights = [];
    			var totalWidth = labelOpts.padding;
    			var currentColWidth = 0;
    			var currentColHeight = 0;

    			helpers$1.each(me.legendItems, function(legendItem, i) {
    				var boxWidth = getBoxWidth(labelOpts, fontSize);
    				var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

    				// If too tall, go to new column
    				if (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
    					totalWidth += currentColWidth + labelOpts.padding;
    					columnWidths.push(currentColWidth); // previous column width
    					columnHeights.push(currentColHeight);
    					currentColWidth = 0;
    					currentColHeight = 0;
    				}

    				// Get max width
    				currentColWidth = Math.max(currentColWidth, itemWidth);
    				currentColHeight += fontSize + vPadding;

    				// Store the hitbox width and height here. Final position will be updated in `draw`
    				hitboxes[i] = {
    					left: 0,
    					top: 0,
    					width: itemWidth,
    					height: fontSize
    				};
    			});

    			totalWidth += currentColWidth;
    			columnWidths.push(currentColWidth);
    			columnHeights.push(currentColHeight);
    			minSize.width += totalWidth;
    		}

    		me.width = minSize.width;
    		me.height = minSize.height;
    	},
    	afterFit: noop$1,

    	// Shared Methods
    	isHorizontal: function() {
    		return this.options.position === 'top' || this.options.position === 'bottom';
    	},

    	// Actually draw the legend on the canvas
    	draw: function() {
    		var me = this;
    		var opts = me.options;
    		var labelOpts = opts.labels;
    		var globalDefaults = core_defaults.global;
    		var defaultColor = globalDefaults.defaultColor;
    		var lineDefault = globalDefaults.elements.line;
    		var legendHeight = me.height;
    		var columnHeights = me.columnHeights;
    		var legendWidth = me.width;
    		var lineWidths = me.lineWidths;

    		if (!opts.display) {
    			return;
    		}

    		var rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);
    		var ctx = me.ctx;
    		var fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);
    		var labelFont = helpers$1.options._parseFont(labelOpts);
    		var fontSize = labelFont.size;
    		var cursor;

    		// Canvas setup
    		ctx.textAlign = rtlHelper.textAlign('left');
    		ctx.textBaseline = 'middle';
    		ctx.lineWidth = 0.5;
    		ctx.strokeStyle = fontColor; // for strikethrough effect
    		ctx.fillStyle = fontColor; // render in correct colour
    		ctx.font = labelFont.string;

    		var boxWidth = getBoxWidth(labelOpts, fontSize);
    		var hitboxes = me.legendHitBoxes;

    		// current position
    		var drawLegendBox = function(x, y, legendItem) {
    			if (isNaN(boxWidth) || boxWidth <= 0) {
    				return;
    			}

    			// Set the ctx for the box
    			ctx.save();

    			var lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);
    			ctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor);
    			ctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);
    			ctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);
    			ctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);
    			ctx.lineWidth = lineWidth;
    			ctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor);

    			if (ctx.setLineDash) {
    				// IE 9 and 10 do not support line dash
    				ctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));
    			}

    			if (labelOpts && labelOpts.usePointStyle) {
    				// Recalculate x and y for drawPoint() because its expecting
    				// x and y to be center of figure (instead of top left)
    				var radius = boxWidth * Math.SQRT2 / 2;
    				var centerX = rtlHelper.xPlus(x, boxWidth / 2);
    				var centerY = y + fontSize / 2;

    				// Draw pointStyle as legend symbol
    				helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);
    			} else {
    				// Draw box as legend symbol
    				ctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
    				if (lineWidth !== 0) {
    					ctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
    				}
    			}

    			ctx.restore();
    		};

    		var fillText = function(x, y, legendItem, textWidth) {
    			var halfFontSize = fontSize / 2;
    			var xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);
    			var yMiddle = y + halfFontSize;

    			ctx.fillText(legendItem.text, xLeft, yMiddle);

    			if (legendItem.hidden) {
    				// Strikethrough the text if hidden
    				ctx.beginPath();
    				ctx.lineWidth = 2;
    				ctx.moveTo(xLeft, yMiddle);
    				ctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);
    				ctx.stroke();
    			}
    		};

    		var alignmentOffset = function(dimension, blockSize) {
    			switch (opts.align) {
    			case 'start':
    				return labelOpts.padding;
    			case 'end':
    				return dimension - blockSize;
    			default: // center
    				return (dimension - blockSize + labelOpts.padding) / 2;
    			}
    		};

    		// Horizontal
    		var isHorizontal = me.isHorizontal();
    		if (isHorizontal) {
    			cursor = {
    				x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
    				y: me.top + labelOpts.padding,
    				line: 0
    			};
    		} else {
    			cursor = {
    				x: me.left + labelOpts.padding,
    				y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
    				line: 0
    			};
    		}

    		helpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);

    		var itemHeight = fontSize + labelOpts.padding;
    		helpers$1.each(me.legendItems, function(legendItem, i) {
    			var textWidth = ctx.measureText(legendItem.text).width;
    			var width = boxWidth + (fontSize / 2) + textWidth;
    			var x = cursor.x;
    			var y = cursor.y;

    			rtlHelper.setWidth(me.minSize.width);

    			// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)
    			// instead of me.right and me.bottom because me.width and me.height
    			// may have been changed since me.minSize was calculated
    			if (isHorizontal) {
    				if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
    					y = cursor.y += itemHeight;
    					cursor.line++;
    					x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
    				}
    			} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {
    				x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
    				cursor.line++;
    				y = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
    			}

    			var realX = rtlHelper.x(x);

    			drawLegendBox(realX, y, legendItem);

    			hitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);
    			hitboxes[i].top = y;

    			// Fill the actual label
    			fillText(realX, y, legendItem, textWidth);

    			if (isHorizontal) {
    				cursor.x += width + labelOpts.padding;
    			} else {
    				cursor.y += itemHeight;
    			}
    		});

    		helpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);
    	},

    	/**
    	 * @private
    	 */
    	_getLegendItemAt: function(x, y) {
    		var me = this;
    		var i, hitBox, lh;

    		if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
    			// See if we are touching one of the dataset boxes
    			lh = me.legendHitBoxes;
    			for (i = 0; i < lh.length; ++i) {
    				hitBox = lh[i];

    				if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
    					// Touching an element
    					return me.legendItems[i];
    				}
    			}
    		}

    		return null;
    	},

    	/**
    	 * Handle an event
    	 * @private
    	 * @param {IEvent} event - The event to handle
    	 */
    	handleEvent: function(e) {
    		var me = this;
    		var opts = me.options;
    		var type = e.type === 'mouseup' ? 'click' : e.type;
    		var hoveredItem;

    		if (type === 'mousemove') {
    			if (!opts.onHover && !opts.onLeave) {
    				return;
    			}
    		} else if (type === 'click') {
    			if (!opts.onClick) {
    				return;
    			}
    		} else {
    			return;
    		}

    		// Chart event already has relative position in it
    		hoveredItem = me._getLegendItemAt(e.x, e.y);

    		if (type === 'click') {
    			if (hoveredItem && opts.onClick) {
    				// use e.native for backwards compatibility
    				opts.onClick.call(me, e.native, hoveredItem);
    			}
    		} else {
    			if (opts.onLeave && hoveredItem !== me._hoveredItem) {
    				if (me._hoveredItem) {
    					opts.onLeave.call(me, e.native, me._hoveredItem);
    				}
    				me._hoveredItem = hoveredItem;
    			}

    			if (opts.onHover && hoveredItem) {
    				// use e.native for backwards compatibility
    				opts.onHover.call(me, e.native, hoveredItem);
    			}
    		}
    	}
    });

    function createNewLegendAndAttach(chart, legendOpts) {
    	var legend = new Legend({
    		ctx: chart.ctx,
    		options: legendOpts,
    		chart: chart
    	});

    	core_layouts.configure(chart, legend, legendOpts);
    	core_layouts.addBox(chart, legend);
    	chart.legend = legend;
    }

    var plugin_legend = {
    	id: 'legend',

    	/**
    	 * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
    	 * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
    	 * the plugin, which one will be re-exposed in the chart.js file.
    	 * https://github.com/chartjs/Chart.js/pull/2640
    	 * @private
    	 */
    	_element: Legend,

    	beforeInit: function(chart) {
    		var legendOpts = chart.options.legend;

    		if (legendOpts) {
    			createNewLegendAndAttach(chart, legendOpts);
    		}
    	},

    	beforeUpdate: function(chart) {
    		var legendOpts = chart.options.legend;
    		var legend = chart.legend;

    		if (legendOpts) {
    			helpers$1.mergeIf(legendOpts, core_defaults.global.legend);

    			if (legend) {
    				core_layouts.configure(chart, legend, legendOpts);
    				legend.options = legendOpts;
    			} else {
    				createNewLegendAndAttach(chart, legendOpts);
    			}
    		} else if (legend) {
    			core_layouts.removeBox(chart, legend);
    			delete chart.legend;
    		}
    	},

    	afterEvent: function(chart, e) {
    		var legend = chart.legend;
    		if (legend) {
    			legend.handleEvent(e);
    		}
    	}
    };

    var noop$2 = helpers$1.noop;

    core_defaults._set('global', {
    	title: {
    		display: false,
    		fontStyle: 'bold',
    		fullWidth: true,
    		padding: 10,
    		position: 'top',
    		text: '',
    		weight: 2000         // by default greater than legend (1000) to be above
    	}
    });

    /**
     * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
     */
    var Title = core_element.extend({
    	initialize: function(config) {
    		var me = this;
    		helpers$1.extend(me, config);

    		// Contains hit boxes for each dataset (in dataset order)
    		me.legendHitBoxes = [];
    	},

    	// These methods are ordered by lifecycle. Utilities then follow.

    	beforeUpdate: noop$2,
    	update: function(maxWidth, maxHeight, margins) {
    		var me = this;

    		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
    		me.beforeUpdate();

    		// Absorb the master measurements
    		me.maxWidth = maxWidth;
    		me.maxHeight = maxHeight;
    		me.margins = margins;

    		// Dimensions
    		me.beforeSetDimensions();
    		me.setDimensions();
    		me.afterSetDimensions();
    		// Labels
    		me.beforeBuildLabels();
    		me.buildLabels();
    		me.afterBuildLabels();

    		// Fit
    		me.beforeFit();
    		me.fit();
    		me.afterFit();
    		//
    		me.afterUpdate();

    		return me.minSize;

    	},
    	afterUpdate: noop$2,

    	//

    	beforeSetDimensions: noop$2,
    	setDimensions: function() {
    		var me = this;
    		// Set the unconstrained dimension before label rotation
    		if (me.isHorizontal()) {
    			// Reset position before calculating rotation
    			me.width = me.maxWidth;
    			me.left = 0;
    			me.right = me.width;
    		} else {
    			me.height = me.maxHeight;

    			// Reset position before calculating rotation
    			me.top = 0;
    			me.bottom = me.height;
    		}

    		// Reset padding
    		me.paddingLeft = 0;
    		me.paddingTop = 0;
    		me.paddingRight = 0;
    		me.paddingBottom = 0;

    		// Reset minSize
    		me.minSize = {
    			width: 0,
    			height: 0
    		};
    	},
    	afterSetDimensions: noop$2,

    	//

    	beforeBuildLabels: noop$2,
    	buildLabels: noop$2,
    	afterBuildLabels: noop$2,

    	//

    	beforeFit: noop$2,
    	fit: function() {
    		var me = this;
    		var opts = me.options;
    		var minSize = me.minSize = {};
    		var isHorizontal = me.isHorizontal();
    		var lineCount, textSize;

    		if (!opts.display) {
    			me.width = minSize.width = me.height = minSize.height = 0;
    			return;
    		}

    		lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
    		textSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;

    		me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
    		me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
    	},
    	afterFit: noop$2,

    	// Shared Methods
    	isHorizontal: function() {
    		var pos = this.options.position;
    		return pos === 'top' || pos === 'bottom';
    	},

    	// Actually draw the title block on the canvas
    	draw: function() {
    		var me = this;
    		var ctx = me.ctx;
    		var opts = me.options;

    		if (!opts.display) {
    			return;
    		}

    		var fontOpts = helpers$1.options._parseFont(opts);
    		var lineHeight = fontOpts.lineHeight;
    		var offset = lineHeight / 2 + opts.padding;
    		var rotation = 0;
    		var top = me.top;
    		var left = me.left;
    		var bottom = me.bottom;
    		var right = me.right;
    		var maxWidth, titleX, titleY;

    		ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour
    		ctx.font = fontOpts.string;

    		// Horizontal
    		if (me.isHorizontal()) {
    			titleX = left + ((right - left) / 2); // midpoint of the width
    			titleY = top + offset;
    			maxWidth = right - left;
    		} else {
    			titleX = opts.position === 'left' ? left + offset : right - offset;
    			titleY = top + ((bottom - top) / 2);
    			maxWidth = bottom - top;
    			rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
    		}

    		ctx.save();
    		ctx.translate(titleX, titleY);
    		ctx.rotate(rotation);
    		ctx.textAlign = 'center';
    		ctx.textBaseline = 'middle';

    		var text = opts.text;
    		if (helpers$1.isArray(text)) {
    			var y = 0;
    			for (var i = 0; i < text.length; ++i) {
    				ctx.fillText(text[i], 0, y, maxWidth);
    				y += lineHeight;
    			}
    		} else {
    			ctx.fillText(text, 0, 0, maxWidth);
    		}

    		ctx.restore();
    	}
    });

    function createNewTitleBlockAndAttach(chart, titleOpts) {
    	var title = new Title({
    		ctx: chart.ctx,
    		options: titleOpts,
    		chart: chart
    	});

    	core_layouts.configure(chart, title, titleOpts);
    	core_layouts.addBox(chart, title);
    	chart.titleBlock = title;
    }

    var plugin_title = {
    	id: 'title',

    	/**
    	 * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
    	 * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
    	 * the plugin, which one will be re-exposed in the chart.js file.
    	 * https://github.com/chartjs/Chart.js/pull/2640
    	 * @private
    	 */
    	_element: Title,

    	beforeInit: function(chart) {
    		var titleOpts = chart.options.title;

    		if (titleOpts) {
    			createNewTitleBlockAndAttach(chart, titleOpts);
    		}
    	},

    	beforeUpdate: function(chart) {
    		var titleOpts = chart.options.title;
    		var titleBlock = chart.titleBlock;

    		if (titleOpts) {
    			helpers$1.mergeIf(titleOpts, core_defaults.global.title);

    			if (titleBlock) {
    				core_layouts.configure(chart, titleBlock, titleOpts);
    				titleBlock.options = titleOpts;
    			} else {
    				createNewTitleBlockAndAttach(chart, titleOpts);
    			}
    		} else if (titleBlock) {
    			core_layouts.removeBox(chart, titleBlock);
    			delete chart.titleBlock;
    		}
    	}
    };

    var plugins = {};
    var filler = plugin_filler;
    var legend = plugin_legend;
    var title = plugin_title;
    plugins.filler = filler;
    plugins.legend = legend;
    plugins.title = title;

    /**
     * @namespace Chart
     */


    core_controller.helpers = helpers$1;

    // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!
    core_helpers();

    core_controller._adapters = core_adapters;
    core_controller.Animation = core_animation;
    core_controller.animationService = core_animations;
    core_controller.controllers = controllers;
    core_controller.DatasetController = core_datasetController;
    core_controller.defaults = core_defaults;
    core_controller.Element = core_element;
    core_controller.elements = elements;
    core_controller.Interaction = core_interaction;
    core_controller.layouts = core_layouts;
    core_controller.platform = platform;
    core_controller.plugins = core_plugins;
    core_controller.Scale = core_scale;
    core_controller.scaleService = core_scaleService;
    core_controller.Ticks = core_ticks;
    core_controller.Tooltip = core_tooltip;

    // Register built-in scales

    core_controller.helpers.each(scales, function(scale, type) {
    	core_controller.scaleService.registerScaleType(type, scale, scale._defaults);
    });

    // Load to register built-in adapters (as side effects)


    // Loading built-in plugins

    for (var k in plugins) {
    	if (plugins.hasOwnProperty(k)) {
    		core_controller.plugins.register(plugins[k]);
    	}
    }

    core_controller.platform.initialize();

    var src = core_controller;
    if (typeof window !== 'undefined') {
    	window.Chart = core_controller;
    }

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Chart
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     * @private
     */
    core_controller.Chart = core_controller;

    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Legend
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */
    core_controller.Legend = plugins.legend._element;

    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Title
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */
    core_controller.Title = plugins.title._element;

    /**
     * Provided for backward compatibility, use Chart.plugins instead
     * @namespace Chart.pluginService
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */
    core_controller.pluginService = core_controller.plugins;

    /**
     * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
     * effect, instead simply create/register plugins via plain JavaScript objects.
     * @interface Chart.PluginBase
     * @deprecated since version 2.5.0
     * @todo remove at version 3
     * @private
     */
    core_controller.PluginBase = core_controller.Element.extend({});

    /**
     * Provided for backward compatibility, use Chart.helpers.canvas instead.
     * @namespace Chart.canvasHelpers
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     * @private
     */
    core_controller.canvasHelpers = core_controller.helpers.canvas;

    /**
     * Provided for backward compatibility, use Chart.layouts instead.
     * @namespace Chart.layoutService
     * @deprecated since version 2.7.3
     * @todo remove at version 3
     * @private
     */
    core_controller.layoutService = core_controller.layouts;

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart.LinearScaleBase
     * @deprecated since version 2.8
     * @todo remove at version 3
     * @private
     */
    core_controller.LinearScaleBase = scale_linearbase;

    /**
     * Provided for backward compatibility, instead we should create a new Chart
     * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     */
    core_controller.helpers.each(
    	[
    		'Bar',
    		'Bubble',
    		'Doughnut',
    		'Line',
    		'PolarArea',
    		'Radar',
    		'Scatter'
    	],
    	function(klass) {
    		core_controller[klass] = function(ctx, cfg) {
    			return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
    				type: klass.charAt(0).toLowerCase() + klass.slice(1)
    			}));
    		};
    	}
    );

    return src;

    })));
    });

    /* src/components/Cards/CardLineChart.svelte generated by Svelte v3.26.0 */
    const file$8 = "src/components/Cards/CardLineChart.svelte";

    function create_fragment$a(ctx) {
    	let div5;
    	let div2;
    	let div1;
    	let div0;
    	let h6;
    	let t1;
    	let h2;
    	let t3;
    	let div4;
    	let div3;
    	let canvas;

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			h6 = element("h6");
    			h6.textContent = "Overview";
    			t1 = space();
    			h2 = element("h2");
    			h2.textContent = "Sales value";
    			t3 = space();
    			div4 = element("div");
    			div3 = element("div");
    			canvas = element("canvas");
    			attr_dev(h6, "class", "uppercase text-gray-200 mb-1 text-xs font-semibold");
    			add_location(h6, file$8, 124, 8, 4594);
    			attr_dev(h2, "class", "text-white text-xl font-semibold");
    			add_location(h2, file$8, 127, 8, 4699);
    			attr_dev(div0, "class", "relative w-full max-w-full flex-grow flex-1");
    			add_location(div0, file$8, 123, 6, 4528);
    			attr_dev(div1, "class", "flex flex-wrap items-center");
    			add_location(div1, file$8, 122, 4, 4480);
    			attr_dev(div2, "class", "rounded-t mb-0 px-4 py-3 bg-transparent");
    			add_location(div2, file$8, 121, 2, 4422);
    			attr_dev(canvas, "id", "line-chart");
    			add_location(canvas, file$8, 136, 6, 4905);
    			attr_dev(div3, "class", "relative h-350-px");
    			add_location(div3, file$8, 135, 4, 4867);
    			attr_dev(div4, "class", "p-4 flex-auto");
    			add_location(div4, file$8, 133, 2, 4816);
    			attr_dev(div5, "class", "relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded bg-gray-800");
    			add_location(div5, file$8, 118, 0, 4318);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div2);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h6);
    			append_dev(div0, t1);
    			append_dev(div0, h2);
    			append_dev(div5, t3);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, canvas);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("CardLineChart", slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	// init chart
    	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    		var config = {
    			type: "line",
    			data: {
    				labels: ["January", "February", "March", "April", "May", "June", "July"],
    				datasets: [
    					{
    						label: new Date().getFullYear(),
    						backgroundColor: "#4c51bf",
    						borderColor: "#4c51bf",
    						data: [65, 78, 66, 44, 56, 67, 75],
    						fill: false
    					},
    					{
    						label: new Date().getFullYear() - 1,
    						fill: false,
    						backgroundColor: "#fff",
    						borderColor: "#fff",
    						data: [40, 68, 86, 74, 56, 60, 87]
    					}
    				]
    			},
    			options: {
    				maintainAspectRatio: false,
    				responsive: true,
    				title: {
    					display: false,
    					text: "Sales Charts",
    					fontColor: "white"
    				},
    				legend: {
    					labels: { fontColor: "white" },
    					align: "end",
    					position: "bottom"
    				},
    				tooltips: { mode: "index", intersect: false },
    				hover: { mode: "nearest", intersect: true },
    				scales: {
    					xAxes: [
    						{
    							ticks: { fontColor: "rgba(255,255,255,.7)" },
    							display: true,
    							scaleLabel: {
    								display: false,
    								labelString: "Month",
    								fontColor: "white"
    							},
    							gridLines: {
    								display: false,
    								borderDash: [2],
    								borderDashOffset: [2],
    								color: "rgba(33, 37, 41, 0.3)",
    								zeroLineColor: "rgba(0, 0, 0, 0)",
    								zeroLineBorderDash: [2],
    								zeroLineBorderDashOffset: [2]
    							}
    						}
    					],
    					yAxes: [
    						{
    							ticks: { fontColor: "rgba(255,255,255,.7)" },
    							display: true,
    							scaleLabel: {
    								display: false,
    								labelString: "Value",
    								fontColor: "white"
    							},
    							gridLines: {
    								borderDash: [3],
    								borderDashOffset: [3],
    								drawBorder: false,
    								color: "rgba(255, 255, 255, 0.15)",
    								zeroLineColor: "rgba(33, 37, 41, 0)",
    								zeroLineBorderDash: [2],
    								zeroLineBorderDashOffset: [2]
    							}
    						}
    					]
    				}
    			}
    		};

    		var ctx = document.getElementById("line-chart").getContext("2d");
    		window.myLine = new Chart(ctx, config);
    	}));

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CardLineChart> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ __awaiter, onMount, Chart });

    	$$self.$inject_state = $$props => {
    		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [];
    }

    class CardLineChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CardLineChart",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    /* src/components/Cards/CardBarChart.svelte generated by Svelte v3.26.0 */
    const file$9 = "src/components/Cards/CardBarChart.svelte";

    function create_fragment$b(ctx) {
    	let div5;
    	let div2;
    	let div1;
    	let div0;
    	let h6;
    	let t1;
    	let h2;
    	let t3;
    	let div4;
    	let div3;
    	let canvas;

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			h6 = element("h6");
    			h6.textContent = "Performance";
    			t1 = space();
    			h2 = element("h2");
    			h2.textContent = "Total orders";
    			t3 = space();
    			div4 = element("div");
    			div3 = element("div");
    			canvas = element("canvas");
    			attr_dev(h6, "class", "uppercase text-gray-500 mb-1 text-xs font-semibold");
    			add_location(h6, file$9, 116, 8, 4259);
    			attr_dev(h2, "class", "text-gray-800 text-xl font-semibold");
    			add_location(h2, file$9, 119, 8, 4367);
    			attr_dev(div0, "class", "relative w-full max-w-full flex-grow flex-1");
    			add_location(div0, file$9, 115, 6, 4193);
    			attr_dev(div1, "class", "flex flex-wrap items-center");
    			add_location(div1, file$9, 114, 4, 4145);
    			attr_dev(div2, "class", "rounded-t mb-0 px-4 py-3 bg-transparent");
    			add_location(div2, file$9, 113, 2, 4087);
    			attr_dev(canvas, "id", "bar-chart");
    			add_location(canvas, file$9, 127, 6, 4558);
    			attr_dev(div3, "class", "relative h-350-px");
    			add_location(div3, file$9, 126, 4, 4520);
    			attr_dev(div4, "class", "p-4 flex-auto");
    			add_location(div4, file$9, 125, 2, 4488);
    			attr_dev(div5, "class", "relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-lg rounded");
    			add_location(div5, file$9, 110, 0, 3986);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div2);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h6);
    			append_dev(div0, t1);
    			append_dev(div0, h2);
    			append_dev(div5, t3);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, canvas);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("CardBarChart", slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	// init chart
    	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    		let config = {
    			type: "bar",
    			data: {
    				labels: ["January", "February", "March", "April", "May", "June", "July"],
    				datasets: [
    					{
    						label: new Date().getFullYear(),
    						backgroundColor: "#ed64a6",
    						borderColor: "#ed64a6",
    						data: [30, 78, 56, 34, 100, 45, 13],
    						fill: false,
    						barThickness: 8
    					},
    					{
    						label: new Date().getFullYear() - 1,
    						fill: false,
    						backgroundColor: "#4c51bf",
    						borderColor: "#4c51bf",
    						data: [27, 68, 86, 74, 10, 4, 87],
    						barThickness: 8
    					}
    				]
    			},
    			options: {
    				maintainAspectRatio: false,
    				responsive: true,
    				title: { display: false, text: "Orders Chart" },
    				tooltips: { mode: "index", intersect: false },
    				hover: { mode: "nearest", intersect: true },
    				legend: {
    					labels: { fontColor: "rgba(0,0,0,.4)" },
    					align: "end",
    					position: "bottom"
    				},
    				scales: {
    					xAxes: [
    						{
    							display: false,
    							scaleLabel: { display: true, labelString: "Month" },
    							gridLines: {
    								borderDash: [2],
    								borderDashOffset: [2],
    								color: "rgba(33, 37, 41, 0.3)",
    								zeroLineColor: "rgba(33, 37, 41, 0.3)",
    								zeroLineBorderDash: [2],
    								zeroLineBorderDashOffset: [2]
    							}
    						}
    					],
    					yAxes: [
    						{
    							display: true,
    							scaleLabel: { display: false, labelString: "Value" },
    							gridLines: {
    								borderDash: [2],
    								drawBorder: false,
    								borderDashOffset: [2],
    								color: "rgba(33, 37, 41, 0.2)",
    								zeroLineColor: "rgba(33, 37, 41, 0.15)",
    								zeroLineBorderDash: [2],
    								zeroLineBorderDashOffset: [2]
    							}
    						}
    					]
    				}
    			}
    		};

    		let ctx = document.getElementById("bar-chart").getContext("2d");
    		window.myBar = new Chart(ctx, config);
    	}));

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CardBarChart> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ __awaiter, onMount, Chart });

    	$$self.$inject_state = $$props => {
    		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [];
    }

    class CardBarChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CardBarChart",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    /* src/components/Cards/CardPageVisits.svelte generated by Svelte v3.26.0 */

    const file$a = "src/components/Cards/CardPageVisits.svelte";

    function create_fragment$c(ctx) {
    	let div5;
    	let div3;
    	let div2;
    	let div0;
    	let h3;
    	let t1;
    	let div1;
    	let button;
    	let t3;
    	let div4;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t5;
    	let th1;
    	let t7;
    	let th2;
    	let t9;
    	let th3;
    	let t11;
    	let tbody;
    	let tr1;
    	let th4;
    	let t13;
    	let td0;
    	let t15;
    	let td1;
    	let t17;
    	let td2;
    	let i0;
    	let t18;
    	let t19;
    	let tr2;
    	let th5;
    	let t21;
    	let td3;
    	let t23;
    	let td4;
    	let t25;
    	let td5;
    	let i1;
    	let t26;
    	let t27;
    	let tr3;
    	let th6;
    	let t29;
    	let td6;
    	let t31;
    	let td7;
    	let t33;
    	let td8;
    	let i2;
    	let t34;
    	let t35;
    	let tr4;
    	let th7;
    	let t37;
    	let td9;
    	let t39;
    	let td10;
    	let t41;
    	let td11;
    	let i3;
    	let t42;
    	let t43;
    	let tr5;
    	let th8;
    	let t45;
    	let td12;
    	let t47;
    	let td13;
    	let t49;
    	let td14;
    	let i4;
    	let t50;

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			h3 = element("h3");
    			h3.textContent = "Page visits";
    			t1 = space();
    			div1 = element("div");
    			button = element("button");
    			button.textContent = "See all";
    			t3 = space();
    			div4 = element("div");
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Page name";
    			t5 = space();
    			th1 = element("th");
    			th1.textContent = "Visitors";
    			t7 = space();
    			th2 = element("th");
    			th2.textContent = "Unique users";
    			t9 = space();
    			th3 = element("th");
    			th3.textContent = "Bounce rate";
    			t11 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			th4 = element("th");
    			th4.textContent = "/argon/";
    			t13 = space();
    			td0 = element("td");
    			td0.textContent = "4,569";
    			t15 = space();
    			td1 = element("td");
    			td1.textContent = "340";
    			t17 = space();
    			td2 = element("td");
    			i0 = element("i");
    			t18 = text("\n            46,53%");
    			t19 = space();
    			tr2 = element("tr");
    			th5 = element("th");
    			th5.textContent = "/argon/index.html";
    			t21 = space();
    			td3 = element("td");
    			td3.textContent = "3,985";
    			t23 = space();
    			td4 = element("td");
    			td4.textContent = "319";
    			t25 = space();
    			td5 = element("td");
    			i1 = element("i");
    			t26 = text("\n            46,53%");
    			t27 = space();
    			tr3 = element("tr");
    			th6 = element("th");
    			th6.textContent = "/argon/charts.html";
    			t29 = space();
    			td6 = element("td");
    			td6.textContent = "3,513";
    			t31 = space();
    			td7 = element("td");
    			td7.textContent = "294";
    			t33 = space();
    			td8 = element("td");
    			i2 = element("i");
    			t34 = text("\n            36,49%");
    			t35 = space();
    			tr4 = element("tr");
    			th7 = element("th");
    			th7.textContent = "/argon/tables.html";
    			t37 = space();
    			td9 = element("td");
    			td9.textContent = "2,050";
    			t39 = space();
    			td10 = element("td");
    			td10.textContent = "147";
    			t41 = space();
    			td11 = element("td");
    			i3 = element("i");
    			t42 = text("\n            50,87%");
    			t43 = space();
    			tr5 = element("tr");
    			th8 = element("th");
    			th8.textContent = "/argon/profile.html";
    			t45 = space();
    			td12 = element("td");
    			td12.textContent = "1,795";
    			t47 = space();
    			td13 = element("td");
    			td13.textContent = "190";
    			t49 = space();
    			td14 = element("td");
    			i4 = element("i");
    			t50 = text("\n            46,53%");
    			attr_dev(h3, "class", "font-semibold text-base text-gray-800");
    			add_location(h3, file$a, 6, 8, 272);
    			attr_dev(div0, "class", "relative w-full px-4 max-w-full flex-grow flex-1");
    			add_location(div0, file$a, 5, 6, 201);
    			attr_dev(button, "class", "bg-indigo-500 text-white active:bg-indigo-600 text-xs font-bold uppercase px-3 py-1 rounded outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150");
    			attr_dev(button, "type", "button");
    			add_location(button, file$a, 11, 8, 460);
    			attr_dev(div1, "class", "relative w-full px-4 max-w-full flex-grow flex-1 text-right");
    			add_location(div1, file$a, 10, 6, 378);
    			attr_dev(div2, "class", "flex flex-wrap items-center");
    			add_location(div2, file$a, 4, 4, 153);
    			attr_dev(div3, "class", "rounded-t mb-0 px-4 py-3 border-0");
    			add_location(div3, file$a, 3, 2, 101);
    			attr_dev(th0, "class", "px-6 bg-gray-100 text-gray-600 align-middle border border-solid border-gray-200 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left");
    			add_location(th0, file$a, 25, 10, 944);
    			attr_dev(th1, "class", "px-6 bg-gray-100 text-gray-600 align-middle border border-solid border-gray-200 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left");
    			add_location(th1, file$a, 30, 10, 1196);
    			attr_dev(th2, "class", "px-6 bg-gray-100 text-gray-600 align-middle border border-solid border-gray-200 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left");
    			add_location(th2, file$a, 35, 10, 1447);
    			attr_dev(th3, "class", "px-6 bg-gray-100 text-gray-600 align-middle border border-solid border-gray-200 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left");
    			add_location(th3, file$a, 40, 10, 1702);
    			add_location(tr0, file$a, 24, 8, 929);
    			add_location(thead, file$a, 23, 6, 913);
    			attr_dev(th4, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left");
    			add_location(th4, file$a, 49, 10, 2012);
    			attr_dev(td0, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td0, file$a, 54, 10, 2186);
    			attr_dev(td1, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td1, file$a, 59, 10, 2348);
    			attr_dev(i0, "class", "fas fa-arrow-up text-green-500 mr-4");
    			add_location(i0, file$a, 67, 12, 2638);
    			attr_dev(td2, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td2, file$a, 64, 10, 2508);
    			add_location(tr1, file$a, 48, 8, 1997);
    			attr_dev(th5, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left");
    			add_location(th5, file$a, 72, 10, 2762);
    			attr_dev(td3, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td3, file$a, 77, 10, 2946);
    			attr_dev(td4, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td4, file$a, 82, 10, 3108);
    			attr_dev(i1, "class", "fas fa-arrow-down text-orange-500 mr-4");
    			add_location(i1, file$a, 90, 12, 3398);
    			attr_dev(td5, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td5, file$a, 87, 10, 3268);
    			add_location(tr2, file$a, 71, 8, 2747);
    			attr_dev(th6, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left");
    			add_location(th6, file$a, 95, 10, 3525);
    			attr_dev(td6, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td6, file$a, 100, 10, 3710);
    			attr_dev(td7, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td7, file$a, 105, 10, 3872);
    			attr_dev(i2, "class", "fas fa-arrow-down text-orange-500 mr-4");
    			add_location(i2, file$a, 113, 12, 4162);
    			attr_dev(td8, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td8, file$a, 110, 10, 4032);
    			add_location(tr3, file$a, 94, 8, 3510);
    			attr_dev(th7, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left");
    			add_location(th7, file$a, 118, 10, 4289);
    			attr_dev(td9, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td9, file$a, 123, 10, 4474);
    			attr_dev(td10, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td10, file$a, 128, 10, 4636);
    			attr_dev(i3, "class", "fas fa-arrow-up text-green-500 mr-4");
    			add_location(i3, file$a, 136, 12, 4926);
    			attr_dev(td11, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td11, file$a, 133, 10, 4796);
    			add_location(tr4, file$a, 117, 8, 4274);
    			attr_dev(th8, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left");
    			add_location(th8, file$a, 141, 10, 5050);
    			attr_dev(td12, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td12, file$a, 146, 10, 5236);
    			attr_dev(td13, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td13, file$a, 151, 10, 5398);
    			attr_dev(i4, "class", "fas fa-arrow-down text-red-500 mr-4");
    			add_location(i4, file$a, 159, 12, 5688);
    			attr_dev(td14, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td14, file$a, 156, 10, 5558);
    			add_location(tr5, file$a, 140, 8, 5035);
    			add_location(tbody, file$a, 47, 6, 1981);
    			attr_dev(table, "class", "items-center w-full bg-transparent border-collapse");
    			add_location(table, file$a, 22, 4, 840);
    			attr_dev(div4, "class", "block w-full overflow-x-auto");
    			add_location(div4, file$a, 20, 2, 765);
    			attr_dev(div5, "class", "relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-lg rounded");
    			add_location(div5, file$a, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, h3);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, button);
    			append_dev(div5, t3);
    			append_dev(div5, div4);
    			append_dev(div4, table);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t5);
    			append_dev(tr0, th1);
    			append_dev(tr0, t7);
    			append_dev(tr0, th2);
    			append_dev(tr0, t9);
    			append_dev(tr0, th3);
    			append_dev(table, t11);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, th4);
    			append_dev(tr1, t13);
    			append_dev(tr1, td0);
    			append_dev(tr1, t15);
    			append_dev(tr1, td1);
    			append_dev(tr1, t17);
    			append_dev(tr1, td2);
    			append_dev(td2, i0);
    			append_dev(td2, t18);
    			append_dev(tbody, t19);
    			append_dev(tbody, tr2);
    			append_dev(tr2, th5);
    			append_dev(tr2, t21);
    			append_dev(tr2, td3);
    			append_dev(tr2, t23);
    			append_dev(tr2, td4);
    			append_dev(tr2, t25);
    			append_dev(tr2, td5);
    			append_dev(td5, i1);
    			append_dev(td5, t26);
    			append_dev(tbody, t27);
    			append_dev(tbody, tr3);
    			append_dev(tr3, th6);
    			append_dev(tr3, t29);
    			append_dev(tr3, td6);
    			append_dev(tr3, t31);
    			append_dev(tr3, td7);
    			append_dev(tr3, t33);
    			append_dev(tr3, td8);
    			append_dev(td8, i2);
    			append_dev(td8, t34);
    			append_dev(tbody, t35);
    			append_dev(tbody, tr4);
    			append_dev(tr4, th7);
    			append_dev(tr4, t37);
    			append_dev(tr4, td9);
    			append_dev(tr4, t39);
    			append_dev(tr4, td10);
    			append_dev(tr4, t41);
    			append_dev(tr4, td11);
    			append_dev(td11, i3);
    			append_dev(td11, t42);
    			append_dev(tbody, t43);
    			append_dev(tbody, tr5);
    			append_dev(tr5, th8);
    			append_dev(tr5, t45);
    			append_dev(tr5, td12);
    			append_dev(tr5, t47);
    			append_dev(tr5, td13);
    			append_dev(tr5, t49);
    			append_dev(tr5, td14);
    			append_dev(td14, i4);
    			append_dev(td14, t50);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("CardPageVisits", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CardPageVisits> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class CardPageVisits extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CardPageVisits",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    /* src/components/Cards/CardSocialTraffic.svelte generated by Svelte v3.26.0 */

    const file$b = "src/components/Cards/CardSocialTraffic.svelte";

    function create_fragment$d(ctx) {
    	let div25;
    	let div3;
    	let div2;
    	let div0;
    	let h3;
    	let t1;
    	let div1;
    	let button;
    	let t3;
    	let div24;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t5;
    	let th1;
    	let t7;
    	let th2;
    	let t8;
    	let tbody;
    	let tr1;
    	let th3;
    	let t10;
    	let td0;
    	let t12;
    	let td1;
    	let div7;
    	let span0;
    	let t14;
    	let div6;
    	let div5;
    	let div4;
    	let t15;
    	let tr2;
    	let th4;
    	let t17;
    	let td2;
    	let t19;
    	let td3;
    	let div11;
    	let span1;
    	let t21;
    	let div10;
    	let div9;
    	let div8;
    	let t22;
    	let tr3;
    	let th5;
    	let t24;
    	let td4;
    	let t26;
    	let td5;
    	let div15;
    	let span2;
    	let t28;
    	let div14;
    	let div13;
    	let div12;
    	let t29;
    	let tr4;
    	let th6;
    	let t31;
    	let td6;
    	let t33;
    	let td7;
    	let div19;
    	let span3;
    	let t35;
    	let div18;
    	let div17;
    	let div16;
    	let t36;
    	let tr5;
    	let th7;
    	let t38;
    	let td8;
    	let t40;
    	let td9;
    	let div23;
    	let span4;
    	let t42;
    	let div22;
    	let div21;
    	let div20;

    	const block = {
    		c: function create() {
    			div25 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			h3 = element("h3");
    			h3.textContent = "Social traffic";
    			t1 = space();
    			div1 = element("div");
    			button = element("button");
    			button.textContent = "See all";
    			t3 = space();
    			div24 = element("div");
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Referral";
    			t5 = space();
    			th1 = element("th");
    			th1.textContent = "Visitors";
    			t7 = space();
    			th2 = element("th");
    			t8 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			th3 = element("th");
    			th3.textContent = "Facebook";
    			t10 = space();
    			td0 = element("td");
    			td0.textContent = "1,480";
    			t12 = space();
    			td1 = element("td");
    			div7 = element("div");
    			span0 = element("span");
    			span0.textContent = "60%";
    			t14 = space();
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			t15 = space();
    			tr2 = element("tr");
    			th4 = element("th");
    			th4.textContent = "Facebook";
    			t17 = space();
    			td2 = element("td");
    			td2.textContent = "5,480";
    			t19 = space();
    			td3 = element("td");
    			div11 = element("div");
    			span1 = element("span");
    			span1.textContent = "70%";
    			t21 = space();
    			div10 = element("div");
    			div9 = element("div");
    			div8 = element("div");
    			t22 = space();
    			tr3 = element("tr");
    			th5 = element("th");
    			th5.textContent = "Google";
    			t24 = space();
    			td4 = element("td");
    			td4.textContent = "4,807";
    			t26 = space();
    			td5 = element("td");
    			div15 = element("div");
    			span2 = element("span");
    			span2.textContent = "80%";
    			t28 = space();
    			div14 = element("div");
    			div13 = element("div");
    			div12 = element("div");
    			t29 = space();
    			tr4 = element("tr");
    			th6 = element("th");
    			th6.textContent = "Instagram";
    			t31 = space();
    			td6 = element("td");
    			td6.textContent = "3,678";
    			t33 = space();
    			td7 = element("td");
    			div19 = element("div");
    			span3 = element("span");
    			span3.textContent = "75%";
    			t35 = space();
    			div18 = element("div");
    			div17 = element("div");
    			div16 = element("div");
    			t36 = space();
    			tr5 = element("tr");
    			th7 = element("th");
    			th7.textContent = "twitter";
    			t38 = space();
    			td8 = element("td");
    			td8.textContent = "2,645";
    			t40 = space();
    			td9 = element("td");
    			div23 = element("div");
    			span4 = element("span");
    			span4.textContent = "30%";
    			t42 = space();
    			div22 = element("div");
    			div21 = element("div");
    			div20 = element("div");
    			attr_dev(h3, "class", "font-semibold text-base text-gray-800");
    			add_location(h3, file$b, 6, 8, 272);
    			attr_dev(div0, "class", "relative w-full px-4 max-w-full flex-grow flex-1");
    			add_location(div0, file$b, 5, 6, 201);
    			attr_dev(button, "class", "bg-indigo-500 text-white active:bg-indigo-600 text-xs font-bold uppercase px-3 py-1 rounded outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150");
    			attr_dev(button, "type", "button");
    			add_location(button, file$b, 11, 8, 463);
    			attr_dev(div1, "class", "relative w-full px-4 max-w-full flex-grow flex-1 text-right");
    			add_location(div1, file$b, 10, 6, 381);
    			attr_dev(div2, "class", "flex flex-wrap items-center");
    			add_location(div2, file$b, 4, 4, 153);
    			attr_dev(div3, "class", "rounded-t mb-0 px-4 py-3 border-0");
    			add_location(div3, file$b, 3, 2, 101);
    			attr_dev(th0, "class", "px-6 bg-gray-100 text-gray-600 align-middle border border-solid border-gray-200 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left");
    			add_location(th0, file$b, 25, 10, 967);
    			attr_dev(th1, "class", "px-6 bg-gray-100 text-gray-600 align-middle border border-solid border-gray-200 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left");
    			add_location(th1, file$b, 30, 10, 1218);
    			attr_dev(th2, "class", "px-6 bg-gray-100 text-gray-600 align-middle border border-solid border-gray-200 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left min-w-140-px");
    			add_location(th2, file$b, 35, 10, 1469);
    			add_location(tr0, file$b, 24, 8, 952);
    			attr_dev(thead, "class", "thead-light");
    			add_location(thead, file$b, 23, 6, 916);
    			attr_dev(th3, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left");
    			add_location(th3, file$b, 42, 10, 1757);
    			attr_dev(td0, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td0, file$b, 47, 10, 1932);
    			attr_dev(span0, "class", "mr-2");
    			add_location(span0, file$b, 56, 14, 2270);
    			set_style(div4, "width", "60%");
    			attr_dev(div4, "class", "shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-red-500");
    			add_location(div4, file$b, 61, 18, 2479);
    			attr_dev(div5, "class", "overflow-hidden h-2 text-xs flex rounded bg-red-200");
    			add_location(div5, file$b, 58, 16, 2360);
    			attr_dev(div6, "class", "relative w-full");
    			add_location(div6, file$b, 57, 14, 2314);
    			attr_dev(div7, "class", "flex items-center");
    			add_location(div7, file$b, 55, 12, 2224);
    			attr_dev(td1, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td1, file$b, 52, 10, 2094);
    			add_location(tr1, file$b, 41, 8, 1742);
    			attr_dev(th4, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left");
    			add_location(th4, file$b, 71, 10, 2787);
    			attr_dev(td2, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td2, file$b, 76, 10, 2962);
    			attr_dev(span1, "class", "mr-2");
    			add_location(span1, file$b, 85, 14, 3300);
    			set_style(div8, "width", "70%");
    			attr_dev(div8, "class", "shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-green-500");
    			add_location(div8, file$b, 90, 18, 3511);
    			attr_dev(div9, "class", "overflow-hidden h-2 text-xs flex rounded bg-green-200");
    			add_location(div9, file$b, 87, 16, 3390);
    			attr_dev(div10, "class", "relative w-full");
    			add_location(div10, file$b, 86, 14, 3344);
    			attr_dev(div11, "class", "flex items-center");
    			add_location(div11, file$b, 84, 12, 3254);
    			attr_dev(td3, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td3, file$b, 81, 10, 3124);
    			add_location(tr2, file$b, 70, 8, 2772);
    			attr_dev(th5, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left");
    			add_location(th5, file$b, 100, 10, 3821);
    			attr_dev(td4, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td4, file$b, 105, 10, 3994);
    			attr_dev(span2, "class", "mr-2");
    			add_location(span2, file$b, 114, 14, 4332);
    			set_style(div12, "width", "80%");
    			attr_dev(div12, "class", "shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-purple-500");
    			add_location(div12, file$b, 119, 18, 4544);
    			attr_dev(div13, "class", "overflow-hidden h-2 text-xs flex rounded bg-purple-200");
    			add_location(div13, file$b, 116, 16, 4422);
    			attr_dev(div14, "class", "relative w-full");
    			add_location(div14, file$b, 115, 14, 4376);
    			attr_dev(div15, "class", "flex items-center");
    			add_location(div15, file$b, 113, 12, 4286);
    			attr_dev(td5, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td5, file$b, 110, 10, 4156);
    			add_location(tr3, file$b, 99, 8, 3806);
    			attr_dev(th6, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left");
    			add_location(th6, file$b, 129, 10, 4855);
    			attr_dev(td6, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td6, file$b, 134, 10, 5031);
    			attr_dev(span3, "class", "mr-2");
    			add_location(span3, file$b, 143, 14, 5369);
    			set_style(div16, "width", "75%");
    			attr_dev(div16, "class", "shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500");
    			add_location(div16, file$b, 148, 18, 5579);
    			attr_dev(div17, "class", "overflow-hidden h-2 text-xs flex rounded bg-blue-200");
    			add_location(div17, file$b, 145, 16, 5459);
    			attr_dev(div18, "class", "relative w-full");
    			add_location(div18, file$b, 144, 14, 5413);
    			attr_dev(div19, "class", "flex items-center");
    			add_location(div19, file$b, 142, 12, 5323);
    			attr_dev(td7, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td7, file$b, 139, 10, 5193);
    			add_location(tr4, file$b, 128, 8, 4840);
    			attr_dev(th7, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left");
    			add_location(th7, file$b, 158, 10, 5888);
    			attr_dev(td8, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td8, file$b, 163, 10, 6062);
    			attr_dev(span4, "class", "mr-2");
    			add_location(span4, file$b, 172, 14, 6400);
    			set_style(div20, "width", "30%");
    			attr_dev(div20, "class", "shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-orange-500");
    			add_location(div20, file$b, 177, 18, 6612);
    			attr_dev(div21, "class", "overflow-hidden h-2 text-xs flex rounded bg-orange-200");
    			add_location(div21, file$b, 174, 16, 6490);
    			attr_dev(div22, "class", "relative w-full");
    			add_location(div22, file$b, 173, 14, 6444);
    			attr_dev(div23, "class", "flex items-center");
    			add_location(div23, file$b, 171, 12, 6354);
    			attr_dev(td9, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td9, file$b, 168, 10, 6224);
    			add_location(tr5, file$b, 157, 8, 5873);
    			add_location(tbody, file$b, 40, 6, 1726);
    			attr_dev(table, "class", "items-center w-full bg-transparent border-collapse");
    			add_location(table, file$b, 22, 4, 843);
    			attr_dev(div24, "class", "block w-full overflow-x-auto");
    			add_location(div24, file$b, 20, 2, 768);
    			attr_dev(div25, "class", "relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-lg rounded");
    			add_location(div25, file$b, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div25, anchor);
    			append_dev(div25, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, h3);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, button);
    			append_dev(div25, t3);
    			append_dev(div25, div24);
    			append_dev(div24, table);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t5);
    			append_dev(tr0, th1);
    			append_dev(tr0, t7);
    			append_dev(tr0, th2);
    			append_dev(table, t8);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, th3);
    			append_dev(tr1, t10);
    			append_dev(tr1, td0);
    			append_dev(tr1, t12);
    			append_dev(tr1, td1);
    			append_dev(td1, div7);
    			append_dev(div7, span0);
    			append_dev(div7, t14);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(tbody, t15);
    			append_dev(tbody, tr2);
    			append_dev(tr2, th4);
    			append_dev(tr2, t17);
    			append_dev(tr2, td2);
    			append_dev(tr2, t19);
    			append_dev(tr2, td3);
    			append_dev(td3, div11);
    			append_dev(div11, span1);
    			append_dev(div11, t21);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(tbody, t22);
    			append_dev(tbody, tr3);
    			append_dev(tr3, th5);
    			append_dev(tr3, t24);
    			append_dev(tr3, td4);
    			append_dev(tr3, t26);
    			append_dev(tr3, td5);
    			append_dev(td5, div15);
    			append_dev(div15, span2);
    			append_dev(div15, t28);
    			append_dev(div15, div14);
    			append_dev(div14, div13);
    			append_dev(div13, div12);
    			append_dev(tbody, t29);
    			append_dev(tbody, tr4);
    			append_dev(tr4, th6);
    			append_dev(tr4, t31);
    			append_dev(tr4, td6);
    			append_dev(tr4, t33);
    			append_dev(tr4, td7);
    			append_dev(td7, div19);
    			append_dev(div19, span3);
    			append_dev(div19, t35);
    			append_dev(div19, div18);
    			append_dev(div18, div17);
    			append_dev(div17, div16);
    			append_dev(tbody, t36);
    			append_dev(tbody, tr5);
    			append_dev(tr5, th7);
    			append_dev(tr5, t38);
    			append_dev(tr5, td8);
    			append_dev(tr5, t40);
    			append_dev(tr5, td9);
    			append_dev(td9, div23);
    			append_dev(div23, span4);
    			append_dev(div23, t42);
    			append_dev(div23, div22);
    			append_dev(div22, div21);
    			append_dev(div21, div20);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div25);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("CardSocialTraffic", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CardSocialTraffic> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class CardSocialTraffic extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CardSocialTraffic",
    			options,
    			id: create_fragment$d.name
    		});
    	}
    }

    /* src/views/admin/Dashboard.svelte generated by Svelte v3.26.0 */
    const file$c = "src/views/admin/Dashboard.svelte";

    function create_fragment$e(ctx) {
    	let div6;
    	let div2;
    	let div0;
    	let cardlinechart;
    	let t0;
    	let div1;
    	let cardbarchart;
    	let t1;
    	let div5;
    	let div3;
    	let cardpagevisits;
    	let t2;
    	let div4;
    	let cardsocialtraffic;
    	let current;
    	cardlinechart = new CardLineChart({ $$inline: true });
    	cardbarchart = new CardBarChart({ $$inline: true });
    	cardpagevisits = new CardPageVisits({ $$inline: true });
    	cardsocialtraffic = new CardSocialTraffic({ $$inline: true });

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			create_component(cardlinechart.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(cardbarchart.$$.fragment);
    			t1 = space();
    			div5 = element("div");
    			div3 = element("div");
    			create_component(cardpagevisits.$$.fragment);
    			t2 = space();
    			div4 = element("div");
    			create_component(cardsocialtraffic.$$.fragment);
    			attr_dev(div0, "class", "w-full xl:w-8/12 mb-12 xl:mb-0 px-4");
    			add_location(div0, file$c, 9, 4, 375);
    			attr_dev(div1, "class", "w-full xl:w-4/12 px-4");
    			add_location(div1, file$c, 12, 4, 464);
    			attr_dev(div2, "class", "flex flex-wrap");
    			add_location(div2, file$c, 8, 2, 342);
    			attr_dev(div3, "class", "w-full xl:w-8/12 mb-12 xl:mb-0 px-4");
    			add_location(div3, file$c, 17, 4, 583);
    			attr_dev(div4, "class", "w-full xl:w-4/12 px-4");
    			add_location(div4, file$c, 20, 4, 673);
    			attr_dev(div5, "class", "flex flex-wrap mt-4");
    			add_location(div5, file$c, 16, 2, 545);
    			add_location(div6, file$c, 7, 0, 334);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div2);
    			append_dev(div2, div0);
    			mount_component(cardlinechart, div0, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			mount_component(cardbarchart, div1, null);
    			append_dev(div6, t1);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			mount_component(cardpagevisits, div3, null);
    			append_dev(div5, t2);
    			append_dev(div5, div4);
    			mount_component(cardsocialtraffic, div4, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cardlinechart.$$.fragment, local);
    			transition_in(cardbarchart.$$.fragment, local);
    			transition_in(cardpagevisits.$$.fragment, local);
    			transition_in(cardsocialtraffic.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cardlinechart.$$.fragment, local);
    			transition_out(cardbarchart.$$.fragment, local);
    			transition_out(cardpagevisits.$$.fragment, local);
    			transition_out(cardsocialtraffic.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			destroy_component(cardlinechart);
    			destroy_component(cardbarchart);
    			destroy_component(cardpagevisits);
    			destroy_component(cardsocialtraffic);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Dashboard", slots, []);
    	let { location } = $$props;
    	const writable_props = ["location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Dashboard> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({
    		CardLineChart,
    		CardBarChart,
    		CardPageVisits,
    		CardSocialTraffic,
    		location
    	});

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [location];
    }

    class Dashboard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { location: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Dashboard",
    			options,
    			id: create_fragment$e.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[0] === undefined && !("location" in props)) {
    			console.warn("<Dashboard> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<Dashboard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Dashboard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Cards/CardSettings.svelte generated by Svelte v3.26.0 */

    const file$d = "src/components/Cards/CardSettings.svelte";

    function create_fragment$f(ctx) {
    	let div24;
    	let div1;
    	let div0;
    	let h60;
    	let t1;
    	let button;
    	let t3;
    	let div23;
    	let form;
    	let h61;
    	let t5;
    	let div10;
    	let div3;
    	let div2;
    	let label0;
    	let t7;
    	let input0;
    	let t8;
    	let div5;
    	let div4;
    	let label1;
    	let t10;
    	let input1;
    	let t11;
    	let div7;
    	let div6;
    	let label2;
    	let t13;
    	let input2;
    	let t14;
    	let div9;
    	let div8;
    	let label3;
    	let t16;
    	let input3;
    	let t17;
    	let hr0;
    	let t18;
    	let h62;
    	let t20;
    	let div19;
    	let div12;
    	let div11;
    	let label4;
    	let t22;
    	let input4;
    	let t23;
    	let div14;
    	let div13;
    	let label5;
    	let t25;
    	let input5;
    	let t26;
    	let div16;
    	let div15;
    	let label6;
    	let t28;
    	let input6;
    	let t29;
    	let div18;
    	let div17;
    	let label7;
    	let t31;
    	let input7;
    	let t32;
    	let hr1;
    	let t33;
    	let h63;
    	let t35;
    	let div22;
    	let div21;
    	let div20;
    	let label8;
    	let t37;
    	let textarea;

    	const block = {
    		c: function create() {
    			div24 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			h60 = element("h6");
    			h60.textContent = "My account";
    			t1 = space();
    			button = element("button");
    			button.textContent = "Settings";
    			t3 = space();
    			div23 = element("div");
    			form = element("form");
    			h61 = element("h6");
    			h61.textContent = "User Information";
    			t5 = space();
    			div10 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			label0 = element("label");
    			label0.textContent = "Username";
    			t7 = space();
    			input0 = element("input");
    			t8 = space();
    			div5 = element("div");
    			div4 = element("div");
    			label1 = element("label");
    			label1.textContent = "Email address";
    			t10 = space();
    			input1 = element("input");
    			t11 = space();
    			div7 = element("div");
    			div6 = element("div");
    			label2 = element("label");
    			label2.textContent = "First Name";
    			t13 = space();
    			input2 = element("input");
    			t14 = space();
    			div9 = element("div");
    			div8 = element("div");
    			label3 = element("label");
    			label3.textContent = "Last Name";
    			t16 = space();
    			input3 = element("input");
    			t17 = space();
    			hr0 = element("hr");
    			t18 = space();
    			h62 = element("h6");
    			h62.textContent = "Contact Information";
    			t20 = space();
    			div19 = element("div");
    			div12 = element("div");
    			div11 = element("div");
    			label4 = element("label");
    			label4.textContent = "Address";
    			t22 = space();
    			input4 = element("input");
    			t23 = space();
    			div14 = element("div");
    			div13 = element("div");
    			label5 = element("label");
    			label5.textContent = "City";
    			t25 = space();
    			input5 = element("input");
    			t26 = space();
    			div16 = element("div");
    			div15 = element("div");
    			label6 = element("label");
    			label6.textContent = "Country";
    			t28 = space();
    			input6 = element("input");
    			t29 = space();
    			div18 = element("div");
    			div17 = element("div");
    			label7 = element("label");
    			label7.textContent = "Postal Code";
    			t31 = space();
    			input7 = element("input");
    			t32 = space();
    			hr1 = element("hr");
    			t33 = space();
    			h63 = element("h6");
    			h63.textContent = "About Me";
    			t35 = space();
    			div22 = element("div");
    			div21 = element("div");
    			div20 = element("div");
    			label8 = element("label");
    			label8.textContent = "About me";
    			t37 = space();
    			textarea = element("textarea");
    			attr_dev(h60, "class", "text-gray-800 text-xl font-bold");
    			add_location(h60, file$d, 5, 6, 221);
    			attr_dev(button, "class", "bg-red-500 text-white active:bg-red-600 font-bold uppercase text-xs px-4 py-2 rounded shadow hover:shadow-md outline-none focus:outline-none mr-1 ease-linear transition-all duration-150");
    			attr_dev(button, "type", "button");
    			add_location(button, file$d, 6, 6, 287);
    			attr_dev(div0, "class", "text-center flex justify-between");
    			add_location(div0, file$d, 4, 4, 168);
    			attr_dev(div1, "class", "rounded-t bg-white mb-0 px-6 py-6");
    			add_location(div1, file$d, 3, 2, 116);
    			attr_dev(h61, "class", "text-gray-500 text-sm mt-3 mb-6 font-bold uppercase");
    			add_location(h61, file$d, 16, 6, 648);
    			attr_dev(label0, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label0, "for", "grid-username");
    			add_location(label0, file$d, 22, 12, 886);
    			attr_dev(input0, "id", "grid-username");
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			input0.value = "lucky.jesse";
    			add_location(input0, file$d, 28, 12, 1072);
    			attr_dev(div2, "class", "relative w-full mb-3");
    			add_location(div2, file$d, 21, 10, 839);
    			attr_dev(div3, "class", "w-full lg:w-6/12 px-4");
    			add_location(div3, file$d, 20, 8, 793);
    			attr_dev(label1, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label1, "for", "grid-email");
    			add_location(label1, file$d, 38, 12, 1506);
    			attr_dev(input1, "id", "grid-email");
    			attr_dev(input1, "type", "email");
    			attr_dev(input1, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			input1.value = "jesse@example.com";
    			add_location(input1, file$d, 44, 12, 1694);
    			attr_dev(div4, "class", "relative w-full mb-3");
    			add_location(div4, file$d, 37, 10, 1459);
    			attr_dev(div5, "class", "w-full lg:w-6/12 px-4");
    			add_location(div5, file$d, 36, 8, 1413);
    			attr_dev(label2, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label2, "for", "grid-first-name");
    			add_location(label2, file$d, 54, 12, 2132);
    			attr_dev(input2, "id", "grid-first-name");
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			input2.value = "Lucky";
    			add_location(input2, file$d, 60, 12, 2322);
    			attr_dev(div6, "class", "relative w-full mb-3");
    			add_location(div6, file$d, 53, 10, 2085);
    			attr_dev(div7, "class", "w-full lg:w-6/12 px-4");
    			add_location(div7, file$d, 52, 8, 2039);
    			attr_dev(label3, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label3, "for", "grid-last-name");
    			add_location(label3, file$d, 70, 12, 2752);
    			attr_dev(input3, "id", "grid-last-name");
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			input3.value = "Jesse";
    			add_location(input3, file$d, 76, 12, 2940);
    			attr_dev(div8, "class", "relative w-full mb-3");
    			add_location(div8, file$d, 69, 10, 2705);
    			attr_dev(div9, "class", "w-full lg:w-6/12 px-4");
    			add_location(div9, file$d, 68, 8, 2659);
    			attr_dev(div10, "class", "flex flex-wrap");
    			add_location(div10, file$d, 19, 6, 756);
    			attr_dev(hr0, "class", "mt-6 border-b-1 border-gray-400");
    			add_location(hr0, file$d, 86, 6, 3288);
    			attr_dev(h62, "class", "text-gray-500 text-sm mt-3 mb-6 font-bold uppercase");
    			add_location(h62, file$d, 88, 6, 3342);
    			attr_dev(label4, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label4, "for", "grid-address");
    			add_location(label4, file$d, 94, 12, 3584);
    			attr_dev(input4, "id", "grid-address");
    			attr_dev(input4, "type", "text");
    			attr_dev(input4, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			input4.value = "Bld Mihail Kogalniceanu, nr. 8 Bl 1, Sc 1, Ap 09";
    			add_location(input4, file$d, 100, 12, 3768);
    			attr_dev(div11, "class", "relative w-full mb-3");
    			add_location(div11, file$d, 93, 10, 3537);
    			attr_dev(div12, "class", "w-full lg:w-12/12 px-4");
    			add_location(div12, file$d, 92, 8, 3490);
    			attr_dev(label5, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label5, "for", "grid-city");
    			add_location(label5, file$d, 110, 12, 4238);
    			attr_dev(input5, "id", "grid-city");
    			attr_dev(input5, "type", "email");
    			attr_dev(input5, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			input5.value = "New York";
    			add_location(input5, file$d, 116, 12, 4416);
    			attr_dev(div13, "class", "relative w-full mb-3");
    			add_location(div13, file$d, 109, 10, 4191);
    			attr_dev(div14, "class", "w-full lg:w-4/12 px-4");
    			add_location(div14, file$d, 108, 8, 4145);
    			attr_dev(label6, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label6, "for", "grid-country");
    			add_location(label6, file$d, 126, 12, 4844);
    			attr_dev(input6, "id", "grid-country");
    			attr_dev(input6, "type", "text");
    			attr_dev(input6, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			input6.value = "United States";
    			add_location(input6, file$d, 132, 12, 5028);
    			attr_dev(div15, "class", "relative w-full mb-3");
    			add_location(div15, file$d, 125, 10, 4797);
    			attr_dev(div16, "class", "w-full lg:w-4/12 px-4");
    			add_location(div16, file$d, 124, 8, 4751);
    			attr_dev(label7, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label7, "for", "grid-postal-code");
    			add_location(label7, file$d, 142, 12, 5463);
    			attr_dev(input7, "id", "grid-postal-code");
    			attr_dev(input7, "type", "text");
    			attr_dev(input7, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			input7.value = "Postal Code";
    			add_location(input7, file$d, 148, 12, 5655);
    			attr_dev(div17, "class", "relative w-full mb-3");
    			add_location(div17, file$d, 141, 10, 5416);
    			attr_dev(div18, "class", "w-full lg:w-4/12 px-4");
    			add_location(div18, file$d, 140, 8, 5370);
    			attr_dev(div19, "class", "flex flex-wrap");
    			add_location(div19, file$d, 91, 6, 3453);
    			attr_dev(hr1, "class", "mt-6 border-b-1 border-gray-400");
    			add_location(hr1, file$d, 158, 6, 6011);
    			attr_dev(h63, "class", "text-gray-500 text-sm mt-3 mb-6 font-bold uppercase");
    			add_location(h63, file$d, 160, 6, 6065);
    			attr_dev(label8, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label8, "for", "grid-about-me");
    			add_location(label8, file$d, 166, 12, 6296);
    			attr_dev(textarea, "id", "grid-about-me");
    			attr_dev(textarea, "type", "text");
    			attr_dev(textarea, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			attr_dev(textarea, "rows", "4");
    			textarea.value = "A beautiful Dashboard for Svelte & Tailwind CSS. It is Free\n                and Open Source.";
    			add_location(textarea, file$d, 172, 12, 6482);
    			attr_dev(div20, "class", "relative w-full mb-3");
    			add_location(div20, file$d, 165, 10, 6249);
    			attr_dev(div21, "class", "w-full lg:w-12/12 px-4");
    			add_location(div21, file$d, 164, 8, 6202);
    			attr_dev(div22, "class", "flex flex-wrap");
    			add_location(div22, file$d, 163, 6, 6165);
    			add_location(form, file$d, 15, 4, 635);
    			attr_dev(div23, "class", "flex-auto px-4 lg:px-10 py-10 pt-0");
    			add_location(div23, file$d, 14, 2, 582);
    			attr_dev(div24, "class", "relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded-lg bg-gray-200 border-0");
    			add_location(div24, file$d, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div24, anchor);
    			append_dev(div24, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h60);
    			append_dev(div0, t1);
    			append_dev(div0, button);
    			append_dev(div24, t3);
    			append_dev(div24, div23);
    			append_dev(div23, form);
    			append_dev(form, h61);
    			append_dev(form, t5);
    			append_dev(form, div10);
    			append_dev(div10, div3);
    			append_dev(div3, div2);
    			append_dev(div2, label0);
    			append_dev(div2, t7);
    			append_dev(div2, input0);
    			append_dev(div10, t8);
    			append_dev(div10, div5);
    			append_dev(div5, div4);
    			append_dev(div4, label1);
    			append_dev(div4, t10);
    			append_dev(div4, input1);
    			append_dev(div10, t11);
    			append_dev(div10, div7);
    			append_dev(div7, div6);
    			append_dev(div6, label2);
    			append_dev(div6, t13);
    			append_dev(div6, input2);
    			append_dev(div10, t14);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div8, label3);
    			append_dev(div8, t16);
    			append_dev(div8, input3);
    			append_dev(form, t17);
    			append_dev(form, hr0);
    			append_dev(form, t18);
    			append_dev(form, h62);
    			append_dev(form, t20);
    			append_dev(form, div19);
    			append_dev(div19, div12);
    			append_dev(div12, div11);
    			append_dev(div11, label4);
    			append_dev(div11, t22);
    			append_dev(div11, input4);
    			append_dev(div19, t23);
    			append_dev(div19, div14);
    			append_dev(div14, div13);
    			append_dev(div13, label5);
    			append_dev(div13, t25);
    			append_dev(div13, input5);
    			append_dev(div19, t26);
    			append_dev(div19, div16);
    			append_dev(div16, div15);
    			append_dev(div15, label6);
    			append_dev(div15, t28);
    			append_dev(div15, input6);
    			append_dev(div19, t29);
    			append_dev(div19, div18);
    			append_dev(div18, div17);
    			append_dev(div17, label7);
    			append_dev(div17, t31);
    			append_dev(div17, input7);
    			append_dev(form, t32);
    			append_dev(form, hr1);
    			append_dev(form, t33);
    			append_dev(form, h63);
    			append_dev(form, t35);
    			append_dev(form, div22);
    			append_dev(div22, div21);
    			append_dev(div21, div20);
    			append_dev(div20, label8);
    			append_dev(div20, t37);
    			append_dev(div20, textarea);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div24);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("CardSettings", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CardSettings> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class CardSettings extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CardSettings",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    /* src/components/Cards/CardProfile.svelte generated by Svelte v3.26.0 */

    const file$e = "src/components/Cards/CardProfile.svelte";

    function create_fragment$g(ctx) {
    	let div16;
    	let div15;
    	let div7;
    	let div1;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let div6;
    	let div5;
    	let div2;
    	let span0;
    	let t2;
    	let span1;
    	let t4;
    	let div3;
    	let span2;
    	let t6;
    	let span3;
    	let t8;
    	let div4;
    	let span4;
    	let t10;
    	let span5;
    	let t12;
    	let div11;
    	let h3;
    	let t14;
    	let div8;
    	let i0;
    	let t15;
    	let t16;
    	let div9;
    	let i1;
    	let t17;
    	let t18;
    	let div10;
    	let i2;
    	let t19;
    	let t20;
    	let div14;
    	let div13;
    	let div12;
    	let p;
    	let t22;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div16 = element("div");
    			div15 = element("div");
    			div7 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			div6 = element("div");
    			div5 = element("div");
    			div2 = element("div");
    			span0 = element("span");
    			span0.textContent = "22";
    			t2 = space();
    			span1 = element("span");
    			span1.textContent = "Friends";
    			t4 = space();
    			div3 = element("div");
    			span2 = element("span");
    			span2.textContent = "10";
    			t6 = space();
    			span3 = element("span");
    			span3.textContent = "Photos";
    			t8 = space();
    			div4 = element("div");
    			span4 = element("span");
    			span4.textContent = "89";
    			t10 = space();
    			span5 = element("span");
    			span5.textContent = "Comments";
    			t12 = space();
    			div11 = element("div");
    			h3 = element("h3");
    			h3.textContent = "Jenna Stones";
    			t14 = space();
    			div8 = element("div");
    			i0 = element("i");
    			t15 = text("\n        Los Angeles, California");
    			t16 = space();
    			div9 = element("div");
    			i1 = element("i");
    			t17 = text("\n        Solution Manager - Creative Tim Officer");
    			t18 = space();
    			div10 = element("div");
    			i2 = element("i");
    			t19 = text("\n        University of Computer Science");
    			t20 = space();
    			div14 = element("div");
    			div13 = element("div");
    			div12 = element("div");
    			p = element("p");
    			p.textContent = "An artist of considerable range, Jenna the name taken by\n            Melbourne-raised, Brooklyn-based Nick Murphy writes, performs and\n            records all of his own music, giving it a warm, intimate feel with a\n            solid groove structure. An artist of considerable range.";
    			t22 = space();
    			a = element("a");
    			a.textContent = "Show more";
    			attr_dev(img, "alt", "...");
    			if (img.src !== (img_src_value = team2)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "class", "shadow-xl rounded-full h-auto align-middle border-none absolute -m-16 -ml-20 lg:-ml-16 max-w-150-px");
    			add_location(img, file$e, 11, 10, 376);
    			attr_dev(div0, "class", "relative");
    			add_location(div0, file$e, 10, 8, 343);
    			attr_dev(div1, "class", "w-full px-4 flex justify-center");
    			add_location(div1, file$e, 9, 6, 289);
    			attr_dev(span0, "class", "text-xl font-bold block uppercase tracking-wide text-gray-700");
    			add_location(span0, file$e, 21, 12, 757);
    			attr_dev(span1, "class", "text-sm text-gray-500");
    			add_location(span1, file$e, 26, 12, 910);
    			attr_dev(div2, "class", "mr-4 p-3 text-center");
    			add_location(div2, file$e, 20, 10, 710);
    			attr_dev(span2, "class", "text-xl font-bold block uppercase tracking-wide text-gray-700");
    			add_location(span2, file$e, 29, 12, 1035);
    			attr_dev(span3, "class", "text-sm text-gray-500");
    			add_location(span3, file$e, 34, 12, 1188);
    			attr_dev(div3, "class", "mr-4 p-3 text-center");
    			add_location(div3, file$e, 28, 10, 988);
    			attr_dev(span4, "class", "text-xl font-bold block uppercase tracking-wide text-gray-700");
    			add_location(span4, file$e, 37, 12, 1315);
    			attr_dev(span5, "class", "text-sm text-gray-500");
    			add_location(span5, file$e, 42, 12, 1468);
    			attr_dev(div4, "class", "lg:mr-4 p-3 text-center");
    			add_location(div4, file$e, 36, 10, 1265);
    			attr_dev(div5, "class", "flex justify-center py-4 lg:pt-4 pt-8");
    			add_location(div5, file$e, 19, 8, 648);
    			attr_dev(div6, "class", "w-full px-4 text-center mt-20");
    			add_location(div6, file$e, 18, 6, 596);
    			attr_dev(div7, "class", "flex flex-wrap justify-center");
    			add_location(div7, file$e, 8, 4, 239);
    			attr_dev(h3, "class", "text-xl font-semibold leading-normal mb-2 text-gray-800 mb-2");
    			add_location(h3, file$e, 48, 6, 1618);
    			attr_dev(i0, "class", "fas fa-map-marker-alt mr-2 text-lg text-gray-500");
    			add_location(i0, file$e, 54, 8, 1835);
    			attr_dev(div8, "class", "text-sm leading-normal mt-0 mb-2 text-gray-500 font-bold uppercase");
    			add_location(div8, file$e, 51, 6, 1731);
    			attr_dev(i1, "class", "fas fa-briefcase mr-2 text-lg text-gray-500");
    			add_location(i1, file$e, 58, 8, 1998);
    			attr_dev(div9, "class", "mb-2 text-gray-700 mt-10");
    			add_location(div9, file$e, 57, 6, 1951);
    			attr_dev(i2, "class", "fas fa-university mr-2 text-lg text-gray-500");
    			add_location(i2, file$e, 62, 8, 2166);
    			attr_dev(div10, "class", "mb-2 text-gray-700");
    			add_location(div10, file$e, 61, 6, 2125);
    			attr_dev(div11, "class", "text-center mt-12");
    			add_location(div11, file$e, 47, 4, 1580);
    			attr_dev(p, "class", "mb-4 text-lg leading-relaxed text-gray-800");
    			add_location(p, file$e, 69, 10, 2461);
    			attr_dev(a, "href", "#pablo");
    			attr_dev(a, "class", "font-normal text-red-500");
    			add_location(a, file$e, 75, 10, 2838);
    			attr_dev(div12, "class", "w-full lg:w-9/12 px-4");
    			add_location(div12, file$e, 68, 8, 2415);
    			attr_dev(div13, "class", "flex flex-wrap justify-center");
    			add_location(div13, file$e, 67, 6, 2363);
    			attr_dev(div14, "class", "mt-10 py-10 border-t border-gray-300 text-center");
    			add_location(div14, file$e, 66, 4, 2294);
    			attr_dev(div15, "class", "px-6");
    			add_location(div15, file$e, 7, 2, 216);
    			attr_dev(div16, "class", "relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-xl rounded-lg mt-16");
    			add_location(div16, file$e, 4, 0, 106);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div16, anchor);
    			append_dev(div16, div15);
    			append_dev(div15, div7);
    			append_dev(div7, div1);
    			append_dev(div1, div0);
    			append_dev(div0, img);
    			append_dev(div7, t0);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div2);
    			append_dev(div2, span0);
    			append_dev(div2, t2);
    			append_dev(div2, span1);
    			append_dev(div5, t4);
    			append_dev(div5, div3);
    			append_dev(div3, span2);
    			append_dev(div3, t6);
    			append_dev(div3, span3);
    			append_dev(div5, t8);
    			append_dev(div5, div4);
    			append_dev(div4, span4);
    			append_dev(div4, t10);
    			append_dev(div4, span5);
    			append_dev(div15, t12);
    			append_dev(div15, div11);
    			append_dev(div11, h3);
    			append_dev(div11, t14);
    			append_dev(div11, div8);
    			append_dev(div8, i0);
    			append_dev(div8, t15);
    			append_dev(div11, t16);
    			append_dev(div11, div9);
    			append_dev(div9, i1);
    			append_dev(div9, t17);
    			append_dev(div11, t18);
    			append_dev(div11, div10);
    			append_dev(div10, i2);
    			append_dev(div10, t19);
    			append_dev(div15, t20);
    			append_dev(div15, div14);
    			append_dev(div14, div13);
    			append_dev(div13, div12);
    			append_dev(div12, p);
    			append_dev(div12, t22);
    			append_dev(div12, a);

    			if (!mounted) {
    				dispose = listen_dev(a, "click", click_handler$3, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div16);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const team2 = "../assets/img/team-2-800x800.jpg";
    const click_handler$3 = e => e.preventDefault();

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("CardProfile", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CardProfile> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ team2 });
    	return [];
    }

    class CardProfile extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CardProfile",
    			options,
    			id: create_fragment$g.name
    		});
    	}
    }

    /* src/views/admin/Settings.svelte generated by Svelte v3.26.0 */
    const file$f = "src/views/admin/Settings.svelte";

    function create_fragment$h(ctx) {
    	let div2;
    	let div0;
    	let cardsettings;
    	let t;
    	let div1;
    	let cardprofile;
    	let current;
    	cardsettings = new CardSettings({ $$inline: true });
    	cardprofile = new CardProfile({ $$inline: true });

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			create_component(cardsettings.$$.fragment);
    			t = space();
    			div1 = element("div");
    			create_component(cardprofile.$$.fragment);
    			attr_dev(div0, "class", "w-full lg:w-8/12 px-4");
    			add_location(div0, file$f, 6, 2, 217);
    			attr_dev(div1, "class", "w-full lg:w-4/12 px-4");
    			add_location(div1, file$f, 9, 2, 285);
    			attr_dev(div2, "class", "flex flex-wrap");
    			add_location(div2, file$f, 5, 0, 186);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			mount_component(cardsettings, div0, null);
    			append_dev(div2, t);
    			append_dev(div2, div1);
    			mount_component(cardprofile, div1, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cardsettings.$$.fragment, local);
    			transition_in(cardprofile.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cardsettings.$$.fragment, local);
    			transition_out(cardprofile.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(cardsettings);
    			destroy_component(cardprofile);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Settings", slots, []);
    	let { location } = $$props;
    	const writable_props = ["location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Settings> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({ CardSettings, CardProfile, location });

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [location];
    }

    class Settings extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, { location: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Settings",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[0] === undefined && !("location" in props)) {
    			console.warn("<Settings> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Dropdowns/TableDropdown.svelte generated by Svelte v3.26.0 */
    const file$g = "src/components/Dropdowns/TableDropdown.svelte";

    function create_fragment$i(ctx) {
    	let div1;
    	let a0;
    	let i;
    	let t0;
    	let div0;
    	let a1;
    	let t2;
    	let a2;
    	let t4;
    	let a3;
    	let div0_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			a0 = element("a");
    			i = element("i");
    			t0 = space();
    			div0 = element("div");
    			a1 = element("a");
    			a1.textContent = "Action";
    			t2 = space();
    			a2 = element("a");
    			a2.textContent = "Another action";
    			t4 = space();
    			a3 = element("a");
    			a3.textContent = "Something else here";
    			attr_dev(i, "class", "fas fa-ellipsis-v");
    			add_location(i, file$g, 26, 4, 622);
    			attr_dev(a0, "class", "text-gray-600 py-1 px-3");
    			attr_dev(a0, "href", "#pablo");
    			add_location(a0, file$g, 20, 2, 492);
    			attr_dev(a1, "href", "#pablo");
    			attr_dev(a1, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a1, file$g, 32, 4, 855);
    			attr_dev(a2, "href", "#pablo");
    			attr_dev(a2, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a2, file$g, 38, 4, 1052);
    			attr_dev(a3, "href", "#pablo");
    			attr_dev(a3, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a3, file$g, 44, 4, 1257);
    			attr_dev(div0, "class", div0_class_value = "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48 " + (/*dropdownPopoverShow*/ ctx[0] ? "block" : "hidden"));
    			add_location(div0, file$g, 28, 2, 665);
    			add_location(div1, file$g, 19, 0, 484);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, a0);
    			append_dev(a0, i);
    			/*a0_binding*/ ctx[4](a0);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, a1);
    			append_dev(div0, t2);
    			append_dev(div0, a2);
    			append_dev(div0, t4);
    			append_dev(div0, a3);
    			/*div0_binding*/ ctx[5](div0);

    			if (!mounted) {
    				dispose = [
    					listen_dev(a0, "click", /*toggleDropdown*/ ctx[3], false, false, false),
    					listen_dev(a1, "click", click_handler$4, false, false, false),
    					listen_dev(a2, "click", click_handler_1$2, false, false, false),
    					listen_dev(a3, "click", click_handler_2$2, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*dropdownPopoverShow*/ 1 && div0_class_value !== (div0_class_value = "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48 " + (/*dropdownPopoverShow*/ ctx[0] ? "block" : "hidden"))) {
    				attr_dev(div0, "class", div0_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			/*a0_binding*/ ctx[4](null);
    			/*div0_binding*/ ctx[5](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const click_handler$4 = e => e.preventDefault();
    const click_handler_1$2 = e => e.preventDefault();
    const click_handler_2$2 = e => e.preventDefault();

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("TableDropdown", slots, []);
    	let dropdownPopoverShow = false;
    	let btnDropdownRef;
    	let popoverDropdownRef;

    	const toggleDropdown = event => {
    		event.preventDefault();

    		if (dropdownPopoverShow) {
    			$$invalidate(0, dropdownPopoverShow = false);
    		} else {
    			$$invalidate(0, dropdownPopoverShow = true);
    			createPopper(btnDropdownRef, popoverDropdownRef, { placement: "bottom-start" });
    		}
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TableDropdown> was created with unknown prop '${key}'`);
    	});

    	function a0_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			btnDropdownRef = $$value;
    			$$invalidate(1, btnDropdownRef);
    		});
    	}

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			popoverDropdownRef = $$value;
    			$$invalidate(2, popoverDropdownRef);
    		});
    	}

    	$$self.$capture_state = () => ({
    		createPopper,
    		dropdownPopoverShow,
    		btnDropdownRef,
    		popoverDropdownRef,
    		toggleDropdown
    	});

    	$$self.$inject_state = $$props => {
    		if ("dropdownPopoverShow" in $$props) $$invalidate(0, dropdownPopoverShow = $$props.dropdownPopoverShow);
    		if ("btnDropdownRef" in $$props) $$invalidate(1, btnDropdownRef = $$props.btnDropdownRef);
    		if ("popoverDropdownRef" in $$props) $$invalidate(2, popoverDropdownRef = $$props.popoverDropdownRef);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dropdownPopoverShow,
    		btnDropdownRef,
    		popoverDropdownRef,
    		toggleDropdown,
    		a0_binding,
    		div0_binding
    	];
    }

    class TableDropdown extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TableDropdown",
    			options,
    			id: create_fragment$i.name
    		});
    	}
    }

    /* src/components/Cards/CardTable.svelte generated by Svelte v3.26.0 */
    const file$h = "src/components/Cards/CardTable.svelte";

    function create_fragment$j(ctx) {
    	let div29;
    	let div2;
    	let div1;
    	let div0;
    	let h3;
    	let t0;
    	let h3_class_value;
    	let t1;
    	let div28;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t2;
    	let th0_class_value;
    	let t3;
    	let th1;
    	let t4;
    	let th1_class_value;
    	let t5;
    	let th2;
    	let t6;
    	let th2_class_value;
    	let t7;
    	let th3;
    	let t8;
    	let th3_class_value;
    	let t9;
    	let th4;
    	let t10;
    	let th4_class_value;
    	let t11;
    	let th5;
    	let th5_class_value;
    	let t12;
    	let tbody;
    	let tr1;
    	let th6;
    	let img0;
    	let img0_src_value;
    	let t13;
    	let span0;
    	let t14;
    	let span0_class_value;
    	let t15;
    	let td0;
    	let t17;
    	let td1;
    	let i0;
    	let t18;
    	let t19;
    	let td2;
    	let div3;
    	let img1;
    	let img1_src_value;
    	let t20;
    	let img2;
    	let img2_src_value;
    	let t21;
    	let img3;
    	let img3_src_value;
    	let t22;
    	let img4;
    	let img4_src_value;
    	let t23;
    	let td3;
    	let div7;
    	let span1;
    	let t25;
    	let div6;
    	let div5;
    	let div4;
    	let t26;
    	let td4;
    	let tabledropdown0;
    	let t27;
    	let tr2;
    	let th7;
    	let img5;
    	let img5_src_value;
    	let t28;
    	let span2;
    	let t29;
    	let span2_class_value;
    	let t30;
    	let td5;
    	let t32;
    	let td6;
    	let i1;
    	let t33;
    	let t34;
    	let td7;
    	let div8;
    	let img6;
    	let img6_src_value;
    	let t35;
    	let img7;
    	let img7_src_value;
    	let t36;
    	let img8;
    	let img8_src_value;
    	let t37;
    	let img9;
    	let img9_src_value;
    	let t38;
    	let td8;
    	let div12;
    	let span3;
    	let t40;
    	let div11;
    	let div10;
    	let div9;
    	let t41;
    	let td9;
    	let tabledropdown1;
    	let t42;
    	let tr3;
    	let th8;
    	let img10;
    	let img10_src_value;
    	let t43;
    	let span4;
    	let t44;
    	let span4_class_value;
    	let t45;
    	let td10;
    	let t47;
    	let td11;
    	let i2;
    	let t48;
    	let t49;
    	let td12;
    	let div13;
    	let img11;
    	let img11_src_value;
    	let t50;
    	let img12;
    	let img12_src_value;
    	let t51;
    	let img13;
    	let img13_src_value;
    	let t52;
    	let img14;
    	let img14_src_value;
    	let t53;
    	let td13;
    	let div17;
    	let span5;
    	let t55;
    	let div16;
    	let div15;
    	let div14;
    	let t56;
    	let td14;
    	let tabledropdown2;
    	let t57;
    	let tr4;
    	let th9;
    	let img15;
    	let img15_src_value;
    	let t58;
    	let span6;
    	let t59;
    	let span6_class_value;
    	let t60;
    	let td15;
    	let t62;
    	let td16;
    	let i3;
    	let t63;
    	let t64;
    	let td17;
    	let div18;
    	let img16;
    	let img16_src_value;
    	let t65;
    	let img17;
    	let img17_src_value;
    	let t66;
    	let img18;
    	let img18_src_value;
    	let t67;
    	let img19;
    	let img19_src_value;
    	let t68;
    	let td18;
    	let div22;
    	let span7;
    	let t70;
    	let div21;
    	let div20;
    	let div19;
    	let t71;
    	let td19;
    	let tabledropdown3;
    	let t72;
    	let tr5;
    	let th10;
    	let img20;
    	let img20_src_value;
    	let t73;
    	let span8;
    	let t74;
    	let span8_class_value;
    	let t75;
    	let td20;
    	let t77;
    	let td21;
    	let i4;
    	let t78;
    	let t79;
    	let td22;
    	let div23;
    	let img21;
    	let img21_src_value;
    	let t80;
    	let img22;
    	let img22_src_value;
    	let t81;
    	let img23;
    	let img23_src_value;
    	let t82;
    	let img24;
    	let img24_src_value;
    	let t83;
    	let td23;
    	let div27;
    	let span9;
    	let t85;
    	let div26;
    	let div25;
    	let div24;
    	let t86;
    	let td24;
    	let tabledropdown4;
    	let div29_class_value;
    	let current;
    	tabledropdown0 = new TableDropdown({ $$inline: true });
    	tabledropdown1 = new TableDropdown({ $$inline: true });
    	tabledropdown2 = new TableDropdown({ $$inline: true });
    	tabledropdown3 = new TableDropdown({ $$inline: true });
    	tabledropdown4 = new TableDropdown({ $$inline: true });

    	const block = {
    		c: function create() {
    			div29 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			h3 = element("h3");
    			t0 = text("Card Tables");
    			t1 = space();
    			div28 = element("div");
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			t2 = text("Project");
    			t3 = space();
    			th1 = element("th");
    			t4 = text("Budget");
    			t5 = space();
    			th2 = element("th");
    			t6 = text("Status");
    			t7 = space();
    			th3 = element("th");
    			t8 = text("Users");
    			t9 = space();
    			th4 = element("th");
    			t10 = text("Completion");
    			t11 = space();
    			th5 = element("th");
    			t12 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			th6 = element("th");
    			img0 = element("img");
    			t13 = space();
    			span0 = element("span");
    			t14 = text("Argon Design System");
    			t15 = space();
    			td0 = element("td");
    			td0.textContent = "$2,500 USD";
    			t17 = space();
    			td1 = element("td");
    			i0 = element("i");
    			t18 = text(" pending");
    			t19 = space();
    			td2 = element("td");
    			div3 = element("div");
    			img1 = element("img");
    			t20 = space();
    			img2 = element("img");
    			t21 = space();
    			img3 = element("img");
    			t22 = space();
    			img4 = element("img");
    			t23 = space();
    			td3 = element("td");
    			div7 = element("div");
    			span1 = element("span");
    			span1.textContent = "60%";
    			t25 = space();
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			t26 = space();
    			td4 = element("td");
    			create_component(tabledropdown0.$$.fragment);
    			t27 = space();
    			tr2 = element("tr");
    			th7 = element("th");
    			img5 = element("img");
    			t28 = space();
    			span2 = element("span");
    			t29 = text("Angular Now UI Kit PRO");
    			t30 = space();
    			td5 = element("td");
    			td5.textContent = "$1,800 USD";
    			t32 = space();
    			td6 = element("td");
    			i1 = element("i");
    			t33 = text("\n            completed");
    			t34 = space();
    			td7 = element("td");
    			div8 = element("div");
    			img6 = element("img");
    			t35 = space();
    			img7 = element("img");
    			t36 = space();
    			img8 = element("img");
    			t37 = space();
    			img9 = element("img");
    			t38 = space();
    			td8 = element("td");
    			div12 = element("div");
    			span3 = element("span");
    			span3.textContent = "100%";
    			t40 = space();
    			div11 = element("div");
    			div10 = element("div");
    			div9 = element("div");
    			t41 = space();
    			td9 = element("td");
    			create_component(tabledropdown1.$$.fragment);
    			t42 = space();
    			tr3 = element("tr");
    			th8 = element("th");
    			img10 = element("img");
    			t43 = space();
    			span4 = element("span");
    			t44 = text("Black Dashboard Sketch");
    			t45 = space();
    			td10 = element("td");
    			td10.textContent = "$3,150 USD";
    			t47 = space();
    			td11 = element("td");
    			i2 = element("i");
    			t48 = text(" delayed");
    			t49 = space();
    			td12 = element("td");
    			div13 = element("div");
    			img11 = element("img");
    			t50 = space();
    			img12 = element("img");
    			t51 = space();
    			img13 = element("img");
    			t52 = space();
    			img14 = element("img");
    			t53 = space();
    			td13 = element("td");
    			div17 = element("div");
    			span5 = element("span");
    			span5.textContent = "73%";
    			t55 = space();
    			div16 = element("div");
    			div15 = element("div");
    			div14 = element("div");
    			t56 = space();
    			td14 = element("td");
    			create_component(tabledropdown2.$$.fragment);
    			t57 = space();
    			tr4 = element("tr");
    			th9 = element("th");
    			img15 = element("img");
    			t58 = space();
    			span6 = element("span");
    			t59 = text("React Material Dashboard");
    			t60 = space();
    			td15 = element("td");
    			td15.textContent = "$4,400 USD";
    			t62 = space();
    			td16 = element("td");
    			i3 = element("i");
    			t63 = text(" on schedule");
    			t64 = space();
    			td17 = element("td");
    			div18 = element("div");
    			img16 = element("img");
    			t65 = space();
    			img17 = element("img");
    			t66 = space();
    			img18 = element("img");
    			t67 = space();
    			img19 = element("img");
    			t68 = space();
    			td18 = element("td");
    			div22 = element("div");
    			span7 = element("span");
    			span7.textContent = "90%";
    			t70 = space();
    			div21 = element("div");
    			div20 = element("div");
    			div19 = element("div");
    			t71 = space();
    			td19 = element("td");
    			create_component(tabledropdown3.$$.fragment);
    			t72 = space();
    			tr5 = element("tr");
    			th10 = element("th");
    			img20 = element("img");
    			t73 = space();
    			span8 = element("span");
    			t74 = text("React Material Dashboard");
    			t75 = space();
    			td20 = element("td");
    			td20.textContent = "$2,200 USD";
    			t77 = space();
    			td21 = element("td");
    			i4 = element("i");
    			t78 = text("\n            completed");
    			t79 = space();
    			td22 = element("td");
    			div23 = element("div");
    			img21 = element("img");
    			t80 = space();
    			img22 = element("img");
    			t81 = space();
    			img23 = element("img");
    			t82 = space();
    			img24 = element("img");
    			t83 = space();
    			td23 = element("td");
    			div27 = element("div");
    			span9 = element("span");
    			span9.textContent = "100%";
    			t85 = space();
    			div26 = element("div");
    			div25 = element("div");
    			div24 = element("div");
    			t86 = space();
    			td24 = element("td");
    			create_component(tabledropdown4.$$.fragment);

    			attr_dev(h3, "class", h3_class_value = "font-semibold text-lg " + (/*color*/ ctx[0] === "light"
    			? "text-gray-800"
    			: "text-white"));

    			add_location(h3, file$h, 20, 8, 906);
    			attr_dev(div0, "class", "relative w-full px-4 max-w-full flex-grow flex-1");
    			add_location(div0, file$h, 19, 6, 835);
    			attr_dev(div1, "class", "flex flex-wrap items-center");
    			add_location(div1, file$h, 18, 4, 787);
    			attr_dev(div2, "class", "rounded-t mb-0 px-4 py-3 border-0");
    			add_location(div2, file$h, 17, 2, 735);

    			attr_dev(th0, "class", th0_class_value = "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left " + (/*color*/ ctx[0] === "light"
    			? "bg-gray-100 text-gray-600 border-gray-200"
    			: "bg-red-700 text-red-200 border-red-600"));

    			add_location(th0, file$h, 33, 10, 1263);

    			attr_dev(th1, "class", th1_class_value = "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left " + (/*color*/ ctx[0] === "light"
    			? "bg-gray-100 text-gray-600 border-gray-200"
    			: "bg-red-700 text-red-200 border-red-600"));

    			add_location(th1, file$h, 38, 10, 1580);

    			attr_dev(th2, "class", th2_class_value = "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left " + (/*color*/ ctx[0] === "light"
    			? "bg-gray-100 text-gray-600 border-gray-200"
    			: "bg-red-700 text-red-200 border-red-600"));

    			add_location(th2, file$h, 43, 10, 1896);

    			attr_dev(th3, "class", th3_class_value = "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left " + (/*color*/ ctx[0] === "light"
    			? "bg-gray-100 text-gray-600 border-gray-200"
    			: "bg-red-700 text-red-200 border-red-600"));

    			add_location(th3, file$h, 48, 10, 2212);

    			attr_dev(th4, "class", th4_class_value = "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left " + (/*color*/ ctx[0] === "light"
    			? "bg-gray-100 text-gray-600 border-gray-200"
    			: "bg-red-700 text-red-200 border-red-600"));

    			add_location(th4, file$h, 53, 10, 2527);

    			attr_dev(th5, "class", th5_class_value = "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left " + (/*color*/ ctx[0] === "light"
    			? "bg-gray-100 text-gray-600 border-gray-200"
    			: "bg-red-700 text-red-200 border-red-600"));

    			add_location(th5, file$h, 58, 10, 2847);
    			add_location(tr0, file$h, 32, 8, 1248);
    			add_location(thead, file$h, 31, 6, 1232);
    			if (img0.src !== (img0_src_value = bootstrap)) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "class", "h-12 w-12 bg-white rounded-full border");
    			attr_dev(img0, "alt", "...");
    			add_location(img0, file$h, 68, 12, 3347);

    			attr_dev(span0, "class", span0_class_value = "ml-3 font-bold " + (/*color*/ ctx[0] === "light"
    			? "btext-gray-700"
    			: "text-whit"));

    			add_location(span0, file$h, 73, 12, 3496);
    			attr_dev(th6, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left flex items-center");
    			add_location(th6, file$h, 65, 10, 3189);
    			attr_dev(td0, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td0, file$h, 79, 10, 3686);
    			attr_dev(i0, "class", "fas fa-circle text-orange-500 mr-2");
    			add_location(i0, file$h, 87, 12, 3983);
    			attr_dev(td1, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td1, file$h, 84, 10, 3853);
    			if (img1.src !== (img1_src_value = team1)) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "...");
    			attr_dev(img1, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow");
    			add_location(img1, file$h, 93, 14, 4231);
    			if (img2.src !== (img2_src_value = team2$1)) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "...");
    			attr_dev(img2, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img2, file$h, 98, 14, 4402);
    			if (img3.src !== (img3_src_value = team3)) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "...");
    			attr_dev(img3, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img3, file$h, 103, 14, 4579);
    			if (img4.src !== (img4_src_value = team4)) attr_dev(img4, "src", img4_src_value);
    			attr_dev(img4, "alt", "...");
    			attr_dev(img4, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img4, file$h, 108, 14, 4756);
    			attr_dev(div3, "class", "flex");
    			add_location(div3, file$h, 92, 12, 4198);
    			attr_dev(td2, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td2, file$h, 89, 10, 4068);
    			attr_dev(span1, "class", "mr-2");
    			add_location(span1, file$h, 119, 14, 5140);
    			set_style(div4, "width", "60%");
    			attr_dev(div4, "class", "shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-red-500");
    			add_location(div4, file$h, 124, 18, 5349);
    			attr_dev(div5, "class", "overflow-hidden h-2 text-xs flex rounded bg-red-200");
    			add_location(div5, file$h, 121, 16, 5230);
    			attr_dev(div6, "class", "relative w-full");
    			add_location(div6, file$h, 120, 14, 5184);
    			attr_dev(div7, "class", "flex items-center");
    			add_location(div7, file$h, 118, 12, 5094);
    			attr_dev(td3, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td3, file$h, 115, 10, 4964);
    			attr_dev(td4, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-right");
    			add_location(td4, file$h, 132, 10, 5630);
    			add_location(tr1, file$h, 64, 8, 3174);
    			if (img5.src !== (img5_src_value = angular)) attr_dev(img5, "src", img5_src_value);
    			attr_dev(img5, "class", "h-12 w-12 bg-white rounded-full border");
    			attr_dev(img5, "alt", "...");
    			add_location(img5, file$h, 142, 12, 6000);

    			attr_dev(span2, "class", span2_class_value = "ml-3 font-bold " + (/*color*/ ctx[0] === "light"
    			? "btext-gray-700"
    			: "text-whit"));

    			add_location(span2, file$h, 147, 12, 6147);
    			attr_dev(th7, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left flex items-center");
    			add_location(th7, file$h, 139, 10, 5842);
    			attr_dev(td5, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td5, file$h, 153, 10, 6340);
    			attr_dev(i1, "class", "fas fa-circle text-green-500 mr-2");
    			add_location(i1, file$h, 161, 12, 6637);
    			attr_dev(td6, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td6, file$h, 158, 10, 6507);
    			if (img6.src !== (img6_src_value = team1)) attr_dev(img6, "src", img6_src_value);
    			attr_dev(img6, "alt", "...");
    			attr_dev(img6, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow");
    			add_location(img6, file$h, 168, 14, 6898);
    			if (img7.src !== (img7_src_value = team2$1)) attr_dev(img7, "src", img7_src_value);
    			attr_dev(img7, "alt", "...");
    			attr_dev(img7, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img7, file$h, 173, 14, 7069);
    			if (img8.src !== (img8_src_value = team3)) attr_dev(img8, "src", img8_src_value);
    			attr_dev(img8, "alt", "...");
    			attr_dev(img8, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img8, file$h, 178, 14, 7246);
    			if (img9.src !== (img9_src_value = team4)) attr_dev(img9, "src", img9_src_value);
    			attr_dev(img9, "alt", "...");
    			attr_dev(img9, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img9, file$h, 183, 14, 7423);
    			attr_dev(div8, "class", "flex");
    			add_location(div8, file$h, 167, 12, 6865);
    			attr_dev(td7, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td7, file$h, 164, 10, 6735);
    			attr_dev(span3, "class", "mr-2");
    			add_location(span3, file$h, 194, 14, 7807);
    			set_style(div9, "width", "100%");
    			attr_dev(div9, "class", "shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-green-500");
    			add_location(div9, file$h, 199, 18, 8019);
    			attr_dev(div10, "class", "overflow-hidden h-2 text-xs flex rounded bg-green-200");
    			add_location(div10, file$h, 196, 16, 7898);
    			attr_dev(div11, "class", "relative w-full");
    			add_location(div11, file$h, 195, 14, 7852);
    			attr_dev(div12, "class", "flex items-center");
    			add_location(div12, file$h, 193, 12, 7761);
    			attr_dev(td8, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td8, file$h, 190, 10, 7631);
    			attr_dev(td9, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-right");
    			add_location(td9, file$h, 207, 10, 8303);
    			add_location(tr2, file$h, 138, 8, 5827);
    			if (img10.src !== (img10_src_value = sketch)) attr_dev(img10, "src", img10_src_value);
    			attr_dev(img10, "class", "h-12 w-12 bg-white rounded-full border");
    			attr_dev(img10, "alt", "...");
    			add_location(img10, file$h, 217, 12, 8673);

    			attr_dev(span4, "class", span4_class_value = "ml-3 font-bold " + (/*color*/ ctx[0] === "light"
    			? "btext-gray-700"
    			: "text-whit"));

    			add_location(span4, file$h, 222, 12, 8819);
    			attr_dev(th8, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left flex items-center");
    			add_location(th8, file$h, 214, 10, 8515);
    			attr_dev(td10, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td10, file$h, 228, 10, 9012);
    			attr_dev(i2, "class", "fas fa-circle text-red-500 mr-2");
    			add_location(i2, file$h, 236, 12, 9309);
    			attr_dev(td11, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td11, file$h, 233, 10, 9179);
    			if (img11.src !== (img11_src_value = team1)) attr_dev(img11, "src", img11_src_value);
    			attr_dev(img11, "alt", "...");
    			attr_dev(img11, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow");
    			add_location(img11, file$h, 242, 14, 9554);
    			if (img12.src !== (img12_src_value = team2$1)) attr_dev(img12, "src", img12_src_value);
    			attr_dev(img12, "alt", "...");
    			attr_dev(img12, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img12, file$h, 247, 14, 9725);
    			if (img13.src !== (img13_src_value = team3)) attr_dev(img13, "src", img13_src_value);
    			attr_dev(img13, "alt", "...");
    			attr_dev(img13, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img13, file$h, 252, 14, 9902);
    			if (img14.src !== (img14_src_value = team4)) attr_dev(img14, "src", img14_src_value);
    			attr_dev(img14, "alt", "...");
    			attr_dev(img14, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img14, file$h, 257, 14, 10079);
    			attr_dev(div13, "class", "flex");
    			add_location(div13, file$h, 241, 12, 9521);
    			attr_dev(td12, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td12, file$h, 238, 10, 9391);
    			attr_dev(span5, "class", "mr-2");
    			add_location(span5, file$h, 268, 14, 10463);
    			set_style(div14, "width", "73%");
    			attr_dev(div14, "class", "shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-red-500");
    			add_location(div14, file$h, 273, 18, 10672);
    			attr_dev(div15, "class", "overflow-hidden h-2 text-xs flex rounded bg-red-200");
    			add_location(div15, file$h, 270, 16, 10553);
    			attr_dev(div16, "class", "relative w-full");
    			add_location(div16, file$h, 269, 14, 10507);
    			attr_dev(div17, "class", "flex items-center");
    			add_location(div17, file$h, 267, 12, 10417);
    			attr_dev(td13, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td13, file$h, 264, 10, 10287);
    			attr_dev(td14, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-right");
    			add_location(td14, file$h, 281, 10, 10953);
    			add_location(tr3, file$h, 213, 8, 8500);
    			if (img15.src !== (img15_src_value = react)) attr_dev(img15, "src", img15_src_value);
    			attr_dev(img15, "class", "h-12 w-12 bg-white rounded-full border");
    			attr_dev(img15, "alt", "...");
    			add_location(img15, file$h, 291, 12, 11323);

    			attr_dev(span6, "class", span6_class_value = "ml-3 font-bold " + (/*color*/ ctx[0] === "light"
    			? "btext-gray-700"
    			: "text-whit"));

    			add_location(span6, file$h, 296, 12, 11468);
    			attr_dev(th9, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left flex items-center");
    			add_location(th9, file$h, 288, 10, 11165);
    			attr_dev(td15, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td15, file$h, 302, 10, 11663);
    			attr_dev(i3, "class", "fas fa-circle text-teal-500 mr-2");
    			add_location(i3, file$h, 310, 12, 11960);
    			attr_dev(td16, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td16, file$h, 307, 10, 11830);
    			if (img16.src !== (img16_src_value = team1)) attr_dev(img16, "src", img16_src_value);
    			attr_dev(img16, "alt", "...");
    			attr_dev(img16, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow");
    			add_location(img16, file$h, 316, 14, 12210);
    			if (img17.src !== (img17_src_value = team2$1)) attr_dev(img17, "src", img17_src_value);
    			attr_dev(img17, "alt", "...");
    			attr_dev(img17, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img17, file$h, 321, 14, 12381);
    			if (img18.src !== (img18_src_value = team3)) attr_dev(img18, "src", img18_src_value);
    			attr_dev(img18, "alt", "...");
    			attr_dev(img18, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img18, file$h, 326, 14, 12558);
    			if (img19.src !== (img19_src_value = team4)) attr_dev(img19, "src", img19_src_value);
    			attr_dev(img19, "alt", "...");
    			attr_dev(img19, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img19, file$h, 331, 14, 12735);
    			attr_dev(div18, "class", "flex");
    			add_location(div18, file$h, 315, 12, 12177);
    			attr_dev(td17, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td17, file$h, 312, 10, 12047);
    			attr_dev(span7, "class", "mr-2");
    			add_location(span7, file$h, 342, 14, 13119);
    			set_style(div19, "width", "90%");
    			attr_dev(div19, "class", "shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-teal-500");
    			add_location(div19, file$h, 347, 18, 13329);
    			attr_dev(div20, "class", "overflow-hidden h-2 text-xs flex rounded bg-teal-200");
    			add_location(div20, file$h, 344, 16, 13209);
    			attr_dev(div21, "class", "relative w-full");
    			add_location(div21, file$h, 343, 14, 13163);
    			attr_dev(div22, "class", "flex items-center");
    			add_location(div22, file$h, 341, 12, 13073);
    			attr_dev(td18, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td18, file$h, 338, 10, 12943);
    			attr_dev(td19, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-right");
    			add_location(td19, file$h, 355, 10, 13611);
    			add_location(tr4, file$h, 287, 8, 11150);
    			if (img20.src !== (img20_src_value = vue)) attr_dev(img20, "src", img20_src_value);
    			attr_dev(img20, "class", "h-12 w-12 bg-white rounded-full border");
    			attr_dev(img20, "alt", "...");
    			add_location(img20, file$h, 365, 12, 13981);

    			attr_dev(span8, "class", span8_class_value = "ml-3 font-bold " + (/*color*/ ctx[0] === "light"
    			? "btext-gray-700"
    			: "text-whit"));

    			add_location(span8, file$h, 370, 12, 14124);
    			attr_dev(th10, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-left flex items-center");
    			add_location(th10, file$h, 362, 10, 13823);
    			attr_dev(td20, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td20, file$h, 376, 10, 14319);
    			attr_dev(i4, "class", "fas fa-circle text-green-500 mr-2");
    			add_location(i4, file$h, 384, 12, 14616);
    			attr_dev(td21, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td21, file$h, 381, 10, 14486);
    			if (img21.src !== (img21_src_value = team1)) attr_dev(img21, "src", img21_src_value);
    			attr_dev(img21, "alt", "...");
    			attr_dev(img21, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow");
    			add_location(img21, file$h, 391, 14, 14877);
    			if (img22.src !== (img22_src_value = team2$1)) attr_dev(img22, "src", img22_src_value);
    			attr_dev(img22, "alt", "...");
    			attr_dev(img22, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img22, file$h, 396, 14, 15048);
    			if (img23.src !== (img23_src_value = team3)) attr_dev(img23, "src", img23_src_value);
    			attr_dev(img23, "alt", "...");
    			attr_dev(img23, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img23, file$h, 401, 14, 15225);
    			if (img24.src !== (img24_src_value = team4)) attr_dev(img24, "src", img24_src_value);
    			attr_dev(img24, "alt", "...");
    			attr_dev(img24, "class", "w-10 h-10 rounded-full border-2 border-gray-100 shadow -ml-4");
    			add_location(img24, file$h, 406, 14, 15402);
    			attr_dev(div23, "class", "flex");
    			add_location(div23, file$h, 390, 12, 14844);
    			attr_dev(td22, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td22, file$h, 387, 10, 14714);
    			attr_dev(span9, "class", "mr-2");
    			add_location(span9, file$h, 417, 14, 15786);
    			set_style(div24, "width", "100%");
    			attr_dev(div24, "class", "shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-green-500");
    			add_location(div24, file$h, 422, 18, 15998);
    			attr_dev(div25, "class", "overflow-hidden h-2 text-xs flex rounded bg-green-200");
    			add_location(div25, file$h, 419, 16, 15877);
    			attr_dev(div26, "class", "relative w-full");
    			add_location(div26, file$h, 418, 14, 15831);
    			attr_dev(div27, "class", "flex items-center");
    			add_location(div27, file$h, 416, 12, 15740);
    			attr_dev(td23, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4");
    			add_location(td23, file$h, 413, 10, 15610);
    			attr_dev(td24, "class", "border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-no-wrap p-4 text-right");
    			add_location(td24, file$h, 430, 10, 16282);
    			add_location(tr5, file$h, 361, 8, 13808);
    			add_location(tbody, file$h, 63, 6, 3158);
    			attr_dev(table, "class", "items-center w-full bg-transparent border-collapse");
    			add_location(table, file$h, 30, 4, 1159);
    			attr_dev(div28, "class", "block w-full overflow-x-auto");
    			add_location(div28, file$h, 28, 2, 1084);

    			attr_dev(div29, "class", div29_class_value = "relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded " + (/*color*/ ctx[0] === "light"
    			? "bg-white"
    			: "bg-red-800 text-white"));

    			add_location(div29, file$h, 14, 0, 584);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div29, anchor);
    			append_dev(div29, div2);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h3);
    			append_dev(h3, t0);
    			append_dev(div29, t1);
    			append_dev(div29, div28);
    			append_dev(div28, table);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(th0, t2);
    			append_dev(tr0, t3);
    			append_dev(tr0, th1);
    			append_dev(th1, t4);
    			append_dev(tr0, t5);
    			append_dev(tr0, th2);
    			append_dev(th2, t6);
    			append_dev(tr0, t7);
    			append_dev(tr0, th3);
    			append_dev(th3, t8);
    			append_dev(tr0, t9);
    			append_dev(tr0, th4);
    			append_dev(th4, t10);
    			append_dev(tr0, t11);
    			append_dev(tr0, th5);
    			append_dev(table, t12);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, th6);
    			append_dev(th6, img0);
    			append_dev(th6, t13);
    			append_dev(th6, span0);
    			append_dev(span0, t14);
    			append_dev(tr1, t15);
    			append_dev(tr1, td0);
    			append_dev(tr1, t17);
    			append_dev(tr1, td1);
    			append_dev(td1, i0);
    			append_dev(td1, t18);
    			append_dev(tr1, t19);
    			append_dev(tr1, td2);
    			append_dev(td2, div3);
    			append_dev(div3, img1);
    			append_dev(div3, t20);
    			append_dev(div3, img2);
    			append_dev(div3, t21);
    			append_dev(div3, img3);
    			append_dev(div3, t22);
    			append_dev(div3, img4);
    			append_dev(tr1, t23);
    			append_dev(tr1, td3);
    			append_dev(td3, div7);
    			append_dev(div7, span1);
    			append_dev(div7, t25);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(tr1, t26);
    			append_dev(tr1, td4);
    			mount_component(tabledropdown0, td4, null);
    			append_dev(tbody, t27);
    			append_dev(tbody, tr2);
    			append_dev(tr2, th7);
    			append_dev(th7, img5);
    			append_dev(th7, t28);
    			append_dev(th7, span2);
    			append_dev(span2, t29);
    			append_dev(tr2, t30);
    			append_dev(tr2, td5);
    			append_dev(tr2, t32);
    			append_dev(tr2, td6);
    			append_dev(td6, i1);
    			append_dev(td6, t33);
    			append_dev(tr2, t34);
    			append_dev(tr2, td7);
    			append_dev(td7, div8);
    			append_dev(div8, img6);
    			append_dev(div8, t35);
    			append_dev(div8, img7);
    			append_dev(div8, t36);
    			append_dev(div8, img8);
    			append_dev(div8, t37);
    			append_dev(div8, img9);
    			append_dev(tr2, t38);
    			append_dev(tr2, td8);
    			append_dev(td8, div12);
    			append_dev(div12, span3);
    			append_dev(div12, t40);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(tr2, t41);
    			append_dev(tr2, td9);
    			mount_component(tabledropdown1, td9, null);
    			append_dev(tbody, t42);
    			append_dev(tbody, tr3);
    			append_dev(tr3, th8);
    			append_dev(th8, img10);
    			append_dev(th8, t43);
    			append_dev(th8, span4);
    			append_dev(span4, t44);
    			append_dev(tr3, t45);
    			append_dev(tr3, td10);
    			append_dev(tr3, t47);
    			append_dev(tr3, td11);
    			append_dev(td11, i2);
    			append_dev(td11, t48);
    			append_dev(tr3, t49);
    			append_dev(tr3, td12);
    			append_dev(td12, div13);
    			append_dev(div13, img11);
    			append_dev(div13, t50);
    			append_dev(div13, img12);
    			append_dev(div13, t51);
    			append_dev(div13, img13);
    			append_dev(div13, t52);
    			append_dev(div13, img14);
    			append_dev(tr3, t53);
    			append_dev(tr3, td13);
    			append_dev(td13, div17);
    			append_dev(div17, span5);
    			append_dev(div17, t55);
    			append_dev(div17, div16);
    			append_dev(div16, div15);
    			append_dev(div15, div14);
    			append_dev(tr3, t56);
    			append_dev(tr3, td14);
    			mount_component(tabledropdown2, td14, null);
    			append_dev(tbody, t57);
    			append_dev(tbody, tr4);
    			append_dev(tr4, th9);
    			append_dev(th9, img15);
    			append_dev(th9, t58);
    			append_dev(th9, span6);
    			append_dev(span6, t59);
    			append_dev(tr4, t60);
    			append_dev(tr4, td15);
    			append_dev(tr4, t62);
    			append_dev(tr4, td16);
    			append_dev(td16, i3);
    			append_dev(td16, t63);
    			append_dev(tr4, t64);
    			append_dev(tr4, td17);
    			append_dev(td17, div18);
    			append_dev(div18, img16);
    			append_dev(div18, t65);
    			append_dev(div18, img17);
    			append_dev(div18, t66);
    			append_dev(div18, img18);
    			append_dev(div18, t67);
    			append_dev(div18, img19);
    			append_dev(tr4, t68);
    			append_dev(tr4, td18);
    			append_dev(td18, div22);
    			append_dev(div22, span7);
    			append_dev(div22, t70);
    			append_dev(div22, div21);
    			append_dev(div21, div20);
    			append_dev(div20, div19);
    			append_dev(tr4, t71);
    			append_dev(tr4, td19);
    			mount_component(tabledropdown3, td19, null);
    			append_dev(tbody, t72);
    			append_dev(tbody, tr5);
    			append_dev(tr5, th10);
    			append_dev(th10, img20);
    			append_dev(th10, t73);
    			append_dev(th10, span8);
    			append_dev(span8, t74);
    			append_dev(tr5, t75);
    			append_dev(tr5, td20);
    			append_dev(tr5, t77);
    			append_dev(tr5, td21);
    			append_dev(td21, i4);
    			append_dev(td21, t78);
    			append_dev(tr5, t79);
    			append_dev(tr5, td22);
    			append_dev(td22, div23);
    			append_dev(div23, img21);
    			append_dev(div23, t80);
    			append_dev(div23, img22);
    			append_dev(div23, t81);
    			append_dev(div23, img23);
    			append_dev(div23, t82);
    			append_dev(div23, img24);
    			append_dev(tr5, t83);
    			append_dev(tr5, td23);
    			append_dev(td23, div27);
    			append_dev(div27, span9);
    			append_dev(div27, t85);
    			append_dev(div27, div26);
    			append_dev(div26, div25);
    			append_dev(div25, div24);
    			append_dev(tr5, t86);
    			append_dev(tr5, td24);
    			mount_component(tabledropdown4, td24, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*color*/ 1 && h3_class_value !== (h3_class_value = "font-semibold text-lg " + (/*color*/ ctx[0] === "light"
    			? "text-gray-800"
    			: "text-white"))) {
    				attr_dev(h3, "class", h3_class_value);
    			}

    			if (!current || dirty & /*color*/ 1 && th0_class_value !== (th0_class_value = "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left " + (/*color*/ ctx[0] === "light"
    			? "bg-gray-100 text-gray-600 border-gray-200"
    			: "bg-red-700 text-red-200 border-red-600"))) {
    				attr_dev(th0, "class", th0_class_value);
    			}

    			if (!current || dirty & /*color*/ 1 && th1_class_value !== (th1_class_value = "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left " + (/*color*/ ctx[0] === "light"
    			? "bg-gray-100 text-gray-600 border-gray-200"
    			: "bg-red-700 text-red-200 border-red-600"))) {
    				attr_dev(th1, "class", th1_class_value);
    			}

    			if (!current || dirty & /*color*/ 1 && th2_class_value !== (th2_class_value = "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left " + (/*color*/ ctx[0] === "light"
    			? "bg-gray-100 text-gray-600 border-gray-200"
    			: "bg-red-700 text-red-200 border-red-600"))) {
    				attr_dev(th2, "class", th2_class_value);
    			}

    			if (!current || dirty & /*color*/ 1 && th3_class_value !== (th3_class_value = "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left " + (/*color*/ ctx[0] === "light"
    			? "bg-gray-100 text-gray-600 border-gray-200"
    			: "bg-red-700 text-red-200 border-red-600"))) {
    				attr_dev(th3, "class", th3_class_value);
    			}

    			if (!current || dirty & /*color*/ 1 && th4_class_value !== (th4_class_value = "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left " + (/*color*/ ctx[0] === "light"
    			? "bg-gray-100 text-gray-600 border-gray-200"
    			: "bg-red-700 text-red-200 border-red-600"))) {
    				attr_dev(th4, "class", th4_class_value);
    			}

    			if (!current || dirty & /*color*/ 1 && th5_class_value !== (th5_class_value = "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-no-wrap font-semibold text-left " + (/*color*/ ctx[0] === "light"
    			? "bg-gray-100 text-gray-600 border-gray-200"
    			: "bg-red-700 text-red-200 border-red-600"))) {
    				attr_dev(th5, "class", th5_class_value);
    			}

    			if (!current || dirty & /*color*/ 1 && span0_class_value !== (span0_class_value = "ml-3 font-bold " + (/*color*/ ctx[0] === "light"
    			? "btext-gray-700"
    			: "text-whit"))) {
    				attr_dev(span0, "class", span0_class_value);
    			}

    			if (!current || dirty & /*color*/ 1 && span2_class_value !== (span2_class_value = "ml-3 font-bold " + (/*color*/ ctx[0] === "light"
    			? "btext-gray-700"
    			: "text-whit"))) {
    				attr_dev(span2, "class", span2_class_value);
    			}

    			if (!current || dirty & /*color*/ 1 && span4_class_value !== (span4_class_value = "ml-3 font-bold " + (/*color*/ ctx[0] === "light"
    			? "btext-gray-700"
    			: "text-whit"))) {
    				attr_dev(span4, "class", span4_class_value);
    			}

    			if (!current || dirty & /*color*/ 1 && span6_class_value !== (span6_class_value = "ml-3 font-bold " + (/*color*/ ctx[0] === "light"
    			? "btext-gray-700"
    			: "text-whit"))) {
    				attr_dev(span6, "class", span6_class_value);
    			}

    			if (!current || dirty & /*color*/ 1 && span8_class_value !== (span8_class_value = "ml-3 font-bold " + (/*color*/ ctx[0] === "light"
    			? "btext-gray-700"
    			: "text-whit"))) {
    				attr_dev(span8, "class", span8_class_value);
    			}

    			if (!current || dirty & /*color*/ 1 && div29_class_value !== (div29_class_value = "relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded " + (/*color*/ ctx[0] === "light"
    			? "bg-white"
    			: "bg-red-800 text-white"))) {
    				attr_dev(div29, "class", div29_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabledropdown0.$$.fragment, local);
    			transition_in(tabledropdown1.$$.fragment, local);
    			transition_in(tabledropdown2.$$.fragment, local);
    			transition_in(tabledropdown3.$$.fragment, local);
    			transition_in(tabledropdown4.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tabledropdown0.$$.fragment, local);
    			transition_out(tabledropdown1.$$.fragment, local);
    			transition_out(tabledropdown2.$$.fragment, local);
    			transition_out(tabledropdown3.$$.fragment, local);
    			transition_out(tabledropdown4.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div29);
    			destroy_component(tabledropdown0);
    			destroy_component(tabledropdown1);
    			destroy_component(tabledropdown2);
    			destroy_component(tabledropdown3);
    			destroy_component(tabledropdown4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const bootstrap = "../assets/img/bootstrap.jpg";
    const angular = "../assets/img/angular.jpg";
    const sketch = "../assets/img/sketch.jpg";
    const react = "../assets/img/react.jpg";
    const vue = "../assets/img/react.jpg";
    const team1 = "../assets/img/team-1-800x800.jpg";
    const team2$1 = "../assets/img/team-2-800x800.jpg";
    const team3 = "../assets/img/team-3-800x800.jpg";
    const team4 = "../assets/img/team-4-470x470.png";

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("CardTable", slots, []);
    	let { color = "light" } = $$props;
    	const writable_props = ["color"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CardTable> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    	};

    	$$self.$capture_state = () => ({
    		TableDropdown,
    		bootstrap,
    		angular,
    		sketch,
    		react,
    		vue,
    		team1,
    		team2: team2$1,
    		team3,
    		team4,
    		color
    	});

    	$$self.$inject_state = $$props => {
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [color];
    }

    class CardTable extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, { color: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CardTable",
    			options,
    			id: create_fragment$j.name
    		});
    	}

    	get color() {
    		throw new Error("<CardTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<CardTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/views/admin/Tables.svelte generated by Svelte v3.26.0 */
    const file$i = "src/views/admin/Tables.svelte";

    function create_fragment$k(ctx) {
    	let div2;
    	let div0;
    	let cardtable0;
    	let t;
    	let div1;
    	let cardtable1;
    	let current;
    	cardtable0 = new CardTable({ $$inline: true });
    	cardtable1 = new CardTable({ props: { color: "dark" }, $$inline: true });

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			create_component(cardtable0.$$.fragment);
    			t = space();
    			div1 = element("div");
    			create_component(cardtable1.$$.fragment);
    			attr_dev(div0, "class", "w-full mb-12 px-4");
    			add_location(div0, file$i, 5, 2, 153);
    			attr_dev(div1, "class", "w-full mb-12 px-4");
    			add_location(div1, file$i, 8, 2, 214);
    			attr_dev(div2, "class", "flex flex-wrap mt-4");
    			add_location(div2, file$i, 4, 0, 117);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			mount_component(cardtable0, div0, null);
    			append_dev(div2, t);
    			append_dev(div2, div1);
    			mount_component(cardtable1, div1, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cardtable0.$$.fragment, local);
    			transition_in(cardtable1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cardtable0.$$.fragment, local);
    			transition_out(cardtable1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(cardtable0);
    			destroy_component(cardtable1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Tables", slots, []);
    	let { location } = $$props;
    	const writable_props = ["location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tables> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({ CardTable, location });

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [location];
    }

    class Tables extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, { location: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tables",
    			options,
    			id: create_fragment$k.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[0] === undefined && !("location" in props)) {
    			console.warn("<Tables> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<Tables>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Tables>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Maps/MapExample.svelte generated by Svelte v3.26.0 */
    const file$j = "src/components/Maps/MapExample.svelte";

    function create_fragment$l(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "id", "map-canvas");
    			attr_dev(div, "class", "relative w-full rounded h-600-px");
    			attr_dev(div, "data-lat", "40.748817");
    			attr_dev(div, "data-lng", "-73.985428");
    			add_location(div, file$j, 83, 0, 3180);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("MapExample", slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	// init google maps
    	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    		let google = window.google;
    		let map = document.getElementById("map-canvas");
    		let lat = map.getAttribute("data-lat");
    		let lng = map.getAttribute("data-lng");
    		const myLatlng = new google.maps.LatLng(lat, lng);

    		const mapOptions = {
    			zoom: 12,
    			scrollwheel: false,
    			center: myLatlng,
    			mapTypeId: google.maps.MapTypeId.ROADMAP,
    			styles: [
    				{
    					featureType: "administrative",
    					elementType: "labels.text.fill",
    					stylers: [{ color: "#444444" }]
    				},
    				{
    					featureType: "landscape",
    					elementType: "all",
    					stylers: [{ color: "#f2f2f2" }]
    				},
    				{
    					featureType: "poi",
    					elementType: "all",
    					stylers: [{ visibility: "off" }]
    				},
    				{
    					featureType: "road",
    					elementType: "all",
    					stylers: [{ saturation: -100 }, { lightness: 45 }]
    				},
    				{
    					featureType: "road.highway",
    					elementType: "all",
    					stylers: [{ visibility: "simplified" }]
    				},
    				{
    					featureType: "road.arterial",
    					elementType: "labels.icon",
    					stylers: [{ visibility: "off" }]
    				},
    				{
    					featureType: "transit",
    					elementType: "all",
    					stylers: [{ visibility: "off" }]
    				},
    				{
    					featureType: "water",
    					elementType: "all",
    					stylers: [{ color: "#ed8936" }, { visibility: "on" }]
    				}
    			]
    		};

    		map = new google.maps.Map(map, mapOptions);

    		const marker = new google.maps.Marker({
    				position: myLatlng,
    				map,
    				animation: google.maps.Animation.DROP,
    				title: "Hello World!"
    			});

    		const contentString = "<div class=\"info-window-content\"><h2>Tailwind WebApp Svelte</h2>" + "<p>A beautiful Dashboard for Bootstrap 4. It is Free and Open Source.</p></div>";
    		const infowindow = new google.maps.InfoWindow({ content: contentString });

    		google.maps.event.addListener(marker, "click", function () {
    			infowindow.open(map, marker);
    		});
    	}));

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MapExample> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ __awaiter, onMount });

    	$$self.$inject_state = $$props => {
    		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [];
    }

    class MapExample extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MapExample",
    			options,
    			id: create_fragment$l.name
    		});
    	}
    }

    /* src/views/admin/Maps.svelte generated by Svelte v3.26.0 */
    const file$k = "src/views/admin/Maps.svelte";

    function create_fragment$m(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let mapexample;
    	let current;
    	mapexample = new MapExample({ $$inline: true });

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			create_component(mapexample.$$.fragment);
    			attr_dev(div0, "class", "relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-lg rounded");
    			add_location(div0, file$k, 6, 4, 179);
    			attr_dev(div1, "class", "w-full px-4");
    			add_location(div1, file$k, 5, 2, 149);
    			attr_dev(div2, "class", "flex flex-wrap");
    			add_location(div2, file$k, 4, 0, 118);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			mount_component(mapexample, div0, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mapexample.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mapexample.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(mapexample);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Maps", slots, []);
    	let { location } = $$props;
    	const writable_props = ["location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Maps> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({ MapExample, location });

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [location];
    }

    class Maps extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, { location: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Maps",
    			options,
    			id: create_fragment$m.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[0] === undefined && !("location" in props)) {
    			console.warn("<Maps> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<Maps>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Maps>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/layouts/Admin.svelte generated by Svelte v3.26.0 */
    const file$l = "src/layouts/Admin.svelte";

    // (20:6) <Router url="admin">
    function create_default_slot(ctx) {
    	let route0;
    	let t0;
    	let route1;
    	let t1;
    	let route2;
    	let t2;
    	let route3;
    	let current;

    	route0 = new Route({
    			props: { path: "dashboard", component: Dashboard },
    			$$inline: true
    		});

    	route1 = new Route({
    			props: { path: "settings", component: Settings },
    			$$inline: true
    		});

    	route2 = new Route({
    			props: { path: "tables", component: Tables },
    			$$inline: true
    		});

    	route3 = new Route({
    			props: { path: "maps", component: Maps },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route0.$$.fragment);
    			t0 = space();
    			create_component(route1.$$.fragment);
    			t1 = space();
    			create_component(route2.$$.fragment);
    			t2 = space();
    			create_component(route3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(route0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(route1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(route2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(route3, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			transition_in(route2.$$.fragment, local);
    			transition_in(route3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			transition_out(route2.$$.fragment, local);
    			transition_out(route3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(route1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(route2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(route3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(20:6) <Router url=\\\"admin\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let div2;
    	let sidebar;
    	let t0;
    	let div1;
    	let adminnavbar;
    	let t1;
    	let headerstats;
    	let t2;
    	let div0;
    	let router;
    	let t3;
    	let footeradmin;
    	let current;

    	sidebar = new Sidebar({
    			props: { location: /*location*/ ctx[0] },
    			$$inline: true
    		});

    	adminnavbar = new AdminNavbar({ $$inline: true });
    	headerstats = new HeaderStats({ $$inline: true });

    	router = new Router({
    			props: {
    				url: "admin",
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	footeradmin = new FooterAdmin({ $$inline: true });

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			create_component(sidebar.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(adminnavbar.$$.fragment);
    			t1 = space();
    			create_component(headerstats.$$.fragment);
    			t2 = space();
    			div0 = element("div");
    			create_component(router.$$.fragment);
    			t3 = space();
    			create_component(footeradmin.$$.fragment);
    			attr_dev(div0, "class", "px-4 md:px-10 mx-auto w-full -m-24");
    			add_location(div0, file$l, 18, 4, 708);
    			attr_dev(div1, "class", "relative md:ml-64 bg-gray-200");
    			add_location(div1, file$l, 15, 2, 620);
    			add_location(div2, file$l, 13, 0, 579);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			mount_component(sidebar, div2, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			mount_component(adminnavbar, div1, null);
    			append_dev(div1, t1);
    			mount_component(headerstats, div1, null);
    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			mount_component(router, div0, null);
    			append_dev(div0, t3);
    			mount_component(footeradmin, div0, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const sidebar_changes = {};
    			if (dirty & /*location*/ 1) sidebar_changes.location = /*location*/ ctx[0];
    			sidebar.$set(sidebar_changes);
    			const router_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				router_changes.$$scope = { dirty, ctx };
    			}

    			router.$set(router_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sidebar.$$.fragment, local);
    			transition_in(adminnavbar.$$.fragment, local);
    			transition_in(headerstats.$$.fragment, local);
    			transition_in(router.$$.fragment, local);
    			transition_in(footeradmin.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sidebar.$$.fragment, local);
    			transition_out(adminnavbar.$$.fragment, local);
    			transition_out(headerstats.$$.fragment, local);
    			transition_out(router.$$.fragment, local);
    			transition_out(footeradmin.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(sidebar);
    			destroy_component(adminnavbar);
    			destroy_component(headerstats);
    			destroy_component(router);
    			destroy_component(footeradmin);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Admin", slots, []);
    	let { location } = $$props;
    	let { admin = "" } = $$props;
    	const writable_props = ["location", "admin"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Admin> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    		if ("admin" in $$props) $$invalidate(1, admin = $$props.admin);
    	};

    	$$self.$capture_state = () => ({
    		Router,
    		Route,
    		AdminNavbar,
    		Sidebar,
    		HeaderStats,
    		FooterAdmin,
    		Dashboard,
    		Settings,
    		Tables,
    		Maps,
    		location,
    		admin
    	});

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    		if ("admin" in $$props) $$invalidate(1, admin = $$props.admin);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [location, admin];
    }

    class Admin extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, { location: 0, admin: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Admin",
    			options,
    			id: create_fragment$n.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[0] === undefined && !("location" in props)) {
    			console.warn("<Admin> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<Admin>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Admin>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get admin() {
    		throw new Error("<Admin>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set admin(value) {
    		throw new Error("<Admin>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Dropdowns/PagesDropdown.svelte generated by Svelte v3.26.0 */
    const file$m = "src/components/Dropdowns/PagesDropdown.svelte";

    function create_fragment$o(ctx) {
    	let div3;
    	let a0;
    	let t1;
    	let div2;
    	let span0;
    	let t3;
    	let a1;
    	let link_action;
    	let t5;
    	let a2;
    	let link_action_1;
    	let t7;
    	let a3;
    	let link_action_2;
    	let t9;
    	let a4;
    	let link_action_3;
    	let t11;
    	let div0;
    	let t12;
    	let span1;
    	let t14;
    	let a5;
    	let link_action_4;
    	let t16;
    	let a6;
    	let link_action_5;
    	let t18;
    	let div1;
    	let t19;
    	let span2;
    	let t21;
    	let a7;
    	let link_action_6;
    	let t23;
    	let a8;
    	let link_action_7;
    	let div2_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			a0 = element("a");
    			a0.textContent = "Demo Pages";
    			t1 = space();
    			div2 = element("div");
    			span0 = element("span");
    			span0.textContent = "Admin Layout";
    			t3 = space();
    			a1 = element("a");
    			a1.textContent = "Dashboard";
    			t5 = space();
    			a2 = element("a");
    			a2.textContent = "Settings";
    			t7 = space();
    			a3 = element("a");
    			a3.textContent = "Tables";
    			t9 = space();
    			a4 = element("a");
    			a4.textContent = "Maps";
    			t11 = space();
    			div0 = element("div");
    			t12 = space();
    			span1 = element("span");
    			span1.textContent = "Auth Layout";
    			t14 = space();
    			a5 = element("a");
    			a5.textContent = "Login";
    			t16 = space();
    			a6 = element("a");
    			a6.textContent = "Register";
    			t18 = space();
    			div1 = element("div");
    			t19 = space();
    			span2 = element("span");
    			span2.textContent = "No Layout";
    			t21 = space();
    			a7 = element("a");
    			a7.textContent = "Landing";
    			t23 = space();
    			a8 = element("a");
    			a8.textContent = "Profile";
    			attr_dev(a0, "class", "lg:text-white lg:hover:text-gray-300 text-gray-800 px-3 py-4 lg:py-2 flex items-center text-xs uppercase font-bold");
    			attr_dev(a0, "href", "#pablo");
    			add_location(a0, file$m, 21, 2, 531);
    			attr_dev(span0, "class", "text-sm pt-2 pb-0 px-4 font-bold block w-full whitespace-no-wrap bg-transparent text-gray-500");
    			add_location(span0, file$m, 33, 4, 962);
    			attr_dev(a1, "href", "/admin/dashboard");
    			attr_dev(a1, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a1, file$m, 38, 4, 1117);
    			attr_dev(a2, "href", "/admin/settings");
    			attr_dev(a2, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a2, file$m, 45, 4, 1305);
    			attr_dev(a3, "href", "/admin/tables");
    			attr_dev(a3, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a3, file$m, 52, 4, 1491);
    			attr_dev(a4, "href", "/admin/maps");
    			attr_dev(a4, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a4, file$m, 59, 4, 1673);
    			attr_dev(div0, "class", "h-0 mx-4 my-2 border border-solid border-gray-200");
    			add_location(div0, file$m, 66, 4, 1851);
    			attr_dev(span1, "class", "text-sm pt-2 pb-0 px-4 font-bold block w-full whitespace-no-wrap bg-transparent text-gray-500");
    			add_location(span1, file$m, 67, 4, 1921);
    			attr_dev(a5, "href", "/auth/login");
    			attr_dev(a5, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a5, file$m, 72, 4, 2075);
    			attr_dev(a6, "href", "/auth/register");
    			attr_dev(a6, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a6, file$m, 79, 4, 2254);
    			attr_dev(div1, "class", "h-0 mx-4 my-2 border border-solid border-gray-200");
    			add_location(div1, file$m, 86, 4, 2439);
    			attr_dev(span2, "class", "text-sm pt-2 pb-0 px-4 font-bold block w-full whitespace-no-wrap bg-transparent text-gray-500");
    			add_location(span2, file$m, 87, 4, 2509);
    			attr_dev(a7, "href", "/landing");
    			attr_dev(a7, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a7, file$m, 92, 4, 2661);
    			attr_dev(a8, "href", "/profile");
    			attr_dev(a8, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a8, file$m, 99, 4, 2839);
    			attr_dev(div2, "class", div2_class_value = "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48 " + (/*dropdownPopoverShow*/ ctx[0] ? "block" : "hidden"));
    			add_location(div2, file$m, 29, 2, 772);
    			add_location(div3, file$m, 20, 0, 523);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, a0);
    			/*a0_binding*/ ctx[4](a0);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, span0);
    			append_dev(div2, t3);
    			append_dev(div2, a1);
    			append_dev(div2, t5);
    			append_dev(div2, a2);
    			append_dev(div2, t7);
    			append_dev(div2, a3);
    			append_dev(div2, t9);
    			append_dev(div2, a4);
    			append_dev(div2, t11);
    			append_dev(div2, div0);
    			append_dev(div2, t12);
    			append_dev(div2, span1);
    			append_dev(div2, t14);
    			append_dev(div2, a5);
    			append_dev(div2, t16);
    			append_dev(div2, a6);
    			append_dev(div2, t18);
    			append_dev(div2, div1);
    			append_dev(div2, t19);
    			append_dev(div2, span2);
    			append_dev(div2, t21);
    			append_dev(div2, a7);
    			append_dev(div2, t23);
    			append_dev(div2, a8);
    			/*div2_binding*/ ctx[5](div2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(a0, "click", /*toggleDropdown*/ ctx[3], false, false, false),
    					action_destroyer(link_action = link.call(null, a1)),
    					action_destroyer(link_action_1 = link.call(null, a2)),
    					action_destroyer(link_action_2 = link.call(null, a3)),
    					action_destroyer(link_action_3 = link.call(null, a4)),
    					action_destroyer(link_action_4 = link.call(null, a5)),
    					action_destroyer(link_action_5 = link.call(null, a6)),
    					action_destroyer(link_action_6 = link.call(null, a7)),
    					action_destroyer(link_action_7 = link.call(null, a8))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*dropdownPopoverShow*/ 1 && div2_class_value !== (div2_class_value = "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48 " + (/*dropdownPopoverShow*/ ctx[0] ? "block" : "hidden"))) {
    				attr_dev(div2, "class", div2_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			/*a0_binding*/ ctx[4](null);
    			/*div2_binding*/ ctx[5](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("PagesDropdown", slots, []);
    	let dropdownPopoverShow = false;
    	let btnDropdownRef;
    	let popoverDropdownRef;

    	const toggleDropdown = event => {
    		event.preventDefault();

    		if (dropdownPopoverShow) {
    			$$invalidate(0, dropdownPopoverShow = false);
    		} else {
    			$$invalidate(0, dropdownPopoverShow = true);
    			createPopper(btnDropdownRef, popoverDropdownRef, { placement: "bottom-start" });
    		}
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PagesDropdown> was created with unknown prop '${key}'`);
    	});

    	function a0_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			btnDropdownRef = $$value;
    			$$invalidate(1, btnDropdownRef);
    		});
    	}

    	function div2_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			popoverDropdownRef = $$value;
    			$$invalidate(2, popoverDropdownRef);
    		});
    	}

    	$$self.$capture_state = () => ({
    		link,
    		createPopper,
    		dropdownPopoverShow,
    		btnDropdownRef,
    		popoverDropdownRef,
    		toggleDropdown
    	});

    	$$self.$inject_state = $$props => {
    		if ("dropdownPopoverShow" in $$props) $$invalidate(0, dropdownPopoverShow = $$props.dropdownPopoverShow);
    		if ("btnDropdownRef" in $$props) $$invalidate(1, btnDropdownRef = $$props.btnDropdownRef);
    		if ("popoverDropdownRef" in $$props) $$invalidate(2, popoverDropdownRef = $$props.popoverDropdownRef);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dropdownPopoverShow,
    		btnDropdownRef,
    		popoverDropdownRef,
    		toggleDropdown,
    		a0_binding,
    		div2_binding
    	];
    }

    class PagesDropdown extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PagesDropdown",
    			options,
    			id: create_fragment$o.name
    		});
    	}
    }

    /* src/components/Navbars/AuthNavbar.svelte generated by Svelte v3.26.0 */
    const file$n = "src/components/Navbars/AuthNavbar.svelte";

    function create_fragment$p(ctx) {
    	let nav;
    	let div2;
    	let div0;
    	let a0;
    	let link_action;
    	let t1;
    	let button0;
    	let i0;
    	let t2;
    	let div1;
    	let ul0;
    	let li0;
    	let a1;
    	let i1;
    	let t3;
    	let t4;
    	let ul1;
    	let li1;
    	let pagesdropdown;
    	let t5;
    	let li2;
    	let a2;
    	let i2;
    	let t6;
    	let span0;
    	let t8;
    	let li3;
    	let a3;
    	let i3;
    	let t9;
    	let span1;
    	let t11;
    	let li4;
    	let a4;
    	let i4;
    	let t12;
    	let span2;
    	let t14;
    	let li5;
    	let button1;
    	let i5;
    	let t15;
    	let div1_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	pagesdropdown = new PagesDropdown({ $$inline: true });

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			div2 = element("div");
    			div0 = element("div");
    			a0 = element("a");
    			a0.textContent = "Tailwind WebApp Svelte";
    			t1 = space();
    			button0 = element("button");
    			i0 = element("i");
    			t2 = space();
    			div1 = element("div");
    			ul0 = element("ul");
    			li0 = element("li");
    			a1 = element("a");
    			i1 = element("i");
    			t3 = text("\n            Docs");
    			t4 = space();
    			ul1 = element("ul");
    			li1 = element("li");
    			create_component(pagesdropdown.$$.fragment);
    			t5 = space();
    			li2 = element("li");
    			a2 = element("a");
    			i2 = element("i");
    			t6 = space();
    			span0 = element("span");
    			span0.textContent = "Share";
    			t8 = space();
    			li3 = element("li");
    			a3 = element("a");
    			i3 = element("i");
    			t9 = space();
    			span1 = element("span");
    			span1.textContent = "Tweet";
    			t11 = space();
    			li4 = element("li");
    			a4 = element("a");
    			i4 = element("i");
    			t12 = space();
    			span2 = element("span");
    			span2.textContent = "Star";
    			t14 = space();
    			li5 = element("li");
    			button1 = element("button");
    			i5 = element("i");
    			t15 = text(" Download");
    			attr_dev(a0, "class", "text-white text-sm font-bold leading-relaxed inline-block mr-4 py-2 whitespace-no-wrap uppercase");
    			attr_dev(a0, "href", "/");
    			add_location(a0, file$n, 17, 6, 553);
    			attr_dev(i0, "class", "text-white fas fa-bars");
    			add_location(i0, file$n, 29, 8, 1012);
    			attr_dev(button0, "class", "cursor-pointer text-xl leading-none px-3 py-1 border border-solid border-transparent rounded bg-transparent block lg:hidden outline-none focus:outline-none");
    			attr_dev(button0, "type", "button");
    			add_location(button0, file$n, 24, 6, 759);
    			attr_dev(div0, "class", "w-full relative flex justify-between lg:w-auto lg:static lg:block lg:justify-start");
    			add_location(div0, file$n, 14, 4, 439);
    			attr_dev(i1, "class", "lg:text-gray-300 text-gray-500 far fa-file-alt text-lg leading-lg mr-2");
    			add_location(i1, file$n, 42, 12, 1651);
    			attr_dev(a1, "class", "lg:text-white lg:hover:text-gray-300 text-gray-800 px-3 py-4 lg:py-2 flex items-center text-xs uppercase font-bold");
    			attr_dev(a1, "href", "https://www.creative-tim.com/learning-lab/tailwind/svelte/overview/webapp?ref=tws-auth-navbar");
    			add_location(a1, file$n, 38, 10, 1376);
    			attr_dev(li0, "class", "flex items-center");
    			add_location(li0, file$n, 37, 8, 1335);
    			attr_dev(ul0, "class", "flex flex-col lg:flex-row list-none mr-auto");
    			add_location(ul0, file$n, 36, 6, 1270);
    			attr_dev(li1, "class", "flex items-center");
    			add_location(li1, file$n, 50, 8, 1894);
    			attr_dev(i2, "class", "lg:text-gray-300 text-gray-500 fab fa-facebook text-lg leading-lg");
    			add_location(i2, file$n, 59, 12, 2338);
    			attr_dev(span0, "class", "lg:hidden inline-block ml-2");
    			add_location(span0, file$n, 62, 12, 2456);
    			attr_dev(a2, "class", "lg:text-white lg:hover:text-gray-300 text-gray-800 px-3 py-4 lg:py-2 flex items-center text-xs uppercase font-bold");
    			attr_dev(a2, "href", "https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdemos.creative-tim.com%2Fvue-tailwind-webapp%2F%23%2F");
    			attr_dev(a2, "target", "_blank");
    			add_location(a2, file$n, 54, 10, 2016);
    			attr_dev(li2, "class", "flex items-center");
    			add_location(li2, file$n, 53, 8, 1975);
    			attr_dev(i3, "class", "lg:text-gray-300 text-gray-500 fab fa-twitter text-lg leading-lg");
    			add_location(i3, file$n, 72, 12, 3172);
    			attr_dev(span1, "class", "lg:hidden inline-block ml-2");
    			add_location(span1, file$n, 75, 12, 3289);
    			attr_dev(a3, "class", "lg:text-white lg:hover:text-gray-300 text-gray-800 px-3 py-4 lg:py-2 flex items-center text-xs uppercase font-bold");
    			attr_dev(a3, "href", "https://twitter.com/intent/tweet?url=https%3A%2F%2Fdemos.creative-tim.com%2Ftailwind-webapp-svelte%2F&text=Start%20your%20development%20with%20a%20Free%20Tailwind%20CSS%20and%20Svelte%20UI%20Kit%20and%20Admin.%20Let%20Tailwind%20Webapp%20Svelte%20amaze%20you%20with%20its%20cool%20features%20and%20build%20tools%20and%20get%20your%20project%20to%20a%20whole%20new%20level.");
    			attr_dev(a3, "target", "_blank");
    			add_location(a3, file$n, 67, 10, 2590);
    			attr_dev(li3, "class", "flex items-center");
    			add_location(li3, file$n, 66, 8, 2549);
    			attr_dev(i4, "class", "lg:text-gray-300 text-gray-500 fab fa-github text-lg leading-lg");
    			add_location(i4, file$n, 85, 12, 3711);
    			attr_dev(span2, "class", "lg:hidden inline-block ml-2");
    			add_location(span2, file$n, 88, 12, 3827);
    			attr_dev(a4, "class", "lg:text-white lg:hover:text-gray-300 text-gray-800 px-3 py-4 lg:py-2 flex items-center text-xs uppercase font-bold");
    			attr_dev(a4, "href", "https://github.com/creativetimofficial/vue-tailwind-webapp?ref=tws-auth-navbar");
    			attr_dev(a4, "target", "_blank");
    			add_location(a4, file$n, 80, 10, 3423);
    			attr_dev(li4, "class", "flex items-center");
    			add_location(li4, file$n, 79, 8, 3382);
    			attr_dev(i5, "class", "fas fa-arrow-alt-circle-down");
    			add_location(i5, file$n, 97, 12, 4247);
    			attr_dev(button1, "class", "bg-white text-gray-800 active:bg-gray-100 text-xs font-bold uppercase px-4 py-2 rounded shadow hover:shadow-md outline-none focus:outline-none lg:mr-1 lg:mb-0 ml-3 mb-3 ease-linear transition-all duration-150");
    			attr_dev(button1, "type", "button");
    			add_location(button1, file$n, 93, 10, 3960);
    			attr_dev(li5, "class", "flex items-center");
    			add_location(li5, file$n, 92, 8, 3919);
    			attr_dev(ul1, "class", "flex flex-col lg:flex-row list-none lg:ml-auto");
    			add_location(ul1, file$n, 49, 6, 1826);
    			attr_dev(div1, "class", div1_class_value = "lg:flex flex-grow items-center bg-white lg:bg-transparent lg:shadow-none rounded shadow-lg " + (/*navbarOpen*/ ctx[0] ? "block" : "hidden"));
    			attr_dev(div1, "id", "example-navbar-warning");
    			add_location(div1, file$n, 32, 4, 1082);
    			attr_dev(div2, "class", "container px-4 mx-auto flex flex-wrap items-center justify-between");
    			add_location(div2, file$n, 11, 2, 347);
    			attr_dev(nav, "class", "top-0 absolute z-50 w-full flex flex-wrap items-center justify-between px-2 py-3 navbar-expand-lg");
    			add_location(nav, file$n, 8, 0, 230);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div2);
    			append_dev(div2, div0);
    			append_dev(div0, a0);
    			append_dev(div0, t1);
    			append_dev(div0, button0);
    			append_dev(button0, i0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, ul0);
    			append_dev(ul0, li0);
    			append_dev(li0, a1);
    			append_dev(a1, i1);
    			append_dev(a1, t3);
    			append_dev(div1, t4);
    			append_dev(div1, ul1);
    			append_dev(ul1, li1);
    			mount_component(pagesdropdown, li1, null);
    			append_dev(ul1, t5);
    			append_dev(ul1, li2);
    			append_dev(li2, a2);
    			append_dev(a2, i2);
    			append_dev(a2, t6);
    			append_dev(a2, span0);
    			append_dev(ul1, t8);
    			append_dev(ul1, li3);
    			append_dev(li3, a3);
    			append_dev(a3, i3);
    			append_dev(a3, t9);
    			append_dev(a3, span1);
    			append_dev(ul1, t11);
    			append_dev(ul1, li4);
    			append_dev(li4, a4);
    			append_dev(a4, i4);
    			append_dev(a4, t12);
    			append_dev(a4, span2);
    			append_dev(ul1, t14);
    			append_dev(ul1, li5);
    			append_dev(li5, button1);
    			append_dev(button1, i5);
    			append_dev(button1, t15);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(link_action = link.call(null, a0)),
    					listen_dev(button0, "click", /*setNavbarOpen*/ ctx[1], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*navbarOpen*/ 1 && div1_class_value !== (div1_class_value = "lg:flex flex-grow items-center bg-white lg:bg-transparent lg:shadow-none rounded shadow-lg " + (/*navbarOpen*/ ctx[0] ? "block" : "hidden"))) {
    				attr_dev(div1, "class", div1_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(pagesdropdown.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(pagesdropdown.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			destroy_component(pagesdropdown);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("AuthNavbar", slots, []);
    	let navbarOpen = false;

    	function setNavbarOpen() {
    		$$invalidate(0, navbarOpen = !navbarOpen);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<AuthNavbar> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		link,
    		PagesDropdown,
    		navbarOpen,
    		setNavbarOpen
    	});

    	$$self.$inject_state = $$props => {
    		if ("navbarOpen" in $$props) $$invalidate(0, navbarOpen = $$props.navbarOpen);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [navbarOpen, setNavbarOpen];
    }

    class AuthNavbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AuthNavbar",
    			options,
    			id: create_fragment$p.name
    		});
    	}
    }

    /* src/components/Footers/FooterSmall.svelte generated by Svelte v3.26.0 */

    const file$o = "src/components/Footers/FooterSmall.svelte";

    function create_fragment$q(ctx) {
    	let footer;
    	let div4;
    	let hr;
    	let t0;
    	let div3;
    	let div1;
    	let div0;
    	let t1;
    	let t2;
    	let t3;
    	let a0;
    	let t5;
    	let div2;
    	let ul;
    	let li0;
    	let a1;
    	let t7;
    	let li1;
    	let a2;
    	let t9;
    	let li2;
    	let a3;
    	let t11;
    	let li3;
    	let a4;
    	let footer_class_value;

    	const block = {
    		c: function create() {
    			footer = element("footer");
    			div4 = element("div");
    			hr = element("hr");
    			t0 = space();
    			div3 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			t1 = text("Copyright © ");
    			t2 = text(/*date*/ ctx[1]);
    			t3 = space();
    			a0 = element("a");
    			a0.textContent = "Creative Tim";
    			t5 = space();
    			div2 = element("div");
    			ul = element("ul");
    			li0 = element("li");
    			a1 = element("a");
    			a1.textContent = "Creative Tim";
    			t7 = space();
    			li1 = element("li");
    			a2 = element("a");
    			a2.textContent = "About Us";
    			t9 = space();
    			li2 = element("li");
    			a3 = element("a");
    			a3.textContent = "Blog";
    			t11 = space();
    			li3 = element("li");
    			a4 = element("a");
    			a4.textContent = "MIT License";
    			attr_dev(hr, "class", "mb-6 border-b-1 border-gray-700");
    			add_location(hr, file$o, 9, 4, 279);
    			attr_dev(a0, "href", "https://www.creative-tim.com?ref=tws-footer-small");
    			attr_dev(a0, "class", "text-white hover:text-gray-400 text-sm font-semibold py-1");
    			add_location(a0, file$o, 16, 10, 594);
    			attr_dev(div0, "class", "text-sm text-gray-600 font-semibold py-1 text-center md:text-left");
    			add_location(div0, file$o, 12, 8, 456);
    			attr_dev(div1, "class", "w-full md:w-4/12 px-4");
    			add_location(div1, file$o, 11, 6, 412);
    			attr_dev(a1, "href", "https://www.creative-tim.com?ref=tws-footer-small");
    			attr_dev(a1, "class", "text-white hover:text-gray-400 text-sm font-semibold block py-1 px-3");
    			add_location(a1, file$o, 27, 12, 969);
    			add_location(li0, file$o, 26, 10, 952);
    			attr_dev(a2, "href", "https://www.creative-tim.com/presentation?ref=tws-footer-small");
    			attr_dev(a2, "class", "text-white hover:text-gray-400 text-sm font-semibold block py-1 px-3");
    			add_location(a2, file$o, 35, 12, 1235);
    			add_location(li1, file$o, 34, 10, 1218);
    			attr_dev(a3, "href", "http://blog.creative-tim.com?ref=tws-footer-small");
    			attr_dev(a3, "class", "text-white hover:text-gray-400 text-sm font-semibold block py-1 px-3");
    			add_location(a3, file$o, 43, 12, 1510);
    			add_location(li2, file$o, 42, 10, 1493);
    			attr_dev(a4, "href", "https://github.com/creativetimofficial/vue-tailwind-webapp/blob/master/LICENSE.md?ref=tws-footer-small");
    			attr_dev(a4, "class", "text-white hover:text-gray-400 text-sm font-semibold block py-1 px-3");
    			add_location(a4, file$o, 51, 12, 1768);
    			add_location(li3, file$o, 50, 10, 1751);
    			attr_dev(ul, "class", "flex flex-wrap list-none md:justify-end justify-center");
    			add_location(ul, file$o, 25, 8, 874);
    			attr_dev(div2, "class", "w-full md:w-8/12 px-4");
    			add_location(div2, file$o, 24, 6, 830);
    			attr_dev(div3, "class", "flex flex-wrap items-center md:justify-between justify-center");
    			add_location(div3, file$o, 10, 4, 330);
    			attr_dev(div4, "class", "container mx-auto px-4");
    			add_location(div4, file$o, 8, 2, 238);

    			attr_dev(footer, "class", footer_class_value = "pb-6 " + (/*absolute*/ ctx[0]
    			? "absolute w-full bottom-0 bg-gray-900"
    			: "relative"));

    			add_location(footer, file$o, 5, 0, 146);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, footer, anchor);
    			append_dev(footer, div4);
    			append_dev(div4, hr);
    			append_dev(div4, t0);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			append_dev(div1, div0);
    			append_dev(div0, t1);
    			append_dev(div0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, a0);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			append_dev(div2, ul);
    			append_dev(ul, li0);
    			append_dev(li0, a1);
    			append_dev(ul, t7);
    			append_dev(ul, li1);
    			append_dev(li1, a2);
    			append_dev(ul, t9);
    			append_dev(ul, li2);
    			append_dev(li2, a3);
    			append_dev(ul, t11);
    			append_dev(ul, li3);
    			append_dev(li3, a4);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*absolute*/ 1 && footer_class_value !== (footer_class_value = "pb-6 " + (/*absolute*/ ctx[0]
    			? "absolute w-full bottom-0 bg-gray-900"
    			: "relative"))) {
    				attr_dev(footer, "class", footer_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(footer);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("FooterSmall", slots, []);
    	let date = new Date().getFullYear();
    	let { absolute = false } = $$props;
    	const writable_props = ["absolute"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FooterSmall> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("absolute" in $$props) $$invalidate(0, absolute = $$props.absolute);
    	};

    	$$self.$capture_state = () => ({ date, absolute });

    	$$self.$inject_state = $$props => {
    		if ("date" in $$props) $$invalidate(1, date = $$props.date);
    		if ("absolute" in $$props) $$invalidate(0, absolute = $$props.absolute);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [absolute, date];
    }

    class FooterSmall extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, { absolute: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FooterSmall",
    			options,
    			id: create_fragment$q.name
    		});
    	}

    	get absolute() {
    		throw new Error("<FooterSmall>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set absolute(value) {
    		throw new Error("<FooterSmall>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/views/auth/Login.svelte generated by Svelte v3.26.0 */
    const file$p = "src/views/auth/Login.svelte";

    function create_fragment$r(ctx) {
    	let div15;
    	let div14;
    	let div13;
    	let div9;
    	let div2;
    	let div0;
    	let h6;
    	let t1;
    	let div1;
    	let button0;
    	let img0;
    	let img0_src_value;
    	let t2;
    	let t3;
    	let button1;
    	let img1;
    	let img1_src_value;
    	let t4;
    	let t5;
    	let hr;
    	let t6;
    	let div8;
    	let div3;
    	let small0;
    	let t8;
    	let form;
    	let div4;
    	let label0;
    	let t10;
    	let input0;
    	let t11;
    	let div5;
    	let label1;
    	let t13;
    	let input1;
    	let t14;
    	let div6;
    	let label2;
    	let input2;
    	let t15;
    	let span;
    	let t17;
    	let div7;
    	let button2;
    	let t19;
    	let div12;
    	let div10;
    	let a0;
    	let small1;
    	let t21;
    	let div11;
    	let a1;
    	let small2;
    	let link_action;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div15 = element("div");
    			div14 = element("div");
    			div13 = element("div");
    			div9 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			h6 = element("h6");
    			h6.textContent = "Sign in with";
    			t1 = space();
    			div1 = element("div");
    			button0 = element("button");
    			img0 = element("img");
    			t2 = text("\n              Github");
    			t3 = space();
    			button1 = element("button");
    			img1 = element("img");
    			t4 = text("\n              Google");
    			t5 = space();
    			hr = element("hr");
    			t6 = space();
    			div8 = element("div");
    			div3 = element("div");
    			small0 = element("small");
    			small0.textContent = "Or sign in with credentials";
    			t8 = space();
    			form = element("form");
    			div4 = element("div");
    			label0 = element("label");
    			label0.textContent = "Email";
    			t10 = space();
    			input0 = element("input");
    			t11 = space();
    			div5 = element("div");
    			label1 = element("label");
    			label1.textContent = "Password";
    			t13 = space();
    			input1 = element("input");
    			t14 = space();
    			div6 = element("div");
    			label2 = element("label");
    			input2 = element("input");
    			t15 = space();
    			span = element("span");
    			span.textContent = "Remember me";
    			t17 = space();
    			div7 = element("div");
    			button2 = element("button");
    			button2.textContent = "Sign In";
    			t19 = space();
    			div12 = element("div");
    			div10 = element("div");
    			a0 = element("a");
    			small1 = element("small");
    			small1.textContent = "Forgot password?";
    			t21 = space();
    			div11 = element("div");
    			a1 = element("a");
    			small2 = element("small");
    			small2.textContent = "Create new account";
    			attr_dev(h6, "class", "text-gray-600 text-sm font-bold");
    			add_location(h6, file$p, 15, 12, 589);
    			attr_dev(div0, "class", "text-center mb-3");
    			add_location(div0, file$p, 14, 10, 546);
    			attr_dev(img0, "alt", "...");
    			attr_dev(img0, "class", "w-5 mr-1");
    			if (img0.src !== (img0_src_value = github)) attr_dev(img0, "src", img0_src_value);
    			add_location(img0, file$p, 24, 14, 1072);
    			attr_dev(button0, "class", "bg-white active:bg-gray-100 text-gray-800 font-normal px-4 py-2 rounded outline-none focus:outline-none mr-2 mb-1 uppercase shadow hover:shadow-md inline-flex items-center font-bold text-xs ease-linear transition-all duration-150");
    			attr_dev(button0, "type", "button");
    			add_location(button0, file$p, 20, 12, 756);
    			attr_dev(img1, "alt", "...");
    			attr_dev(img1, "class", "w-5 mr-1");
    			if (img1.src !== (img1_src_value = google)) attr_dev(img1, "src", img1_src_value);
    			add_location(img1, file$p, 31, 14, 1493);
    			attr_dev(button1, "class", "bg-white active:bg-gray-100 text-gray-800 font-normal px-4 py-2 rounded outline-none focus:outline-none mr-1 mb-1 uppercase shadow hover:shadow-md inline-flex items-center font-bold text-xs ease-linear transition-all duration-150");
    			attr_dev(button1, "type", "button");
    			add_location(button1, file$p, 27, 12, 1177);
    			attr_dev(div1, "class", "btn-wrapper text-center");
    			add_location(div1, file$p, 19, 10, 706);
    			attr_dev(hr, "class", "mt-6 border-b-1 border-gray-400");
    			add_location(hr, file$p, 35, 10, 1613);
    			attr_dev(div2, "class", "rounded-t mb-0 px-6 py-6");
    			add_location(div2, file$p, 13, 8, 497);
    			add_location(small0, file$p, 39, 12, 1809);
    			attr_dev(div3, "class", "text-gray-500 text-center mb-3 font-bold");
    			add_location(div3, file$p, 38, 10, 1742);
    			attr_dev(label0, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label0, "for", "grid-email");
    			add_location(label0, file$p, 43, 14, 1947);
    			attr_dev(input0, "id", "grid-email");
    			attr_dev(input0, "type", "email");
    			attr_dev(input0, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			attr_dev(input0, "placeholder", "Email");
    			add_location(input0, file$p, 49, 14, 2139);
    			attr_dev(div4, "class", "relative w-full mb-3");
    			add_location(div4, file$p, 42, 12, 1898);
    			attr_dev(label1, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label1, "for", "grid-password");
    			add_location(label1, file$p, 58, 14, 2529);
    			attr_dev(input1, "id", "grid-password");
    			attr_dev(input1, "type", "password");
    			attr_dev(input1, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			attr_dev(input1, "placeholder", "Password");
    			add_location(input1, file$p, 64, 14, 2727);
    			attr_dev(div5, "class", "relative w-full mb-3");
    			add_location(div5, file$p, 57, 12, 2480);
    			attr_dev(input2, "id", "customCheckLogin");
    			attr_dev(input2, "type", "checkbox");
    			attr_dev(input2, "class", "form-checkbox text-gray-800 ml-1 w-5 h-5 ease-linear transition-all duration-150");
    			add_location(input2, file$p, 73, 16, 3168);
    			attr_dev(span, "class", "ml-2 text-sm font-semibold text-gray-700");
    			add_location(span, file$p, 78, 16, 3391);
    			attr_dev(label2, "class", "inline-flex items-center cursor-pointer");
    			add_location(label2, file$p, 72, 14, 3096);
    			add_location(div6, file$p, 71, 12, 3076);
    			attr_dev(button2, "class", "bg-gray-900 text-white active:bg-gray-700 text-sm font-bold uppercase px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 w-full ease-linear transition-all duration-150");
    			attr_dev(button2, "type", "button");
    			add_location(button2, file$p, 85, 14, 3601);
    			attr_dev(div7, "class", "text-center mt-6");
    			add_location(div7, file$p, 84, 12, 3556);
    			add_location(form, file$p, 41, 10, 1879);
    			attr_dev(div8, "class", "flex-auto px-4 lg:px-10 py-10 pt-0");
    			add_location(div8, file$p, 37, 8, 1683);
    			attr_dev(div9, "class", "relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded-lg bg-gray-300 border-0");
    			add_location(div9, file$p, 10, 6, 363);
    			add_location(small1, file$p, 98, 12, 4168);
    			attr_dev(a0, "href", "#pablo");
    			attr_dev(a0, "class", "text-gray-300");
    			add_location(a0, file$p, 97, 10, 4079);
    			attr_dev(div10, "class", "w-1/2");
    			add_location(div10, file$p, 96, 8, 4049);
    			add_location(small2, file$p, 103, 12, 4348);
    			attr_dev(a1, "href", "/auth/register");
    			attr_dev(a1, "class", "text-gray-300");
    			add_location(a1, file$p, 102, 10, 4279);
    			attr_dev(div11, "class", "w-1/2 text-right");
    			add_location(div11, file$p, 101, 8, 4238);
    			attr_dev(div12, "class", "flex flex-wrap mt-6 relative");
    			add_location(div12, file$p, 95, 6, 3998);
    			attr_dev(div13, "class", "w-full lg:w-4/12 px-4");
    			add_location(div13, file$p, 9, 4, 321);
    			attr_dev(div14, "class", "flex content-center items-center justify-center h-full");
    			add_location(div14, file$p, 8, 2, 248);
    			attr_dev(div15, "class", "container mx-auto px-4 h-full");
    			add_location(div15, file$p, 7, 0, 202);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div15, anchor);
    			append_dev(div15, div14);
    			append_dev(div14, div13);
    			append_dev(div13, div9);
    			append_dev(div9, div2);
    			append_dev(div2, div0);
    			append_dev(div0, h6);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, button0);
    			append_dev(button0, img0);
    			append_dev(button0, t2);
    			append_dev(div1, t3);
    			append_dev(div1, button1);
    			append_dev(button1, img1);
    			append_dev(button1, t4);
    			append_dev(div2, t5);
    			append_dev(div2, hr);
    			append_dev(div9, t6);
    			append_dev(div9, div8);
    			append_dev(div8, div3);
    			append_dev(div3, small0);
    			append_dev(div8, t8);
    			append_dev(div8, form);
    			append_dev(form, div4);
    			append_dev(div4, label0);
    			append_dev(div4, t10);
    			append_dev(div4, input0);
    			append_dev(form, t11);
    			append_dev(form, div5);
    			append_dev(div5, label1);
    			append_dev(div5, t13);
    			append_dev(div5, input1);
    			append_dev(form, t14);
    			append_dev(form, div6);
    			append_dev(div6, label2);
    			append_dev(label2, input2);
    			append_dev(label2, t15);
    			append_dev(label2, span);
    			append_dev(form, t17);
    			append_dev(form, div7);
    			append_dev(div7, button2);
    			append_dev(div13, t19);
    			append_dev(div13, div12);
    			append_dev(div12, div10);
    			append_dev(div10, a0);
    			append_dev(a0, small1);
    			append_dev(div12, t21);
    			append_dev(div12, div11);
    			append_dev(div11, a1);
    			append_dev(a1, small2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(a0, "click", click_handler$5, false, false, false),
    					action_destroyer(link_action = link.call(null, a1))
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div15);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const github = "../assets/img/github.svg";
    const google = "../assets/img/google.svg";
    const click_handler$5 = e => e.preventDefault();

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Login", slots, []);
    	let { location } = $$props;
    	const writable_props = ["location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Login> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({ link, github, google, location });

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [location];
    }

    class Login extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$r, safe_not_equal, { location: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Login",
    			options,
    			id: create_fragment$r.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[0] === undefined && !("location" in props)) {
    			console.warn("<Login> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<Login>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Login>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/views/auth/Register.svelte generated by Svelte v3.26.0 */

    const file$q = "src/views/auth/Register.svelte";

    function create_fragment$s(ctx) {
    	let div13;
    	let div12;
    	let div11;
    	let div10;
    	let div2;
    	let div0;
    	let h6;
    	let t1;
    	let div1;
    	let button0;
    	let img0;
    	let img0_src_value;
    	let t2;
    	let t3;
    	let button1;
    	let img1;
    	let img1_src_value;
    	let t4;
    	let t5;
    	let hr;
    	let t6;
    	let div9;
    	let div3;
    	let small;
    	let t8;
    	let form;
    	let div4;
    	let label0;
    	let t10;
    	let input0;
    	let t11;
    	let div5;
    	let label1;
    	let t13;
    	let input1;
    	let t14;
    	let div6;
    	let label2;
    	let t16;
    	let input2;
    	let t17;
    	let div7;
    	let label3;
    	let input3;
    	let t18;
    	let span;
    	let t19;
    	let a;
    	let t21;
    	let div8;
    	let button2;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div13 = element("div");
    			div12 = element("div");
    			div11 = element("div");
    			div10 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			h6 = element("h6");
    			h6.textContent = "Sign up with";
    			t1 = space();
    			div1 = element("div");
    			button0 = element("button");
    			img0 = element("img");
    			t2 = text("\n              Github");
    			t3 = space();
    			button1 = element("button");
    			img1 = element("img");
    			t4 = text("\n              Google");
    			t5 = space();
    			hr = element("hr");
    			t6 = space();
    			div9 = element("div");
    			div3 = element("div");
    			small = element("small");
    			small.textContent = "Or sign up with credentials";
    			t8 = space();
    			form = element("form");
    			div4 = element("div");
    			label0 = element("label");
    			label0.textContent = "Name";
    			t10 = space();
    			input0 = element("input");
    			t11 = space();
    			div5 = element("div");
    			label1 = element("label");
    			label1.textContent = "Email";
    			t13 = space();
    			input1 = element("input");
    			t14 = space();
    			div6 = element("div");
    			label2 = element("label");
    			label2.textContent = "Password";
    			t16 = space();
    			input2 = element("input");
    			t17 = space();
    			div7 = element("div");
    			label3 = element("label");
    			input3 = element("input");
    			t18 = space();
    			span = element("span");
    			t19 = text("I agree with the\n                  ");
    			a = element("a");
    			a.textContent = "Privacy Policy";
    			t21 = space();
    			div8 = element("div");
    			button2 = element("button");
    			button2.textContent = "Create Account";
    			attr_dev(h6, "class", "text-gray-600 text-sm font-bold");
    			add_location(h6, file$q, 14, 12, 550);
    			attr_dev(div0, "class", "text-center mb-3");
    			add_location(div0, file$q, 13, 10, 507);
    			attr_dev(img0, "alt", "...");
    			attr_dev(img0, "class", "w-5 mr-1");
    			if (img0.src !== (img0_src_value = github$1)) attr_dev(img0, "src", img0_src_value);
    			add_location(img0, file$q, 23, 14, 1033);
    			attr_dev(button0, "class", "bg-white active:bg-gray-100 text-gray-800 font-normal px-4 py-2 rounded outline-none focus:outline-none mr-2 mb-1 uppercase shadow hover:shadow-md inline-flex items-center font-bold text-xs ease-linear transition-all duration-150");
    			attr_dev(button0, "type", "button");
    			add_location(button0, file$q, 19, 12, 717);
    			attr_dev(img1, "alt", "...");
    			attr_dev(img1, "class", "w-5 mr-1");
    			if (img1.src !== (img1_src_value = google$1)) attr_dev(img1, "src", img1_src_value);
    			add_location(img1, file$q, 30, 14, 1454);
    			attr_dev(button1, "class", "bg-white active:bg-gray-100 text-gray-800 font-normal px-4 py-2 rounded outline-none focus:outline-none mr-1 mb-1 uppercase shadow hover:shadow-md inline-flex items-center font-bold text-xs ease-linear transition-all duration-150");
    			attr_dev(button1, "type", "button");
    			add_location(button1, file$q, 26, 12, 1138);
    			attr_dev(div1, "class", "btn-wrapper text-center");
    			add_location(div1, file$q, 18, 10, 667);
    			attr_dev(hr, "class", "mt-6 border-b-1 border-gray-400");
    			add_location(hr, file$q, 34, 10, 1574);
    			attr_dev(div2, "class", "rounded-t mb-0 px-6 py-6");
    			add_location(div2, file$q, 12, 8, 458);
    			add_location(small, file$q, 38, 12, 1770);
    			attr_dev(div3, "class", "text-gray-500 text-center mb-3 font-bold");
    			add_location(div3, file$q, 37, 10, 1703);
    			attr_dev(label0, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label0, "for", "grid-name");
    			add_location(label0, file$q, 42, 14, 1908);
    			attr_dev(input0, "id", "grid-name");
    			attr_dev(input0, "type", "email");
    			attr_dev(input0, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			attr_dev(input0, "placeholder", "Name");
    			add_location(input0, file$q, 48, 14, 2098);
    			attr_dev(div4, "class", "relative w-full mb-3");
    			add_location(div4, file$q, 41, 12, 1859);
    			attr_dev(label1, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label1, "for", "grid-email");
    			add_location(label1, file$q, 57, 14, 2486);
    			attr_dev(input1, "id", "grid-email");
    			attr_dev(input1, "type", "email");
    			attr_dev(input1, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			attr_dev(input1, "placeholder", "Email");
    			add_location(input1, file$q, 63, 14, 2678);
    			attr_dev(div5, "class", "relative w-full mb-3");
    			add_location(div5, file$q, 56, 12, 2437);
    			attr_dev(label2, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label2, "for", "grid-password");
    			add_location(label2, file$q, 72, 14, 3068);
    			attr_dev(input2, "id", "grid-password");
    			attr_dev(input2, "type", "password");
    			attr_dev(input2, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			attr_dev(input2, "placeholder", "Password");
    			add_location(input2, file$q, 78, 14, 3266);
    			attr_dev(div6, "class", "relative w-full mb-3");
    			add_location(div6, file$q, 71, 12, 3019);
    			attr_dev(input3, "id", "customCheckLogin");
    			attr_dev(input3, "type", "checkbox");
    			attr_dev(input3, "class", "form-checkbox text-gray-800 ml-1 w-5 h-5 ease-linear transition-all duration-150");
    			add_location(input3, file$q, 88, 16, 3708);
    			attr_dev(a, "href", "#pablo");
    			attr_dev(a, "class", "text-red-500");
    			add_location(a, file$q, 95, 18, 4040);
    			attr_dev(span, "class", "ml-2 text-sm font-semibold text-gray-700");
    			add_location(span, file$q, 93, 16, 3931);
    			attr_dev(label3, "class", "inline-flex items-center cursor-pointer");
    			add_location(label3, file$q, 87, 14, 3636);
    			add_location(div7, file$q, 86, 12, 3616);
    			attr_dev(button2, "class", "bg-gray-900 text-white active:bg-gray-700 text-sm font-bold uppercase px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 w-full ease-linear transition-all duration-150");
    			attr_dev(button2, "type", "button");
    			add_location(button2, file$q, 103, 14, 4298);
    			attr_dev(div8, "class", "text-center mt-6");
    			add_location(div8, file$q, 102, 12, 4253);
    			add_location(form, file$q, 40, 10, 1840);
    			attr_dev(div9, "class", "flex-auto px-4 lg:px-10 py-10 pt-0");
    			add_location(div9, file$q, 36, 8, 1644);
    			attr_dev(div10, "class", "relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded-lg bg-gray-300 border-0");
    			add_location(div10, file$q, 9, 6, 324);
    			attr_dev(div11, "class", "w-full lg:w-6/12 px-4");
    			add_location(div11, file$q, 8, 4, 282);
    			attr_dev(div12, "class", "flex content-center items-center justify-center h-full");
    			add_location(div12, file$q, 7, 2, 209);
    			attr_dev(div13, "class", "container mx-auto px-4 h-full");
    			add_location(div13, file$q, 6, 0, 163);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div13, anchor);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, div2);
    			append_dev(div2, div0);
    			append_dev(div0, h6);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, button0);
    			append_dev(button0, img0);
    			append_dev(button0, t2);
    			append_dev(div1, t3);
    			append_dev(div1, button1);
    			append_dev(button1, img1);
    			append_dev(button1, t4);
    			append_dev(div2, t5);
    			append_dev(div2, hr);
    			append_dev(div10, t6);
    			append_dev(div10, div9);
    			append_dev(div9, div3);
    			append_dev(div3, small);
    			append_dev(div9, t8);
    			append_dev(div9, form);
    			append_dev(form, div4);
    			append_dev(div4, label0);
    			append_dev(div4, t10);
    			append_dev(div4, input0);
    			append_dev(form, t11);
    			append_dev(form, div5);
    			append_dev(div5, label1);
    			append_dev(div5, t13);
    			append_dev(div5, input1);
    			append_dev(form, t14);
    			append_dev(form, div6);
    			append_dev(div6, label2);
    			append_dev(div6, t16);
    			append_dev(div6, input2);
    			append_dev(form, t17);
    			append_dev(form, div7);
    			append_dev(div7, label3);
    			append_dev(label3, input3);
    			append_dev(label3, t18);
    			append_dev(label3, span);
    			append_dev(span, t19);
    			append_dev(span, a);
    			append_dev(form, t21);
    			append_dev(form, div8);
    			append_dev(div8, button2);

    			if (!mounted) {
    				dispose = listen_dev(a, "click", click_handler$6, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div13);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const github$1 = "../assets/img/github.svg";
    const google$1 = "../assets/img/google.svg";
    const click_handler$6 = e => e.preventDefault();

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Register", slots, []);
    	let { location } = $$props;
    	const writable_props = ["location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Register> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({ github: github$1, google: google$1, location });

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [location];
    }

    class Register extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$s, create_fragment$s, safe_not_equal, { location: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Register",
    			options,
    			id: create_fragment$s.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[0] === undefined && !("location" in props)) {
    			console.warn("<Register> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<Register>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Register>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/layouts/Auth.svelte generated by Svelte v3.26.0 */
    const file$r = "src/layouts/Auth.svelte";

    // (19:6) <Router url="auth">
    function create_default_slot$1(ctx) {
    	let route0;
    	let t;
    	let route1;
    	let current;

    	route0 = new Route({
    			props: { path: "login", component: Login },
    			$$inline: true
    		});

    	route1 = new Route({
    			props: { path: "register", component: Register },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route0.$$.fragment);
    			t = space();
    			create_component(route1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(route0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(route1, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(route1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(19:6) <Router url=\\\"auth\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$t(ctx) {
    	let div1;
    	let authnavbar;
    	let t0;
    	let main;
    	let section;
    	let div0;
    	let t1;
    	let router;
    	let t2;
    	let footersmall;
    	let current;
    	authnavbar = new AuthNavbar({ $$inline: true });

    	router = new Router({
    			props: {
    				url: "auth",
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	footersmall = new FooterSmall({
    			props: { absolute: "true" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(authnavbar.$$.fragment);
    			t0 = space();
    			main = element("main");
    			section = element("section");
    			div0 = element("div");
    			t1 = space();
    			create_component(router.$$.fragment);
    			t2 = space();
    			create_component(footersmall.$$.fragment);
    			attr_dev(div0, "class", "absolute top-0 w-full h-full bg-gray-900 bg-no-repeat bg-full");
    			set_style(div0, "background-image", "url(" + registerBg2 + ")");
    			add_location(div0, file$r, 14, 6, 509);
    			attr_dev(section, "class", "relative w-full h-full py-40 min-h-screen");
    			add_location(section, file$r, 13, 4, 443);
    			add_location(main, file$r, 12, 2, 432);
    			add_location(div1, file$r, 10, 0, 407);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(authnavbar, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, main);
    			append_dev(main, section);
    			append_dev(section, div0);
    			append_dev(section, t1);
    			mount_component(router, section, null);
    			append_dev(section, t2);
    			mount_component(footersmall, section, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const router_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				router_changes.$$scope = { dirty, ctx };
    			}

    			router.$set(router_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(authnavbar.$$.fragment, local);
    			transition_in(router.$$.fragment, local);
    			transition_in(footersmall.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(authnavbar.$$.fragment, local);
    			transition_out(router.$$.fragment, local);
    			transition_out(footersmall.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(authnavbar);
    			destroy_component(router);
    			destroy_component(footersmall);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const registerBg2 = "../assets/img/register_bg_2.png";

    function instance$t($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Auth", slots, []);
    	let { auth = "" } = $$props;
    	let { location } = $$props;
    	const writable_props = ["auth", "location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Auth> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("auth" in $$props) $$invalidate(0, auth = $$props.auth);
    		if ("location" in $$props) $$invalidate(1, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({
    		Router,
    		Route,
    		AuthNavbar,
    		FooterSmall,
    		Login,
    		Register,
    		registerBg2,
    		auth,
    		location
    	});

    	$$self.$inject_state = $$props => {
    		if ("auth" in $$props) $$invalidate(0, auth = $$props.auth);
    		if ("location" in $$props) $$invalidate(1, location = $$props.location);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [auth, location];
    }

    class Auth extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$t, create_fragment$t, safe_not_equal, { auth: 0, location: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Auth",
    			options,
    			id: create_fragment$t.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[1] === undefined && !("location" in props)) {
    			console.warn("<Auth> was created without expected prop 'location'");
    		}
    	}

    	get auth() {
    		throw new Error("<Auth>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set auth(value) {
    		throw new Error("<Auth>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get location() {
    		throw new Error("<Auth>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Auth>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Dropdowns/IndexDropdown.svelte generated by Svelte v3.26.0 */
    const file$s = "src/components/Dropdowns/IndexDropdown.svelte";

    function create_fragment$u(ctx) {
    	let div3;
    	let a0;
    	let t1;
    	let div2;
    	let span0;
    	let t3;
    	let a1;
    	let link_action;
    	let t5;
    	let a2;
    	let link_action_1;
    	let t7;
    	let a3;
    	let link_action_2;
    	let t9;
    	let a4;
    	let link_action_3;
    	let t11;
    	let div0;
    	let t12;
    	let span1;
    	let t14;
    	let a5;
    	let link_action_4;
    	let t16;
    	let a6;
    	let link_action_5;
    	let t18;
    	let div1;
    	let t19;
    	let span2;
    	let t21;
    	let a7;
    	let link_action_6;
    	let t23;
    	let a8;
    	let link_action_7;
    	let div2_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			a0 = element("a");
    			a0.textContent = "Demo Pages";
    			t1 = space();
    			div2 = element("div");
    			span0 = element("span");
    			span0.textContent = "Admin Layout";
    			t3 = space();
    			a1 = element("a");
    			a1.textContent = "Dashboard";
    			t5 = space();
    			a2 = element("a");
    			a2.textContent = "Settings";
    			t7 = space();
    			a3 = element("a");
    			a3.textContent = "Tables";
    			t9 = space();
    			a4 = element("a");
    			a4.textContent = "Maps";
    			t11 = space();
    			div0 = element("div");
    			t12 = space();
    			span1 = element("span");
    			span1.textContent = "Auth Layout";
    			t14 = space();
    			a5 = element("a");
    			a5.textContent = "Login";
    			t16 = space();
    			a6 = element("a");
    			a6.textContent = "Register";
    			t18 = space();
    			div1 = element("div");
    			t19 = space();
    			span2 = element("span");
    			span2.textContent = "No Layout";
    			t21 = space();
    			a7 = element("a");
    			a7.textContent = "Landing";
    			t23 = space();
    			a8 = element("a");
    			a8.textContent = "Profile";
    			attr_dev(a0, "class", "hover:text-gray-600 text-gray-800 px-3 py-2 flex items-center text-xs uppercase font-bold");
    			attr_dev(a0, "href", "#pablo");
    			add_location(a0, file$s, 21, 2, 531);
    			attr_dev(span0, "class", "text-sm pt-2 pb-0 px-4 font-bold block w-full whitespace-no-wrap bg-transparent text-gray-500");
    			add_location(span0, file$s, 33, 4, 937);
    			attr_dev(a1, "href", "/admin/dashboard");
    			attr_dev(a1, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a1, file$s, 38, 4, 1092);
    			attr_dev(a2, "href", "/admin/settings");
    			attr_dev(a2, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a2, file$s, 45, 4, 1280);
    			attr_dev(a3, "href", "/admin/tables");
    			attr_dev(a3, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a3, file$s, 52, 4, 1466);
    			attr_dev(a4, "href", "/admin/maps");
    			attr_dev(a4, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a4, file$s, 59, 4, 1648);
    			attr_dev(div0, "class", "h-0 mx-4 my-2 border border-solid border-gray-200");
    			add_location(div0, file$s, 66, 4, 1826);
    			attr_dev(span1, "class", "text-sm pt-2 pb-0 px-4 font-bold block w-full whitespace-no-wrap bg-transparent text-gray-500");
    			add_location(span1, file$s, 67, 4, 1896);
    			attr_dev(a5, "href", "/auth/login");
    			attr_dev(a5, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a5, file$s, 72, 4, 2050);
    			attr_dev(a6, "href", "/auth/register");
    			attr_dev(a6, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a6, file$s, 79, 4, 2229);
    			attr_dev(div1, "class", "h-0 mx-4 my-2 border border-solid border-gray-200");
    			add_location(div1, file$s, 86, 4, 2414);
    			attr_dev(span2, "class", "text-sm pt-2 pb-0 px-4 font-bold block w-full whitespace-no-wrap bg-transparent text-gray-500");
    			add_location(span2, file$s, 87, 4, 2484);
    			attr_dev(a7, "href", "/landing");
    			attr_dev(a7, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a7, file$s, 92, 4, 2636);
    			attr_dev(a8, "href", "/profile");
    			attr_dev(a8, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800");
    			add_location(a8, file$s, 99, 4, 2814);
    			attr_dev(div2, "class", div2_class_value = "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48 " + (/*dropdownPopoverShow*/ ctx[0] ? "block" : "hidden"));
    			add_location(div2, file$s, 29, 2, 747);
    			add_location(div3, file$s, 20, 0, 523);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, a0);
    			/*a0_binding*/ ctx[4](a0);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, span0);
    			append_dev(div2, t3);
    			append_dev(div2, a1);
    			append_dev(div2, t5);
    			append_dev(div2, a2);
    			append_dev(div2, t7);
    			append_dev(div2, a3);
    			append_dev(div2, t9);
    			append_dev(div2, a4);
    			append_dev(div2, t11);
    			append_dev(div2, div0);
    			append_dev(div2, t12);
    			append_dev(div2, span1);
    			append_dev(div2, t14);
    			append_dev(div2, a5);
    			append_dev(div2, t16);
    			append_dev(div2, a6);
    			append_dev(div2, t18);
    			append_dev(div2, div1);
    			append_dev(div2, t19);
    			append_dev(div2, span2);
    			append_dev(div2, t21);
    			append_dev(div2, a7);
    			append_dev(div2, t23);
    			append_dev(div2, a8);
    			/*div2_binding*/ ctx[5](div2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(a0, "click", /*toggleDropdown*/ ctx[3], false, false, false),
    					action_destroyer(link_action = link.call(null, a1)),
    					action_destroyer(link_action_1 = link.call(null, a2)),
    					action_destroyer(link_action_2 = link.call(null, a3)),
    					action_destroyer(link_action_3 = link.call(null, a4)),
    					action_destroyer(link_action_4 = link.call(null, a5)),
    					action_destroyer(link_action_5 = link.call(null, a6)),
    					action_destroyer(link_action_6 = link.call(null, a7)),
    					action_destroyer(link_action_7 = link.call(null, a8))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*dropdownPopoverShow*/ 1 && div2_class_value !== (div2_class_value = "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48 " + (/*dropdownPopoverShow*/ ctx[0] ? "block" : "hidden"))) {
    				attr_dev(div2, "class", div2_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			/*a0_binding*/ ctx[4](null);
    			/*div2_binding*/ ctx[5](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("IndexDropdown", slots, []);
    	let dropdownPopoverShow = false;
    	let btnDropdownRef;
    	let popoverDropdownRef;

    	const toggleDropdown = event => {
    		event.preventDefault();

    		if (dropdownPopoverShow) {
    			$$invalidate(0, dropdownPopoverShow = false);
    		} else {
    			$$invalidate(0, dropdownPopoverShow = true);
    			createPopper(btnDropdownRef, popoverDropdownRef, { placement: "bottom-start" });
    		}
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<IndexDropdown> was created with unknown prop '${key}'`);
    	});

    	function a0_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			btnDropdownRef = $$value;
    			$$invalidate(1, btnDropdownRef);
    		});
    	}

    	function div2_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			popoverDropdownRef = $$value;
    			$$invalidate(2, popoverDropdownRef);
    		});
    	}

    	$$self.$capture_state = () => ({
    		link,
    		createPopper,
    		dropdownPopoverShow,
    		btnDropdownRef,
    		popoverDropdownRef,
    		toggleDropdown
    	});

    	$$self.$inject_state = $$props => {
    		if ("dropdownPopoverShow" in $$props) $$invalidate(0, dropdownPopoverShow = $$props.dropdownPopoverShow);
    		if ("btnDropdownRef" in $$props) $$invalidate(1, btnDropdownRef = $$props.btnDropdownRef);
    		if ("popoverDropdownRef" in $$props) $$invalidate(2, popoverDropdownRef = $$props.popoverDropdownRef);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dropdownPopoverShow,
    		btnDropdownRef,
    		popoverDropdownRef,
    		toggleDropdown,
    		a0_binding,
    		div2_binding
    	];
    }

    class IndexDropdown extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$u, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "IndexDropdown",
    			options,
    			id: create_fragment$u.name
    		});
    	}
    }

    /* src/components/Navbars/IndexNavbar.svelte generated by Svelte v3.26.0 */
    const file$t = "src/components/Navbars/IndexNavbar.svelte";

    function create_fragment$v(ctx) {
    	let nav;
    	let div2;
    	let div0;
    	let a0;
    	let link_action;
    	let t1;
    	let button0;
    	let i0;
    	let t2;
    	let div1;
    	let ul0;
    	let li0;
    	let a1;
    	let i1;
    	let t3;
    	let t4;
    	let ul1;
    	let li1;
    	let indexdropdown;
    	let t5;
    	let li2;
    	let a2;
    	let i2;
    	let t6;
    	let span0;
    	let t8;
    	let li3;
    	let a3;
    	let i3;
    	let t9;
    	let span1;
    	let t11;
    	let li4;
    	let a4;
    	let i4;
    	let t12;
    	let span2;
    	let t14;
    	let li5;
    	let button1;
    	let i5;
    	let t15;
    	let div1_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	indexdropdown = new IndexDropdown({ $$inline: true });

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			div2 = element("div");
    			div0 = element("div");
    			a0 = element("a");
    			a0.textContent = "Tailwind WebApp Svelte";
    			t1 = space();
    			button0 = element("button");
    			i0 = element("i");
    			t2 = space();
    			div1 = element("div");
    			ul0 = element("ul");
    			li0 = element("li");
    			a1 = element("a");
    			i1 = element("i");
    			t3 = text("\n            Docs");
    			t4 = space();
    			ul1 = element("ul");
    			li1 = element("li");
    			create_component(indexdropdown.$$.fragment);
    			t5 = space();
    			li2 = element("li");
    			a2 = element("a");
    			i2 = element("i");
    			t6 = space();
    			span0 = element("span");
    			span0.textContent = "Share";
    			t8 = space();
    			li3 = element("li");
    			a3 = element("a");
    			i3 = element("i");
    			t9 = space();
    			span1 = element("span");
    			span1.textContent = "Tweet";
    			t11 = space();
    			li4 = element("li");
    			a4 = element("a");
    			i4 = element("i");
    			t12 = space();
    			span2 = element("span");
    			span2.textContent = "Star";
    			t14 = space();
    			li5 = element("li");
    			button1 = element("button");
    			i5 = element("i");
    			t15 = text(" Download");
    			attr_dev(a0, "class", "text-gray-800 text-sm font-bold leading-relaxed inline-block mr-4 py-2 whitespace-no-wrap uppercase");
    			attr_dev(a0, "href", "/");
    			add_location(a0, file$t, 17, 6, 566);
    			attr_dev(i0, "class", "fas fa-bars");
    			add_location(i0, file$t, 29, 8, 1028);
    			attr_dev(button0, "class", "cursor-pointer text-xl leading-none px-3 py-1 border border-solid border-transparent rounded bg-transparent block lg:hidden outline-none focus:outline-none");
    			attr_dev(button0, "type", "button");
    			add_location(button0, file$t, 24, 6, 775);
    			attr_dev(div0, "class", "w-full relative flex justify-between lg:w-auto lg:static lg:block lg:justify-start");
    			add_location(div0, file$t, 14, 4, 452);
    			attr_dev(i1, "class", "text-gray-500 far fa-file-alt text-lg leading-lg mr-2");
    			add_location(i1, file$t, 42, 12, 1572);
    			attr_dev(a1, "class", "hover:text-gray-600 text-gray-800 px-3 py-2 flex items-center text-xs uppercase font-bold");
    			attr_dev(a1, "href", "https://www.creative-tim.com/learning-lab/tailwind/svelte/overview/webapp?ref=tws-index-navbar");
    			add_location(a1, file$t, 38, 10, 1321);
    			attr_dev(li0, "class", "flex items-center");
    			add_location(li0, file$t, 37, 8, 1280);
    			attr_dev(ul0, "class", "flex flex-col lg:flex-row list-none mr-auto");
    			add_location(ul0, file$t, 36, 6, 1215);
    			attr_dev(li1, "class", "flex items-center");
    			add_location(li1, file$t, 48, 8, 1772);
    			attr_dev(i2, "class", "text-gray-500 fab fa-facebook text-lg leading-lg");
    			add_location(i2, file$t, 57, 12, 2191);
    			attr_dev(span0, "class", "lg:hidden inline-block ml-2");
    			add_location(span0, file$t, 58, 12, 2266);
    			attr_dev(a2, "class", "hover:text-gray-600 text-gray-800 px-3 py-2 flex items-center text-xs uppercase font-bold");
    			attr_dev(a2, "href", "https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdemos.creative-tim.com%2Fvue-tailwind-webapp%2F%23%2F");
    			attr_dev(a2, "target", "_blank");
    			add_location(a2, file$t, 52, 10, 1894);
    			attr_dev(li2, "class", "flex items-center");
    			add_location(li2, file$t, 51, 8, 1853);
    			attr_dev(i3, "class", "text-gray-500 fab fa-twitter text-lg leading-lg");
    			add_location(i3, file$t, 68, 12, 2957);
    			attr_dev(span1, "class", "lg:hidden inline-block ml-2");
    			add_location(span1, file$t, 69, 12, 3031);
    			attr_dev(a3, "class", "hover:text-gray-600 text-gray-800 px-3 py-2 flex items-center text-xs uppercase font-bold");
    			attr_dev(a3, "href", "https://twitter.com/intent/tweet?url=https%3A%2F%2Fdemos.creative-tim.com%2Ftailwind-webapp-svelte%2F&text=Start%20your%20development%20with%20a%20Free%20Tailwind%20CSS%20and%20Svelte%20UI%20Kit%20and%20Admin.%20Let%20Tailwind%20Webapp%20Svelte%20amaze%20you%20with%20its%20cool%20features%20and%20build%20tools%20and%20get%20your%20project%20to%20a%20whole%20new%20level.");
    			attr_dev(a3, "target", "_blank");
    			add_location(a3, file$t, 63, 10, 2400);
    			attr_dev(li3, "class", "flex items-center");
    			add_location(li3, file$t, 62, 8, 2359);
    			attr_dev(i4, "class", "text-gray-500 fab fa-github text-lg leading-lg");
    			add_location(i4, file$t, 79, 12, 3429);
    			attr_dev(span2, "class", "lg:hidden inline-block ml-2");
    			add_location(span2, file$t, 80, 12, 3502);
    			attr_dev(a4, "class", "hover:text-gray-600 text-gray-800 px-3 py-2 flex items-center text-xs uppercase font-bold");
    			attr_dev(a4, "href", "https://github.com/creativetimofficial/vue-tailwind-webapp?ref=tws-index-navbar");
    			attr_dev(a4, "target", "_blank");
    			add_location(a4, file$t, 74, 10, 3165);
    			attr_dev(li4, "class", "flex items-center");
    			add_location(li4, file$t, 73, 8, 3124);
    			attr_dev(i5, "class", "fas fa-arrow-alt-circle-down");
    			add_location(i5, file$t, 89, 12, 3920);
    			attr_dev(button1, "class", "bg-red-500 text-white active:bg-red-600 text-xs font-bold uppercase px-4 py-2 rounded shadow hover:shadow-lg outline-none focus:outline-none lg:mr-1 lg:mb-0 ml-3 mb-3 ease-linear transition-all duration-150");
    			attr_dev(button1, "type", "button");
    			add_location(button1, file$t, 85, 10, 3635);
    			attr_dev(li5, "class", "flex items-center");
    			add_location(li5, file$t, 84, 8, 3594);
    			attr_dev(ul1, "class", "flex flex-col lg:flex-row list-none lg:ml-auto");
    			add_location(ul1, file$t, 47, 6, 1704);
    			attr_dev(div1, "class", div1_class_value = "lg:flex flex-grow items-center " + (/*navbarOpen*/ ctx[0] ? "block" : "hidden"));
    			attr_dev(div1, "id", "example-navbar-warning");
    			add_location(div1, file$t, 32, 4, 1087);
    			attr_dev(div2, "class", "container px-4 mx-auto flex flex-wrap items-center justify-between");
    			add_location(div2, file$t, 11, 2, 360);
    			attr_dev(nav, "class", "top-0 fixed z-50 w-full flex flex-wrap items-center justify-between px-2 py-3 navbar-expand-lg bg-white shadow");
    			add_location(nav, file$t, 8, 0, 230);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div2);
    			append_dev(div2, div0);
    			append_dev(div0, a0);
    			append_dev(div0, t1);
    			append_dev(div0, button0);
    			append_dev(button0, i0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, ul0);
    			append_dev(ul0, li0);
    			append_dev(li0, a1);
    			append_dev(a1, i1);
    			append_dev(a1, t3);
    			append_dev(div1, t4);
    			append_dev(div1, ul1);
    			append_dev(ul1, li1);
    			mount_component(indexdropdown, li1, null);
    			append_dev(ul1, t5);
    			append_dev(ul1, li2);
    			append_dev(li2, a2);
    			append_dev(a2, i2);
    			append_dev(a2, t6);
    			append_dev(a2, span0);
    			append_dev(ul1, t8);
    			append_dev(ul1, li3);
    			append_dev(li3, a3);
    			append_dev(a3, i3);
    			append_dev(a3, t9);
    			append_dev(a3, span1);
    			append_dev(ul1, t11);
    			append_dev(ul1, li4);
    			append_dev(li4, a4);
    			append_dev(a4, i4);
    			append_dev(a4, t12);
    			append_dev(a4, span2);
    			append_dev(ul1, t14);
    			append_dev(ul1, li5);
    			append_dev(li5, button1);
    			append_dev(button1, i5);
    			append_dev(button1, t15);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(link_action = link.call(null, a0)),
    					listen_dev(button0, "click", /*setNavbarOpen*/ ctx[1], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*navbarOpen*/ 1 && div1_class_value !== (div1_class_value = "lg:flex flex-grow items-center " + (/*navbarOpen*/ ctx[0] ? "block" : "hidden"))) {
    				attr_dev(div1, "class", div1_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(indexdropdown.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(indexdropdown.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			destroy_component(indexdropdown);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("IndexNavbar", slots, []);
    	let navbarOpen = false;

    	function setNavbarOpen() {
    		$$invalidate(0, navbarOpen = !navbarOpen);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<IndexNavbar> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		link,
    		IndexDropdown,
    		navbarOpen,
    		setNavbarOpen
    	});

    	$$self.$inject_state = $$props => {
    		if ("navbarOpen" in $$props) $$invalidate(0, navbarOpen = $$props.navbarOpen);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [navbarOpen, setNavbarOpen];
    }

    class IndexNavbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$v, create_fragment$v, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "IndexNavbar",
    			options,
    			id: create_fragment$v.name
    		});
    	}
    }

    /* src/components/Footers/Footer.svelte generated by Svelte v3.26.0 */

    const file$u = "src/components/Footers/Footer.svelte";

    function create_fragment$w(ctx) {
    	let footer;
    	let div0;
    	let svg;
    	let polygon;
    	let t0;
    	let div7;
    	let div6;
    	let div1;
    	let h4;
    	let t2;
    	let h5;
    	let t4;
    	let div5;
    	let div4;
    	let div2;
    	let span0;
    	let t6;
    	let ul0;
    	let li0;
    	let a0;
    	let t8;
    	let li1;
    	let a1;
    	let t10;
    	let li2;
    	let a2;
    	let t12;
    	let li3;
    	let a3;
    	let t14;
    	let div3;
    	let span1;
    	let t16;
    	let ul1;
    	let li4;
    	let a4;
    	let t18;
    	let li5;
    	let a5;
    	let t20;
    	let li6;
    	let a6;

    	const block = {
    		c: function create() {
    			footer = element("footer");
    			div0 = element("div");
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div7 = element("div");
    			div6 = element("div");
    			div1 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Let's keep in touch!";
    			t2 = space();
    			h5 = element("h5");
    			h5.textContent = "Find us on any of these platforms, we respond 1-2 business days.";
    			t4 = space();
    			div5 = element("div");
    			div4 = element("div");
    			div2 = element("div");
    			span0 = element("span");
    			span0.textContent = "Useful Links";
    			t6 = space();
    			ul0 = element("ul");
    			li0 = element("li");
    			a0 = element("a");
    			a0.textContent = "About Us";
    			t8 = space();
    			li1 = element("li");
    			a1 = element("a");
    			a1.textContent = "Blog";
    			t10 = space();
    			li2 = element("li");
    			a2 = element("a");
    			a2.textContent = "Github";
    			t12 = space();
    			li3 = element("li");
    			a3 = element("a");
    			a3.textContent = "Free Products";
    			t14 = space();
    			div3 = element("div");
    			span1 = element("span");
    			span1.textContent = "Other Resources";
    			t16 = space();
    			ul1 = element("ul");
    			li4 = element("li");
    			a4 = element("a");
    			a4.textContent = "Terms & Conditions";
    			t18 = space();
    			li5 = element("li");
    			a5 = element("a");
    			a5.textContent = "Privacy Policy";
    			t20 = space();
    			li6 = element("li");
    			a6 = element("a");
    			a6.textContent = "Contact Us";
    			attr_dev(polygon, "class", "text-gray-300 fill-current");
    			attr_dev(polygon, "points", "2560 0 2560 100 0 100");
    			add_location(polygon, file$u, 14, 6, 422);
    			attr_dev(svg, "class", "absolute bottom-0 overflow-hidden");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			attr_dev(svg, "version", "1.1");
    			attr_dev(svg, "viewBox", "0 0 2560 100");
    			attr_dev(svg, "x", "0");
    			attr_dev(svg, "y", "0");
    			add_location(svg, file$u, 5, 4, 210);
    			attr_dev(div0, "class", "bottom-auto top-0 left-0 right-0 w-full absolute pointer-events-none overflow-hidden -mt-20 h-20");
    			set_style(div0, "transform", "translateZ(0)");
    			add_location(div0, file$u, 1, 2, 50);
    			attr_dev(h4, "class", "text-3xl font-semibold");
    			add_location(h4, file$u, 23, 8, 698);
    			attr_dev(h5, "class", "text-lg mt-0 mb-2 text-gray-700");
    			add_location(h5, file$u, 24, 8, 767);
    			attr_dev(div1, "class", "w-full lg:w-6/12 px-4");
    			add_location(div1, file$u, 22, 6, 654);
    			attr_dev(span0, "class", "block uppercase text-gray-600 text-sm font-semibold mb-2");
    			add_location(span0, file$u, 31, 12, 1074);
    			attr_dev(a0, "class", "text-gray-700 hover:text-gray-900 font-semibold block pb-2 text-sm");
    			attr_dev(a0, "href", "https://www.creative-tim.com/presentation?ref=tws-footer");
    			add_location(a0, file$u, 38, 16, 1294);
    			add_location(li0, file$u, 37, 14, 1273);
    			attr_dev(a1, "class", "text-gray-700 hover:text-gray-900 font-semibold block pb-2 text-sm");
    			attr_dev(a1, "href", "https://blog.creative-tim.com?ref=tws-footer");
    			add_location(a1, file$u, 46, 16, 1593);
    			add_location(li1, file$u, 45, 14, 1572);
    			attr_dev(a2, "class", "text-gray-700 hover:text-gray-900 font-semibold block pb-2 text-sm");
    			attr_dev(a2, "href", "https://www.github.com/creativetimofficial?ref=tws-footer");
    			add_location(a2, file$u, 54, 16, 1876);
    			add_location(li2, file$u, 53, 14, 1855);
    			attr_dev(a3, "class", "text-gray-700 hover:text-gray-900 font-semibold block pb-2 text-sm");
    			attr_dev(a3, "href", "https://www.creative-tim.com/bootstrap-themes/free?ref=tws-footer");
    			add_location(a3, file$u, 62, 16, 2174);
    			add_location(li3, file$u, 61, 14, 2153);
    			attr_dev(ul0, "class", "list-unstyled");
    			add_location(ul0, file$u, 36, 12, 1232);
    			attr_dev(div2, "class", "w-full lg:w-4/12 px-4 ml-auto");
    			add_location(div2, file$u, 30, 10, 1018);
    			attr_dev(span1, "class", "block uppercase text-gray-600 text-sm font-semibold mb-2");
    			add_location(span1, file$u, 72, 12, 2545);
    			attr_dev(a4, "class", "text-gray-700 hover:text-gray-900 font-semibold block pb-2 text-sm");
    			attr_dev(a4, "href", "https://creative-tim.com/terms?ref=tws-footer");
    			add_location(a4, file$u, 79, 16, 2768);
    			add_location(li4, file$u, 78, 14, 2747);
    			attr_dev(a5, "class", "text-gray-700 hover:text-gray-900 font-semibold block pb-2 text-sm");
    			attr_dev(a5, "href", "https://creative-tim.com/privacy?ref=tws-footer");
    			add_location(a5, file$u, 87, 16, 3066);
    			add_location(li5, file$u, 86, 14, 3045);
    			attr_dev(a6, "class", "text-gray-700 hover:text-gray-900 font-semibold block pb-2 text-sm");
    			attr_dev(a6, "href", "https://creative-tim.com/contact-us?ref=tws-footer");
    			add_location(a6, file$u, 95, 16, 3362);
    			add_location(li6, file$u, 94, 14, 3341);
    			attr_dev(ul1, "class", "list-unstyled");
    			add_location(ul1, file$u, 77, 12, 2706);
    			attr_dev(div3, "class", "w-full lg:w-4/12 px-4");
    			add_location(div3, file$u, 71, 10, 2497);
    			attr_dev(div4, "class", "flex flex-wrap items-top mb-6");
    			add_location(div4, file$u, 29, 8, 964);
    			attr_dev(div5, "class", "w-full lg:w-6/12 px-4");
    			add_location(div5, file$u, 28, 6, 920);
    			attr_dev(div6, "class", "flex flex-wrap text-center lg:text-left");
    			add_location(div6, file$u, 21, 4, 594);
    			attr_dev(div7, "class", "container mx-auto px-4");
    			add_location(div7, file$u, 20, 2, 553);
    			attr_dev(footer, "class", "relative bg-gray-300 pt-8 pb-6");
    			add_location(footer, file$u, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, footer, anchor);
    			append_dev(footer, div0);
    			append_dev(div0, svg);
    			append_dev(svg, polygon);
    			append_dev(footer, t0);
    			append_dev(footer, div7);
    			append_dev(div7, div6);
    			append_dev(div6, div1);
    			append_dev(div1, h4);
    			append_dev(div1, t2);
    			append_dev(div1, h5);
    			append_dev(div6, t4);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div2);
    			append_dev(div2, span0);
    			append_dev(div2, t6);
    			append_dev(div2, ul0);
    			append_dev(ul0, li0);
    			append_dev(li0, a0);
    			append_dev(ul0, t8);
    			append_dev(ul0, li1);
    			append_dev(li1, a1);
    			append_dev(ul0, t10);
    			append_dev(ul0, li2);
    			append_dev(li2, a2);
    			append_dev(ul0, t12);
    			append_dev(ul0, li3);
    			append_dev(li3, a3);
    			append_dev(div4, t14);
    			append_dev(div4, div3);
    			append_dev(div3, span1);
    			append_dev(div3, t16);
    			append_dev(div3, ul1);
    			append_dev(ul1, li4);
    			append_dev(li4, a4);
    			append_dev(ul1, t18);
    			append_dev(ul1, li5);
    			append_dev(li5, a5);
    			append_dev(ul1, t20);
    			append_dev(ul1, li6);
    			append_dev(li6, a6);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(footer);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Footer", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$w, create_fragment$w, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment$w.name
    		});
    	}
    }

    /* src/views/Index.svelte generated by Svelte v3.26.0 */
    const file$v = "src/views/Index.svelte";

    function create_fragment$x(ctx) {
    	let indexnavbar;
    	let t0;
    	let section;
    	let div3;
    	let div2;
    	let div1;
    	let h2;
    	let t2;
    	let p;
    	let t3;
    	let a0;
    	let t5;
    	let t6;
    	let div0;
    	let a1;
    	let t8;
    	let a2;
    	let t10;
    	let img;
    	let img_src_value;
    	let t11;
    	let footer;
    	let current;
    	indexnavbar = new IndexNavbar({ $$inline: true });
    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(indexnavbar.$$.fragment);
    			t0 = space();
    			section = element("section");
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			h2 = element("h2");
    			h2.textContent = "A beautiful extension for Tailwind CSS.";
    			t2 = space();
    			p = element("p");
    			t3 = text("Tailwind WebApp Svelte is Free and Open Source. It does not change or\n          add any CSS to the already one from\n          ");
    			a0 = element("a");
    			a0.textContent = "Tailwind CSS";
    			t5 = text("\n          . It features multiple HTML elements and it comes with dynamic\n          components for ReactJS, Vue and Angular.");
    			t6 = space();
    			div0 = element("div");
    			a1 = element("a");
    			a1.textContent = "Get started";
    			t8 = space();
    			a2 = element("a");
    			a2.textContent = "Github Star";
    			t10 = space();
    			img = element("img");
    			t11 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(h2, "class", "font-semibold text-4xl text-gray-700");
    			add_location(h2, file$v, 22, 8, 1078);
    			attr_dev(a0, "href", "https://tailwindcss.com/?ref=creativetim");
    			attr_dev(a0, "class", "text-gray-700");
    			attr_dev(a0, "target", "_blank");
    			add_location(a0, file$v, 28, 10, 1391);
    			attr_dev(p, "class", "mt-4 text-lg leading-relaxed text-gray-600");
    			add_location(p, file$v, 25, 8, 1200);
    			attr_dev(a1, "href", "https://www.creative-tim.com/learning-lab/tailwind/svelte/overview/webapp?ref=tws-index");
    			attr_dev(a1, "target", "_blank");
    			attr_dev(a1, "class", "get-started text-white font-bold px-6 py-4 rounded outline-none focus:outline-none mr-1 mb-1 bg-red-500 active:bg-red-600 uppercase text-sm shadow hover:shadow-lg ease-linear transition-all duration-150");
    			add_location(a1, file$v, 39, 10, 1743);
    			attr_dev(a2, "href", "https://github.com/creativetimofficial/tailwind-webapp-svelte?ref=tws-index");
    			attr_dev(a2, "class", "github-star ml-1 text-white font-bold px-6 py-4 rounded outline-none focus:outline-none mr-1 mb-1 bg-gray-800 active:bg-gray-700 uppercase text-sm shadow hover:shadow-lg ease-linear transition-all duration-150");
    			attr_dev(a2, "target", "_blank");
    			add_location(a2, file$v, 46, 10, 2165);
    			attr_dev(div0, "class", "mt-12");
    			add_location(div0, file$v, 38, 8, 1713);
    			attr_dev(div1, "class", "pt-32 sm:pt-0");
    			add_location(div1, file$v, 21, 6, 1042);
    			attr_dev(div2, "class", "w-full md:w-8/12 lg:w-6/12 xl:w-6/12 px-4");
    			add_location(div2, file$v, 20, 4, 980);
    			attr_dev(div3, "class", "container mx-auto items-center flex flex-wrap");
    			add_location(div3, file$v, 19, 2, 916);
    			attr_dev(img, "class", "absolute top-0 b-auto right-0 pt-16 sm:w-6/12 -mt-48 sm:mt-0 w-10/12 max-h-860-px");
    			if (img.src !== (img_src_value = patternVue)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "...");
    			add_location(img, file$v, 58, 2, 2623);
    			attr_dev(section, "class", "header relative pt-16 items-center flex h-screen max-h-860-px");
    			add_location(section, file$v, 18, 0, 834);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(indexnavbar, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, section, anchor);
    			append_dev(section, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, h2);
    			append_dev(div1, t2);
    			append_dev(div1, p);
    			append_dev(p, t3);
    			append_dev(p, a0);
    			append_dev(p, t5);
    			append_dev(div1, t6);
    			append_dev(div1, div0);
    			append_dev(div0, a1);
    			append_dev(div0, t8);
    			append_dev(div0, a2);
    			append_dev(section, t10);
    			append_dev(section, img);
    			insert_dev(target, t11, anchor);
    			mount_component(footer, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(indexnavbar.$$.fragment, local);
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(indexnavbar.$$.fragment, local);
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(indexnavbar, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(section);
    			if (detaching) detach_dev(t11);
    			destroy_component(footer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const patternVue = "/assets/img/pattern_svelte.png";
    const componentBtn = "/assets/img/component-btn.png";
    const componentProfileCard = "/assets/img/component-profile-card.png";
    const componentInfoCard = "/assets/img/component-info-card.png";
    const componentInfo2 = "/assets/img/component-info-2.png";
    const componentMenu = "/assets/img/component-menu.png";
    const componentBtnPink = "/assets/img/component-btn-pink.png";
    const documentation = "/assets/img/documentation.png";
    const login = "/assets/img/login.jpg";
    const profile = "/assets/img/profile.jpg";
    const landing = "/assets/img/landing.jpg";

    function instance$x($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Index", slots, []);
    	let { location } = $$props;
    	const writable_props = ["location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Index> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({
    		Link,
    		IndexNavbar,
    		Footer,
    		patternVue,
    		componentBtn,
    		componentProfileCard,
    		componentInfoCard,
    		componentInfo2,
    		componentMenu,
    		componentBtnPink,
    		documentation,
    		login,
    		profile,
    		landing,
    		location
    	});

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [location];
    }

    class Index extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$x, create_fragment$x, safe_not_equal, { location: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Index",
    			options,
    			id: create_fragment$x.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[0] === undefined && !("location" in props)) {
    			console.warn("<Index> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/views/Landing.svelte generated by Svelte v3.26.0 */
    const file$w = "src/views/Landing.svelte";

    function create_fragment$y(ctx) {
    	let div82;
    	let authnavbar;
    	let t0;
    	let main;
    	let div6;
    	let div0;
    	let span0;
    	let t1;
    	let div4;
    	let div3;
    	let div2;
    	let div1;
    	let h1;
    	let t3;
    	let p0;
    	let t5;
    	let div5;
    	let svg0;
    	let polygon0;
    	let t6;
    	let section0;
    	let div25;
    	let div19;
    	let div10;
    	let div9;
    	let div8;
    	let div7;
    	let i0;
    	let t7;
    	let h60;
    	let t9;
    	let p1;
    	let t11;
    	let div14;
    	let div13;
    	let div12;
    	let div11;
    	let i1;
    	let t12;
    	let h61;
    	let t14;
    	let p2;
    	let t16;
    	let div18;
    	let div17;
    	let div16;
    	let div15;
    	let i2;
    	let t17;
    	let h62;
    	let t19;
    	let p3;
    	let t21;
    	let div24;
    	let div21;
    	let div20;
    	let i3;
    	let t22;
    	let h30;
    	let t24;
    	let p4;
    	let t26;
    	let p5;
    	let t28;
    	let a;
    	let link_action;
    	let t30;
    	let div23;
    	let div22;
    	let img0;
    	let img0_src_value;
    	let t31;
    	let blockquote;
    	let svg1;
    	let polygon1;
    	let t32;
    	let h40;
    	let t34;
    	let p6;
    	let t36;
    	let section1;
    	let div26;
    	let svg2;
    	let polygon2;
    	let t37;
    	let div41;
    	let div40;
    	let div27;
    	let img1;
    	let img1_src_value;
    	let t38;
    	let div39;
    	let div38;
    	let div28;
    	let i4;
    	let t39;
    	let h31;
    	let t41;
    	let p7;
    	let t43;
    	let ul;
    	let li0;
    	let div31;
    	let div29;
    	let span1;
    	let i5;
    	let t44;
    	let div30;
    	let h41;
    	let t46;
    	let li1;
    	let div34;
    	let div32;
    	let span2;
    	let i6;
    	let t47;
    	let div33;
    	let h42;
    	let t49;
    	let li2;
    	let div37;
    	let div35;
    	let span3;
    	let i7;
    	let t50;
    	let div36;
    	let h43;
    	let t52;
    	let section2;
    	let div61;
    	let div43;
    	let div42;
    	let h20;
    	let t54;
    	let p8;
    	let t56;
    	let div60;
    	let div47;
    	let div46;
    	let img2;
    	let img2_src_value;
    	let t57;
    	let div45;
    	let h50;
    	let t59;
    	let p9;
    	let t61;
    	let div44;
    	let button0;
    	let i8;
    	let t62;
    	let button1;
    	let i9;
    	let t63;
    	let button2;
    	let i10;
    	let t64;
    	let div51;
    	let div50;
    	let img3;
    	let img3_src_value;
    	let t65;
    	let div49;
    	let h51;
    	let t67;
    	let p10;
    	let t69;
    	let div48;
    	let button3;
    	let i11;
    	let t70;
    	let button4;
    	let i12;
    	let t71;
    	let div55;
    	let div54;
    	let img4;
    	let img4_src_value;
    	let t72;
    	let div53;
    	let h52;
    	let t74;
    	let p11;
    	let t76;
    	let div52;
    	let button5;
    	let i13;
    	let t77;
    	let button6;
    	let i14;
    	let t78;
    	let button7;
    	let i15;
    	let t79;
    	let div59;
    	let div58;
    	let img5;
    	let img5_src_value;
    	let t80;
    	let div57;
    	let h53;
    	let t82;
    	let p12;
    	let t84;
    	let div56;
    	let button8;
    	let i16;
    	let t85;
    	let button9;
    	let i17;
    	let t86;
    	let button10;
    	let i18;
    	let t87;
    	let button11;
    	let i19;
    	let t88;
    	let section3;
    	let div62;
    	let svg3;
    	let polygon3;
    	let t89;
    	let div72;
    	let div64;
    	let div63;
    	let h21;
    	let t91;
    	let p13;
    	let t93;
    	let div71;
    	let div66;
    	let div65;
    	let i20;
    	let t94;
    	let h63;
    	let t96;
    	let p14;
    	let t98;
    	let div68;
    	let div67;
    	let i21;
    	let t99;
    	let h54;
    	let t101;
    	let p15;
    	let t103;
    	let div70;
    	let div69;
    	let i22;
    	let t104;
    	let h55;
    	let t106;
    	let p16;
    	let t108;
    	let section4;
    	let div81;
    	let div80;
    	let div79;
    	let div78;
    	let div77;
    	let h44;
    	let t110;
    	let p17;
    	let t112;
    	let div73;
    	let label0;
    	let t114;
    	let input0;
    	let t115;
    	let div74;
    	let label1;
    	let t117;
    	let input1;
    	let t118;
    	let div75;
    	let label2;
    	let t120;
    	let textarea;
    	let t121;
    	let div76;
    	let button12;
    	let t123;
    	let footer;
    	let current;
    	let mounted;
    	let dispose;
    	authnavbar = new AuthNavbar({ $$inline: true });
    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			div82 = element("div");
    			create_component(authnavbar.$$.fragment);
    			t0 = space();
    			main = element("main");
    			div6 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			t1 = space();
    			div4 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			h1 = element("h1");
    			h1.textContent = "Your story starts with us.";
    			t3 = space();
    			p0 = element("p");
    			p0.textContent = "This is a simple example of a Landing Page you can build using\n                Tailwind WebApp Svelte. It features multiple CSS components\n                based on the Tailwind CSS design system.";
    			t5 = space();
    			div5 = element("div");
    			svg0 = svg_element("svg");
    			polygon0 = svg_element("polygon");
    			t6 = space();
    			section0 = element("section");
    			div25 = element("div");
    			div19 = element("div");
    			div10 = element("div");
    			div9 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			i0 = element("i");
    			t7 = space();
    			h60 = element("h6");
    			h60.textContent = "Awarded Agency";
    			t9 = space();
    			p1 = element("p");
    			p1.textContent = "Divide details about your product or agency work into parts. A\n                  paragraph describing a feature will be enough.";
    			t11 = space();
    			div14 = element("div");
    			div13 = element("div");
    			div12 = element("div");
    			div11 = element("div");
    			i1 = element("i");
    			t12 = space();
    			h61 = element("h6");
    			h61.textContent = "Free Revisions";
    			t14 = space();
    			p2 = element("p");
    			p2.textContent = "Keep you user engaged by providing meaningful information.\n                  Remember that by this time, the user is curious.";
    			t16 = space();
    			div18 = element("div");
    			div17 = element("div");
    			div16 = element("div");
    			div15 = element("div");
    			i2 = element("i");
    			t17 = space();
    			h62 = element("h6");
    			h62.textContent = "Verified Company";
    			t19 = space();
    			p3 = element("p");
    			p3.textContent = "Write a few lines about each one. A paragraph describing a\n                  feature will be enough. Keep you user engaged!";
    			t21 = space();
    			div24 = element("div");
    			div21 = element("div");
    			div20 = element("div");
    			i3 = element("i");
    			t22 = space();
    			h30 = element("h3");
    			h30.textContent = "Working with us is a pleasure";
    			t24 = space();
    			p4 = element("p");
    			p4.textContent = "Don't let your uses guess by attaching tooltips and popoves to any\n              element. Just make sure you enable them first via JavaScript.";
    			t26 = space();
    			p5 = element("p");
    			p5.textContent = "The kit comes with three pre-built pages to help you get started\n              faster. You can change the text and images and you're good to go.\n              Just make sure you enable them first via JavaScript.";
    			t28 = space();
    			a = element("a");
    			a.textContent = "Check Tailwind WebApp Svelte!";
    			t30 = space();
    			div23 = element("div");
    			div22 = element("div");
    			img0 = element("img");
    			t31 = space();
    			blockquote = element("blockquote");
    			svg1 = svg_element("svg");
    			polygon1 = svg_element("polygon");
    			t32 = space();
    			h40 = element("h4");
    			h40.textContent = "Top Notch Services";
    			t34 = space();
    			p6 = element("p");
    			p6.textContent = "The Arctic Ocean freezes every winter and much of the sea-ice\n                  then thaws every summer, and that process will continue\n                  whatever happens.";
    			t36 = space();
    			section1 = element("section");
    			div26 = element("div");
    			svg2 = svg_element("svg");
    			polygon2 = svg_element("polygon");
    			t37 = space();
    			div41 = element("div");
    			div40 = element("div");
    			div27 = element("div");
    			img1 = element("img");
    			t38 = space();
    			div39 = element("div");
    			div38 = element("div");
    			div28 = element("div");
    			i4 = element("i");
    			t39 = space();
    			h31 = element("h3");
    			h31.textContent = "A growing company";
    			t41 = space();
    			p7 = element("p");
    			p7.textContent = "The extension comes with three pre-built pages to help you get\n                started faster. You can change the text and images and you're\n                good to go.";
    			t43 = space();
    			ul = element("ul");
    			li0 = element("li");
    			div31 = element("div");
    			div29 = element("div");
    			span1 = element("span");
    			i5 = element("i");
    			t44 = space();
    			div30 = element("div");
    			h41 = element("h4");
    			h41.textContent = "Carefully crafted components";
    			t46 = space();
    			li1 = element("li");
    			div34 = element("div");
    			div32 = element("div");
    			span2 = element("span");
    			i6 = element("i");
    			t47 = space();
    			div33 = element("div");
    			h42 = element("h4");
    			h42.textContent = "Amazing page examples";
    			t49 = space();
    			li2 = element("li");
    			div37 = element("div");
    			div35 = element("div");
    			span3 = element("span");
    			i7 = element("i");
    			t50 = space();
    			div36 = element("div");
    			h43 = element("h4");
    			h43.textContent = "Dynamic components";
    			t52 = space();
    			section2 = element("section");
    			div61 = element("div");
    			div43 = element("div");
    			div42 = element("div");
    			h20 = element("h2");
    			h20.textContent = "Here are our heroes";
    			t54 = space();
    			p8 = element("p");
    			p8.textContent = "According to the National Oceanic and Atmospheric Administration,\n              Ted, Scambos, NSIDClead scentist, puts the potentially record\n              maximum.";
    			t56 = space();
    			div60 = element("div");
    			div47 = element("div");
    			div46 = element("div");
    			img2 = element("img");
    			t57 = space();
    			div45 = element("div");
    			h50 = element("h5");
    			h50.textContent = "Ryan Tompson";
    			t59 = space();
    			p9 = element("p");
    			p9.textContent = "Web Developer";
    			t61 = space();
    			div44 = element("div");
    			button0 = element("button");
    			i8 = element("i");
    			t62 = space();
    			button1 = element("button");
    			i9 = element("i");
    			t63 = space();
    			button2 = element("button");
    			i10 = element("i");
    			t64 = space();
    			div51 = element("div");
    			div50 = element("div");
    			img3 = element("img");
    			t65 = space();
    			div49 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Romina Hadid";
    			t67 = space();
    			p10 = element("p");
    			p10.textContent = "Marketing Specialist";
    			t69 = space();
    			div48 = element("div");
    			button3 = element("button");
    			i11 = element("i");
    			t70 = space();
    			button4 = element("button");
    			i12 = element("i");
    			t71 = space();
    			div55 = element("div");
    			div54 = element("div");
    			img4 = element("img");
    			t72 = space();
    			div53 = element("div");
    			h52 = element("h5");
    			h52.textContent = "Alexa Smith";
    			t74 = space();
    			p11 = element("p");
    			p11.textContent = "UI/UX Designer";
    			t76 = space();
    			div52 = element("div");
    			button5 = element("button");
    			i13 = element("i");
    			t77 = space();
    			button6 = element("button");
    			i14 = element("i");
    			t78 = space();
    			button7 = element("button");
    			i15 = element("i");
    			t79 = space();
    			div59 = element("div");
    			div58 = element("div");
    			img5 = element("img");
    			t80 = space();
    			div57 = element("div");
    			h53 = element("h5");
    			h53.textContent = "Jenna Kardi";
    			t82 = space();
    			p12 = element("p");
    			p12.textContent = "Founder and CEO";
    			t84 = space();
    			div56 = element("div");
    			button8 = element("button");
    			i16 = element("i");
    			t85 = space();
    			button9 = element("button");
    			i17 = element("i");
    			t86 = space();
    			button10 = element("button");
    			i18 = element("i");
    			t87 = space();
    			button11 = element("button");
    			i19 = element("i");
    			t88 = space();
    			section3 = element("section");
    			div62 = element("div");
    			svg3 = svg_element("svg");
    			polygon3 = svg_element("polygon");
    			t89 = space();
    			div72 = element("div");
    			div64 = element("div");
    			div63 = element("div");
    			h21 = element("h2");
    			h21.textContent = "Build something";
    			t91 = space();
    			p13 = element("p");
    			p13.textContent = "Put the potentially record low maximum sea ice extent tihs year\n              down to low ice. According to the National Oceanic and Atmospheric\n              Administration, Ted, Scambos.";
    			t93 = space();
    			div71 = element("div");
    			div66 = element("div");
    			div65 = element("div");
    			i20 = element("i");
    			t94 = space();
    			h63 = element("h6");
    			h63.textContent = "Excelent Services";
    			t96 = space();
    			p14 = element("p");
    			p14.textContent = "Some quick example text to build on the card title and make up the\n              bulk of the card's content.";
    			t98 = space();
    			div68 = element("div");
    			div67 = element("div");
    			i21 = element("i");
    			t99 = space();
    			h54 = element("h5");
    			h54.textContent = "Grow your market";
    			t101 = space();
    			p15 = element("p");
    			p15.textContent = "Some quick example text to build on the card title and make up the\n              bulk of the card's content.";
    			t103 = space();
    			div70 = element("div");
    			div69 = element("div");
    			i22 = element("i");
    			t104 = space();
    			h55 = element("h5");
    			h55.textContent = "Launch time";
    			t106 = space();
    			p16 = element("p");
    			p16.textContent = "Some quick example text to build on the card title and make up the\n              bulk of the card's content.";
    			t108 = space();
    			section4 = element("section");
    			div81 = element("div");
    			div80 = element("div");
    			div79 = element("div");
    			div78 = element("div");
    			div77 = element("div");
    			h44 = element("h4");
    			h44.textContent = "Want to work with us?";
    			t110 = space();
    			p17 = element("p");
    			p17.textContent = "Complete this form and we will get back to you in 24 hours.";
    			t112 = space();
    			div73 = element("div");
    			label0 = element("label");
    			label0.textContent = "Full Name";
    			t114 = space();
    			input0 = element("input");
    			t115 = space();
    			div74 = element("div");
    			label1 = element("label");
    			label1.textContent = "Email";
    			t117 = space();
    			input1 = element("input");
    			t118 = space();
    			div75 = element("div");
    			label2 = element("label");
    			label2.textContent = "Message";
    			t120 = space();
    			textarea = element("textarea");
    			t121 = space();
    			div76 = element("div");
    			button12 = element("button");
    			button12.textContent = "Send Message";
    			t123 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(span0, "id", "blackOverlay");
    			attr_dev(span0, "class", "w-full h-full absolute opacity-75 bg-black");
    			add_location(span0, file$w, 22, 8, 836);
    			attr_dev(div0, "class", "absolute top-0 w-full h-full bg-center bg-cover");
    			set_style(div0, "background-image", "url(https://images.unsplash.com/photo-1557804506-669a67965ba0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1267&q=80)");
    			add_location(div0, file$w, 16, 6, 559);
    			attr_dev(h1, "class", "text-white font-semibold text-5xl");
    			add_location(h1, file$w, 31, 14, 1178);
    			attr_dev(p0, "class", "mt-4 text-lg text-gray-300");
    			add_location(p0, file$w, 34, 14, 1302);
    			attr_dev(div1, "class", "pr-12");
    			add_location(div1, file$w, 30, 12, 1144);
    			attr_dev(div2, "class", "w-full lg:w-6/12 px-4 ml-auto mr-auto text-center");
    			add_location(div2, file$w, 29, 10, 1068);
    			attr_dev(div3, "class", "items-center flex flex-wrap");
    			add_location(div3, file$w, 28, 8, 1016);
    			attr_dev(div4, "class", "container relative mx-auto");
    			add_location(div4, file$w, 27, 6, 967);
    			attr_dev(polygon0, "class", "text-gray-300 fill-current");
    			attr_dev(polygon0, "points", "2560 0 2560 100 0 100");
    			add_location(polygon0, file$w, 56, 10, 2062);
    			attr_dev(svg0, "class", "absolute bottom-0 overflow-hidden");
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "preserveAspectRatio", "none");
    			attr_dev(svg0, "version", "1.1");
    			attr_dev(svg0, "viewBox", "0 0 2560 100");
    			attr_dev(svg0, "x", "0");
    			attr_dev(svg0, "y", "0");
    			add_location(svg0, file$w, 47, 8, 1814);
    			attr_dev(div5, "class", "top-auto bottom-0 left-0 right-0 w-full absolute pointer-events-none overflow-hidden h-70-px");
    			set_style(div5, "transform", "translateZ(0)");
    			add_location(div5, file$w, 43, 6, 1642);
    			attr_dev(div6, "class", "relative pt-16 pb-32 flex content-center items-center justify-center min-h-screen-75");
    			add_location(div6, file$w, 13, 4, 443);
    			attr_dev(i0, "class", "fas fa-award");
    			add_location(i0, file$w, 75, 18, 2807);
    			attr_dev(div7, "class", "text-white p-3 text-center inline-flex items-center justify-center w-12 h-12 mb-5 shadow-lg rounded-full bg-red-400");
    			add_location(div7, file$w, 72, 16, 2624);
    			attr_dev(h60, "class", "text-xl font-semibold");
    			add_location(h60, file$w, 77, 16, 2875);
    			attr_dev(p1, "class", "mt-2 mb-4 text-gray-600");
    			add_location(p1, file$w, 78, 16, 2945);
    			attr_dev(div8, "class", "px-4 py-5 flex-auto");
    			add_location(div8, file$w, 71, 14, 2574);
    			attr_dev(div9, "class", "relative flex flex-col min-w-0 break-words bg-white w-full mb-8 shadow-lg rounded-lg");
    			add_location(div9, file$w, 68, 12, 2434);
    			attr_dev(div10, "class", "lg:pt-12 pt-6 w-full md:w-4/12 px-4 text-center");
    			add_location(div10, file$w, 67, 10, 2360);
    			attr_dev(i1, "class", "fas fa-retweet");
    			add_location(i1, file$w, 94, 18, 3650);
    			attr_dev(div11, "class", "text-white p-3 text-center inline-flex items-center justify-center w-12 h-12 mb-5 shadow-lg rounded-full bg-blue-400");
    			add_location(div11, file$w, 91, 16, 3466);
    			attr_dev(h61, "class", "text-xl font-semibold");
    			add_location(h61, file$w, 96, 16, 3720);
    			attr_dev(p2, "class", "mt-2 mb-4 text-gray-600");
    			add_location(p2, file$w, 97, 16, 3790);
    			attr_dev(div12, "class", "px-4 py-5 flex-auto");
    			add_location(div12, file$w, 90, 14, 3416);
    			attr_dev(div13, "class", "relative flex flex-col min-w-0 break-words bg-white w-full mb-8 shadow-lg rounded-lg");
    			add_location(div13, file$w, 87, 12, 3276);
    			attr_dev(div14, "class", "w-full md:w-4/12 px-4 text-center");
    			add_location(div14, file$w, 86, 10, 3216);
    			attr_dev(i2, "class", "fas fa-fingerprint");
    			add_location(i2, file$w, 113, 18, 4499);
    			attr_dev(div15, "class", "text-white p-3 text-center inline-flex items-center justify-center w-12 h-12 mb-5 shadow-lg rounded-full bg-green-400");
    			add_location(div15, file$w, 110, 16, 4314);
    			attr_dev(h62, "class", "text-xl font-semibold");
    			add_location(h62, file$w, 115, 16, 4573);
    			attr_dev(p3, "class", "mt-2 mb-4 text-gray-600");
    			add_location(p3, file$w, 116, 16, 4645);
    			attr_dev(div16, "class", "px-4 py-5 flex-auto");
    			add_location(div16, file$w, 109, 14, 4264);
    			attr_dev(div17, "class", "relative flex flex-col min-w-0 break-words bg-white w-full mb-8 shadow-lg rounded-lg");
    			add_location(div17, file$w, 106, 12, 4124);
    			attr_dev(div18, "class", "pt-6 w-full md:w-4/12 px-4 text-center");
    			add_location(div18, file$w, 105, 10, 4059);
    			attr_dev(div19, "class", "flex flex-wrap");
    			add_location(div19, file$w, 66, 8, 2321);
    			attr_dev(i3, "class", "fas fa-user-friends text-xl");
    			add_location(i3, file$w, 130, 14, 5222);
    			attr_dev(div20, "class", "text-gray-600 p-3 text-center inline-flex items-center justify-center w-16 h-16 mb-6 shadow-lg rounded-full bg-gray-100");
    			add_location(div20, file$w, 127, 12, 5047);
    			attr_dev(h30, "class", "text-3xl mb-2 font-semibold leading-normal");
    			add_location(h30, file$w, 132, 12, 5297);
    			attr_dev(p4, "class", "text-lg font-light leading-relaxed mt-4 mb-4 text-gray-700");
    			add_location(p4, file$w, 135, 12, 5427);
    			attr_dev(p5, "class", "text-lg font-light leading-relaxed mt-0 mb-4 text-gray-700");
    			add_location(p5, file$w, 141, 12, 5711);
    			attr_dev(a, "href", "/");
    			attr_dev(a, "class", "font-bold text-gray-800 mt-8");
    			add_location(a, file$w, 148, 12, 6064);
    			attr_dev(div21, "class", "w-full md:w-5/12 px-4 mr-auto ml-auto");
    			add_location(div21, file$w, 126, 10, 4983);
    			attr_dev(img0, "alt", "...");
    			if (img0.src !== (img0_src_value = "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1051&q=80")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "class", "w-full align-middle rounded-t-lg");
    			add_location(img0, file$w, 157, 14, 6427);
    			attr_dev(polygon1, "points", "-30,95 583,95 583,65");
    			attr_dev(polygon1, "class", "text-red-500 fill-current");
    			add_location(polygon1, file$w, 169, 18, 7010);
    			attr_dev(svg1, "preserveAspectRatio", "none");
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "viewBox", "0 0 583 95");
    			attr_dev(svg1, "class", "absolute left-0 w-full block h-95-px -top-94-px");
    			add_location(svg1, file$w, 163, 16, 6758);
    			attr_dev(h40, "class", "text-xl font-bold text-white");
    			add_location(h40, file$w, 174, 16, 7192);
    			attr_dev(p6, "class", "text-md font-light mt-2 text-white");
    			add_location(p6, file$w, 177, 16, 7309);
    			attr_dev(blockquote, "class", "relative p-8 mb-4");
    			add_location(blockquote, file$w, 162, 14, 6703);
    			attr_dev(div22, "class", "relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-lg rounded-lg bg-red-500");
    			add_location(div22, file$w, 154, 12, 6276);
    			attr_dev(div23, "class", "w-full md:w-4/12 px-4 mr-auto ml-auto");
    			add_location(div23, file$w, 153, 10, 6212);
    			attr_dev(div24, "class", "flex flex-wrap items-center mt-32");
    			add_location(div24, file$w, 125, 8, 4925);
    			attr_dev(div25, "class", "container mx-auto px-4");
    			add_location(div25, file$w, 65, 6, 2276);
    			attr_dev(section0, "class", "pb-20 bg-gray-300 -mt-24");
    			add_location(section0, file$w, 64, 4, 2227);
    			attr_dev(polygon2, "class", "text-white fill-current");
    			attr_dev(polygon2, "points", "2560 0 2560 100 0 100");
    			add_location(polygon2, file$w, 203, 10, 8142);
    			attr_dev(svg2, "class", "absolute bottom-0 overflow-hidden");
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg2, "preserveAspectRatio", "none");
    			attr_dev(svg2, "version", "1.1");
    			attr_dev(svg2, "viewBox", "0 0 2560 100");
    			attr_dev(svg2, "x", "0");
    			attr_dev(svg2, "y", "0");
    			add_location(svg2, file$w, 194, 8, 7894);
    			attr_dev(div26, "class", "bottom-auto top-0 left-0 right-0 w-full absolute pointer-events-none overflow-hidden -mt-20 h-20");
    			set_style(div26, "transform", "translateZ(0)");
    			add_location(div26, file$w, 190, 6, 7718);
    			attr_dev(img1, "alt", "...");
    			attr_dev(img1, "class", "max-w-full rounded-lg shadow-lg");
    			if (img1.src !== (img1_src_value = "https://images.unsplash.com/photo-1555212697-194d092e3b8f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80")) attr_dev(img1, "src", img1_src_value);
    			add_location(img1, file$w, 213, 12, 8456);
    			attr_dev(div27, "class", "w-full md:w-4/12 ml-auto mr-auto px-4");
    			add_location(div27, file$w, 212, 10, 8392);
    			attr_dev(i4, "class", "fas fa-rocket text-xl");
    			add_location(i4, file$w, 224, 16, 9012);
    			attr_dev(div28, "class", "text-red-600 p-3 text-center inline-flex items-center justify-center w-16 h-16 mb-6 shadow-lg rounded-full bg-red-300");
    			add_location(div28, file$w, 221, 14, 8833);
    			attr_dev(h31, "class", "text-3xl font-semibold");
    			add_location(h31, file$w, 226, 14, 9085);
    			attr_dev(p7, "class", "mt-4 text-lg leading-relaxed text-gray-600");
    			add_location(p7, file$w, 227, 14, 9157);
    			attr_dev(i5, "class", "fas fa-fingerprint");
    			add_location(i5, file$w, 239, 24, 9773);
    			attr_dev(span1, "class", "text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-red-600 bg-red-200 mr-3");
    			add_location(span1, file$w, 236, 22, 9590);
    			add_location(div29, file$w, 235, 20, 9562);
    			attr_dev(h41, "class", "text-gray-600");
    			add_location(h41, file$w, 243, 22, 9913);
    			add_location(div30, file$w, 242, 20, 9885);
    			attr_dev(div31, "class", "flex items-center");
    			add_location(div31, file$w, 234, 18, 9510);
    			attr_dev(li0, "class", "py-2");
    			add_location(li0, file$w, 233, 16, 9474);
    			attr_dev(i6, "class", "fab fa-html5");
    			add_location(i6, file$w, 255, 24, 10410);
    			attr_dev(span2, "class", "text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-red-600 bg-red-200 mr-3");
    			add_location(span2, file$w, 252, 22, 10227);
    			add_location(div32, file$w, 251, 20, 10199);
    			attr_dev(h42, "class", "text-gray-600");
    			add_location(h42, file$w, 259, 22, 10544);
    			add_location(div33, file$w, 258, 20, 10516);
    			attr_dev(div34, "class", "flex items-center");
    			add_location(div34, file$w, 250, 18, 10147);
    			attr_dev(li1, "class", "py-2");
    			add_location(li1, file$w, 249, 16, 10111);
    			attr_dev(i7, "class", "far fa-paper-plane");
    			add_location(i7, file$w, 271, 24, 11034);
    			attr_dev(span3, "class", "text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-red-600 bg-red-200 mr-3");
    			add_location(span3, file$w, 268, 22, 10851);
    			add_location(div35, file$w, 267, 20, 10823);
    			attr_dev(h43, "class", "text-gray-600");
    			add_location(h43, file$w, 275, 22, 11174);
    			add_location(div36, file$w, 274, 20, 11146);
    			attr_dev(div37, "class", "flex items-center");
    			add_location(div37, file$w, 266, 18, 10771);
    			attr_dev(li2, "class", "py-2");
    			add_location(li2, file$w, 265, 16, 10735);
    			attr_dev(ul, "class", "list-none mt-6");
    			add_location(ul, file$w, 232, 14, 9430);
    			attr_dev(div38, "class", "md:pr-12");
    			add_location(div38, file$w, 220, 12, 8796);
    			attr_dev(div39, "class", "w-full md:w-5/12 ml-auto mr-auto px-4");
    			add_location(div39, file$w, 219, 10, 8732);
    			attr_dev(div40, "class", "items-center flex flex-wrap");
    			add_location(div40, file$w, 211, 8, 8340);
    			attr_dev(div41, "class", "container mx-auto px-4");
    			add_location(div41, file$w, 210, 6, 8295);
    			attr_dev(section1, "class", "relative py-20");
    			add_location(section1, file$w, 189, 4, 7679);
    			attr_dev(h20, "class", "text-4xl font-semibold");
    			add_location(h20, file$w, 290, 12, 11603);
    			attr_dev(p8, "class", "text-lg leading-relaxed m-4 text-gray-600");
    			add_location(p8, file$w, 291, 12, 11675);
    			attr_dev(div42, "class", "w-full lg:w-6/12 px-4");
    			add_location(div42, file$w, 289, 10, 11555);
    			attr_dev(div43, "class", "flex flex-wrap justify-center text-center mb-24");
    			add_location(div43, file$w, 288, 8, 11483);
    			attr_dev(img2, "alt", "...");
    			if (img2.src !== (img2_src_value = team1$1)) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "class", "shadow-lg rounded-full mx-auto max-w-120-px");
    			add_location(img2, file$w, 301, 14, 12109);
    			attr_dev(h50, "class", "text-xl font-bold");
    			add_location(h50, file$w, 307, 16, 12316);
    			attr_dev(p9, "class", "mt-1 text-sm text-gray-500 uppercase font-semibold");
    			add_location(p9, file$w, 308, 16, 12380);
    			attr_dev(i8, "class", "fab fa-twitter");
    			add_location(i8, file$w, 316, 20, 12745);
    			attr_dev(button0, "class", "bg-blue-400 text-white w-8 h-8 rounded-full outline-none focus:outline-none mr-1 mb-1");
    			attr_dev(button0, "type", "button");
    			add_location(button0, file$w, 312, 18, 12549);
    			attr_dev(i9, "class", "fab fa-facebook-f");
    			add_location(i9, file$w, 322, 20, 13018);
    			attr_dev(button1, "class", "bg-blue-600 text-white w-8 h-8 rounded-full outline-none focus:outline-none mr-1 mb-1");
    			attr_dev(button1, "type", "button");
    			add_location(button1, file$w, 318, 18, 12822);
    			attr_dev(i10, "class", "fab fa-dribbble");
    			add_location(i10, file$w, 328, 20, 13294);
    			attr_dev(button2, "class", "bg-pink-500 text-white w-8 h-8 rounded-full outline-none focus:outline-none mr-1 mb-1");
    			attr_dev(button2, "type", "button");
    			add_location(button2, file$w, 324, 18, 13098);
    			attr_dev(div44, "class", "mt-6");
    			add_location(div44, file$w, 311, 16, 12512);
    			attr_dev(div45, "class", "pt-6 text-center");
    			add_location(div45, file$w, 306, 14, 12269);
    			attr_dev(div46, "class", "px-6");
    			add_location(div46, file$w, 300, 12, 12076);
    			attr_dev(div47, "class", "w-full md:w-6/12 lg:w-3/12 lg:mb-0 mb-12 px-4");
    			add_location(div47, file$w, 299, 10, 12004);
    			attr_dev(img3, "alt", "...");
    			if (img3.src !== (img3_src_value = team2$2)) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "class", "shadow-lg rounded-full mx-auto max-w-120-px");
    			add_location(img3, file$w, 336, 14, 13549);
    			attr_dev(h51, "class", "text-xl font-bold");
    			add_location(h51, file$w, 342, 16, 13756);
    			attr_dev(p10, "class", "mt-1 text-sm text-gray-500 uppercase font-semibold");
    			add_location(p10, file$w, 343, 16, 13820);
    			attr_dev(i11, "class", "fab fa-google");
    			add_location(i11, file$w, 351, 20, 14191);
    			attr_dev(button3, "class", "bg-red-600 text-white w-8 h-8 rounded-full outline-none focus:outline-none mr-1 mb-1");
    			attr_dev(button3, "type", "button");
    			add_location(button3, file$w, 347, 18, 13996);
    			attr_dev(i12, "class", "fab fa-facebook-f");
    			add_location(i12, file$w, 357, 20, 14463);
    			attr_dev(button4, "class", "bg-blue-600 text-white w-8 h-8 rounded-full outline-none focus:outline-none mr-1 mb-1");
    			attr_dev(button4, "type", "button");
    			add_location(button4, file$w, 353, 18, 14267);
    			attr_dev(div48, "class", "mt-6");
    			add_location(div48, file$w, 346, 16, 13959);
    			attr_dev(div49, "class", "pt-6 text-center");
    			add_location(div49, file$w, 341, 14, 13709);
    			attr_dev(div50, "class", "px-6");
    			add_location(div50, file$w, 335, 12, 13516);
    			attr_dev(div51, "class", "w-full md:w-6/12 lg:w-3/12 lg:mb-0 mb-12 px-4");
    			add_location(div51, file$w, 334, 10, 13444);
    			attr_dev(img4, "alt", "...");
    			if (img4.src !== (img4_src_value = team3$1)) attr_dev(img4, "src", img4_src_value);
    			attr_dev(img4, "class", "shadow-lg rounded-full mx-auto max-w-120-px");
    			add_location(img4, file$w, 365, 14, 14720);
    			attr_dev(h52, "class", "text-xl font-bold");
    			add_location(h52, file$w, 371, 16, 14927);
    			attr_dev(p11, "class", "mt-1 text-sm text-gray-500 uppercase font-semibold");
    			add_location(p11, file$w, 372, 16, 14990);
    			attr_dev(i13, "class", "fab fa-google");
    			add_location(i13, file$w, 380, 20, 15355);
    			attr_dev(button5, "class", "bg-red-600 text-white w-8 h-8 rounded-full outline-none focus:outline-none mr-1 mb-1");
    			attr_dev(button5, "type", "button");
    			add_location(button5, file$w, 376, 18, 15160);
    			attr_dev(i14, "class", "fab fa-twitter");
    			add_location(i14, file$w, 386, 20, 15627);
    			attr_dev(button6, "class", "bg-blue-400 text-white w-8 h-8 rounded-full outline-none focus:outline-none mr-1 mb-1");
    			attr_dev(button6, "type", "button");
    			add_location(button6, file$w, 382, 18, 15431);
    			attr_dev(i15, "class", "fab fa-instagram");
    			add_location(i15, file$w, 392, 20, 15900);
    			attr_dev(button7, "class", "bg-gray-800 text-white w-8 h-8 rounded-full outline-none focus:outline-none mr-1 mb-1");
    			attr_dev(button7, "type", "button");
    			add_location(button7, file$w, 388, 18, 15704);
    			attr_dev(div52, "class", "mt-6");
    			add_location(div52, file$w, 375, 16, 15123);
    			attr_dev(div53, "class", "pt-6 text-center");
    			add_location(div53, file$w, 370, 14, 14880);
    			attr_dev(div54, "class", "px-6");
    			add_location(div54, file$w, 364, 12, 14687);
    			attr_dev(div55, "class", "w-full md:w-6/12 lg:w-3/12 lg:mb-0 mb-12 px-4");
    			add_location(div55, file$w, 363, 10, 14615);
    			attr_dev(img5, "alt", "...");
    			if (img5.src !== (img5_src_value = team4$1)) attr_dev(img5, "src", img5_src_value);
    			attr_dev(img5, "class", "shadow-lg rounded-full mx-auto max-w-120-px");
    			add_location(img5, file$w, 400, 14, 16156);
    			attr_dev(h53, "class", "text-xl font-bold");
    			add_location(h53, file$w, 406, 16, 16363);
    			attr_dev(p12, "class", "mt-1 text-sm text-gray-500 uppercase font-semibold");
    			add_location(p12, file$w, 407, 16, 16426);
    			attr_dev(i16, "class", "fab fa-dribbble");
    			add_location(i16, file$w, 415, 20, 16793);
    			attr_dev(button8, "class", "bg-pink-500 text-white w-8 h-8 rounded-full outline-none focus:outline-none mr-1 mb-1");
    			attr_dev(button8, "type", "button");
    			add_location(button8, file$w, 411, 18, 16597);
    			attr_dev(i17, "class", "fab fa-google");
    			add_location(i17, file$w, 421, 20, 17066);
    			attr_dev(button9, "class", "bg-red-600 text-white w-8 h-8 rounded-full outline-none focus:outline-none mr-1 mb-1");
    			attr_dev(button9, "type", "button");
    			add_location(button9, file$w, 417, 18, 16871);
    			attr_dev(i18, "class", "fab fa-twitter");
    			add_location(i18, file$w, 427, 20, 17338);
    			attr_dev(button10, "class", "bg-blue-400 text-white w-8 h-8 rounded-full outline-none focus:outline-none mr-1 mb-1");
    			attr_dev(button10, "type", "button");
    			add_location(button10, file$w, 423, 18, 17142);
    			attr_dev(i19, "class", "fab fa-instagram");
    			add_location(i19, file$w, 433, 20, 17611);
    			attr_dev(button11, "class", "bg-gray-800 text-white w-8 h-8 rounded-full outline-none focus:outline-none mr-1 mb-1");
    			attr_dev(button11, "type", "button");
    			add_location(button11, file$w, 429, 18, 17415);
    			attr_dev(div56, "class", "mt-6");
    			add_location(div56, file$w, 410, 16, 16560);
    			attr_dev(div57, "class", "pt-6 text-center");
    			add_location(div57, file$w, 405, 14, 16316);
    			attr_dev(div58, "class", "px-6");
    			add_location(div58, file$w, 399, 12, 16123);
    			attr_dev(div59, "class", "w-full md:w-6/12 lg:w-3/12 lg:mb-0 mb-12 px-4");
    			add_location(div59, file$w, 398, 10, 16051);
    			attr_dev(div60, "class", "flex flex-wrap");
    			add_location(div60, file$w, 298, 8, 11965);
    			attr_dev(div61, "class", "container mx-auto px-4");
    			add_location(div61, file$w, 287, 6, 11438);
    			attr_dev(section2, "class", "pt-20 pb-48");
    			add_location(section2, file$w, 286, 4, 11402);
    			attr_dev(polygon3, "class", "text-gray-900 fill-current");
    			attr_dev(polygon3, "points", "2560 0 2560 100 0 100");
    			add_location(polygon3, file$w, 457, 10, 18281);
    			attr_dev(svg3, "class", "absolute bottom-0 overflow-hidden");
    			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg3, "preserveAspectRatio", "none");
    			attr_dev(svg3, "version", "1.1");
    			attr_dev(svg3, "viewBox", "0 0 2560 100");
    			attr_dev(svg3, "x", "0");
    			attr_dev(svg3, "y", "0");
    			add_location(svg3, file$w, 448, 8, 18033);
    			attr_dev(div62, "class", "bottom-auto top-0 left-0 right-0 w-full absolute pointer-events-none overflow-hidden -mt-20 h-20");
    			set_style(div62, "transform", "translateZ(0)");
    			add_location(div62, file$w, 444, 6, 17857);
    			attr_dev(h21, "class", "text-4xl font-semibold text-white");
    			add_location(h21, file$w, 467, 12, 18614);
    			attr_dev(p13, "class", "text-lg leading-relaxed mt-4 mb-4 text-gray-500");
    			add_location(p13, file$w, 470, 12, 18721);
    			attr_dev(div63, "class", "w-full lg:w-6/12 px-4");
    			add_location(div63, file$w, 466, 10, 18566);
    			attr_dev(div64, "class", "flex flex-wrap text-center justify-center");
    			add_location(div64, file$w, 465, 8, 18500);
    			attr_dev(i20, "class", "fas fa-medal text-xl");
    			add_location(i20, file$w, 482, 14, 19316);
    			attr_dev(div65, "class", "text-gray-900 p-3 w-12 h-12 shadow-lg rounded-full bg-white inline-flex items-center justify-center");
    			add_location(div65, file$w, 479, 12, 19161);
    			attr_dev(h63, "class", "text-xl mt-5 font-semibold text-white");
    			add_location(h63, file$w, 484, 12, 19384);
    			attr_dev(p14, "class", "mt-2 mb-4 text-gray-500");
    			add_location(p14, file$w, 487, 12, 19497);
    			attr_dev(div66, "class", "w-full lg:w-3/12 px-4 text-center");
    			add_location(div66, file$w, 478, 10, 19101);
    			attr_dev(i21, "class", "fas fa-poll text-xl");
    			add_location(i21, file$w, 496, 14, 19915);
    			attr_dev(div67, "class", "text-gray-900 p-3 w-12 h-12 shadow-lg rounded-full bg-white inline-flex items-center justify-center");
    			add_location(div67, file$w, 493, 12, 19760);
    			attr_dev(h54, "class", "text-xl mt-5 font-semibold text-white");
    			add_location(h54, file$w, 498, 12, 19982);
    			attr_dev(p15, "class", "mt-2 mb-4 text-gray-500");
    			add_location(p15, file$w, 501, 12, 20094);
    			attr_dev(div68, "class", "w-full lg:w-3/12 px-4 text-center");
    			add_location(div68, file$w, 492, 10, 19700);
    			attr_dev(i22, "class", "fas fa-lightbulb text-xl");
    			add_location(i22, file$w, 510, 14, 20512);
    			attr_dev(div69, "class", "text-gray-900 p-3 w-12 h-12 shadow-lg rounded-full bg-white inline-flex items-center justify-center");
    			add_location(div69, file$w, 507, 12, 20357);
    			attr_dev(h55, "class", "text-xl mt-5 font-semibold text-white");
    			add_location(h55, file$w, 512, 12, 20584);
    			attr_dev(p16, "class", "mt-2 mb-4 text-gray-500");
    			add_location(p16, file$w, 515, 12, 20691);
    			attr_dev(div70, "class", "w-full lg:w-3/12 px-4 text-center");
    			add_location(div70, file$w, 506, 10, 20297);
    			attr_dev(div71, "class", "flex flex-wrap mt-12 justify-center");
    			add_location(div71, file$w, 477, 8, 19041);
    			attr_dev(div72, "class", "container mx-auto px-4 lg:pt-24 lg:pb-64");
    			add_location(div72, file$w, 464, 6, 18437);
    			attr_dev(section3, "class", "pb-20 relative block bg-gray-900");
    			add_location(section3, file$w, 443, 4, 17800);
    			attr_dev(h44, "class", "text-2xl font-semibold");
    			add_location(h44, file$w, 531, 16, 21355);
    			attr_dev(p17, "class", "leading-relaxed mt-1 mb-4 text-gray-600");
    			add_location(p17, file$w, 534, 16, 21469);
    			attr_dev(label0, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label0, "for", "full-name");
    			add_location(label0, file$w, 538, 18, 21694);
    			attr_dev(input0, "id", "full-name");
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			attr_dev(input0, "placeholder", "Full Name");
    			add_location(input0, file$w, 544, 18, 21913);
    			attr_dev(div73, "class", "relative w-full mb-3 mt-8");
    			add_location(div73, file$w, 537, 16, 21636);
    			attr_dev(label1, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label1, "for", "email");
    			add_location(label1, file$w, 553, 18, 22337);
    			attr_dev(input1, "id", "email");
    			attr_dev(input1, "type", "email");
    			attr_dev(input1, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full ease-linear transition-all duration-150");
    			attr_dev(input1, "placeholder", "Email");
    			add_location(input1, file$w, 559, 18, 22548);
    			attr_dev(div74, "class", "relative w-full mb-3");
    			add_location(div74, file$w, 552, 16, 22284);
    			attr_dev(label2, "class", "block uppercase text-gray-700 text-xs font-bold mb-2");
    			attr_dev(label2, "for", "message");
    			add_location(label2, file$w, 568, 18, 22965);
    			attr_dev(textarea, "id", "message");
    			attr_dev(textarea, "rows", "4");
    			attr_dev(textarea, "cols", "80");
    			attr_dev(textarea, "class", "px-3 py-3 placeholder-gray-400 text-gray-700 bg-white rounded text-sm shadow focus:outline-none focus:shadow-outline w-full");
    			attr_dev(textarea, "placeholder", "Type a message...");
    			add_location(textarea, file$w, 574, 18, 23180);
    			attr_dev(div75, "class", "relative w-full mb-3");
    			add_location(div75, file$w, 567, 16, 22912);
    			attr_dev(button12, "class", "bg-gray-900 text-white active:bg-gray-700 text-sm font-bold uppercase px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150");
    			attr_dev(button12, "type", "button");
    			add_location(button12, file$w, 583, 18, 23595);
    			attr_dev(div76, "class", "text-center mt-6");
    			add_location(div76, file$w, 582, 16, 23546);
    			attr_dev(div77, "class", "flex-auto p-5 lg:p-10");
    			add_location(div77, file$w, 530, 14, 21303);
    			attr_dev(div78, "class", "relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded-lg bg-gray-300");
    			add_location(div78, file$w, 527, 12, 21160);
    			attr_dev(div79, "class", "w-full lg:w-6/12 px-4");
    			add_location(div79, file$w, 526, 10, 21112);
    			attr_dev(div80, "class", "flex flex-wrap justify-center lg:-mt-64 -mt-48");
    			add_location(div80, file$w, 525, 8, 21041);
    			attr_dev(div81, "class", "container mx-auto px-4");
    			add_location(div81, file$w, 524, 6, 20996);
    			attr_dev(section4, "class", "relative block py-24 lg:pt-0 bg-gray-900");
    			add_location(section4, file$w, 523, 4, 20931);
    			add_location(main, file$w, 12, 2, 432);
    			add_location(div82, file$w, 10, 0, 407);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div82, anchor);
    			mount_component(authnavbar, div82, null);
    			append_dev(div82, t0);
    			append_dev(div82, main);
    			append_dev(main, div6);
    			append_dev(div6, div0);
    			append_dev(div0, span0);
    			append_dev(div6, t1);
    			append_dev(div6, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, h1);
    			append_dev(div1, t3);
    			append_dev(div1, p0);
    			append_dev(div6, t5);
    			append_dev(div6, div5);
    			append_dev(div5, svg0);
    			append_dev(svg0, polygon0);
    			append_dev(main, t6);
    			append_dev(main, section0);
    			append_dev(section0, div25);
    			append_dev(div25, div19);
    			append_dev(div19, div10);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div7, i0);
    			append_dev(div8, t7);
    			append_dev(div8, h60);
    			append_dev(div8, t9);
    			append_dev(div8, p1);
    			append_dev(div19, t11);
    			append_dev(div19, div14);
    			append_dev(div14, div13);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div11, i1);
    			append_dev(div12, t12);
    			append_dev(div12, h61);
    			append_dev(div12, t14);
    			append_dev(div12, p2);
    			append_dev(div19, t16);
    			append_dev(div19, div18);
    			append_dev(div18, div17);
    			append_dev(div17, div16);
    			append_dev(div16, div15);
    			append_dev(div15, i2);
    			append_dev(div16, t17);
    			append_dev(div16, h62);
    			append_dev(div16, t19);
    			append_dev(div16, p3);
    			append_dev(div25, t21);
    			append_dev(div25, div24);
    			append_dev(div24, div21);
    			append_dev(div21, div20);
    			append_dev(div20, i3);
    			append_dev(div21, t22);
    			append_dev(div21, h30);
    			append_dev(div21, t24);
    			append_dev(div21, p4);
    			append_dev(div21, t26);
    			append_dev(div21, p5);
    			append_dev(div21, t28);
    			append_dev(div21, a);
    			append_dev(div24, t30);
    			append_dev(div24, div23);
    			append_dev(div23, div22);
    			append_dev(div22, img0);
    			append_dev(div22, t31);
    			append_dev(div22, blockquote);
    			append_dev(blockquote, svg1);
    			append_dev(svg1, polygon1);
    			append_dev(blockquote, t32);
    			append_dev(blockquote, h40);
    			append_dev(blockquote, t34);
    			append_dev(blockquote, p6);
    			append_dev(main, t36);
    			append_dev(main, section1);
    			append_dev(section1, div26);
    			append_dev(div26, svg2);
    			append_dev(svg2, polygon2);
    			append_dev(section1, t37);
    			append_dev(section1, div41);
    			append_dev(div41, div40);
    			append_dev(div40, div27);
    			append_dev(div27, img1);
    			append_dev(div40, t38);
    			append_dev(div40, div39);
    			append_dev(div39, div38);
    			append_dev(div38, div28);
    			append_dev(div28, i4);
    			append_dev(div38, t39);
    			append_dev(div38, h31);
    			append_dev(div38, t41);
    			append_dev(div38, p7);
    			append_dev(div38, t43);
    			append_dev(div38, ul);
    			append_dev(ul, li0);
    			append_dev(li0, div31);
    			append_dev(div31, div29);
    			append_dev(div29, span1);
    			append_dev(span1, i5);
    			append_dev(div31, t44);
    			append_dev(div31, div30);
    			append_dev(div30, h41);
    			append_dev(ul, t46);
    			append_dev(ul, li1);
    			append_dev(li1, div34);
    			append_dev(div34, div32);
    			append_dev(div32, span2);
    			append_dev(span2, i6);
    			append_dev(div34, t47);
    			append_dev(div34, div33);
    			append_dev(div33, h42);
    			append_dev(ul, t49);
    			append_dev(ul, li2);
    			append_dev(li2, div37);
    			append_dev(div37, div35);
    			append_dev(div35, span3);
    			append_dev(span3, i7);
    			append_dev(div37, t50);
    			append_dev(div37, div36);
    			append_dev(div36, h43);
    			append_dev(main, t52);
    			append_dev(main, section2);
    			append_dev(section2, div61);
    			append_dev(div61, div43);
    			append_dev(div43, div42);
    			append_dev(div42, h20);
    			append_dev(div42, t54);
    			append_dev(div42, p8);
    			append_dev(div61, t56);
    			append_dev(div61, div60);
    			append_dev(div60, div47);
    			append_dev(div47, div46);
    			append_dev(div46, img2);
    			append_dev(div46, t57);
    			append_dev(div46, div45);
    			append_dev(div45, h50);
    			append_dev(div45, t59);
    			append_dev(div45, p9);
    			append_dev(div45, t61);
    			append_dev(div45, div44);
    			append_dev(div44, button0);
    			append_dev(button0, i8);
    			append_dev(div44, t62);
    			append_dev(div44, button1);
    			append_dev(button1, i9);
    			append_dev(div44, t63);
    			append_dev(div44, button2);
    			append_dev(button2, i10);
    			append_dev(div60, t64);
    			append_dev(div60, div51);
    			append_dev(div51, div50);
    			append_dev(div50, img3);
    			append_dev(div50, t65);
    			append_dev(div50, div49);
    			append_dev(div49, h51);
    			append_dev(div49, t67);
    			append_dev(div49, p10);
    			append_dev(div49, t69);
    			append_dev(div49, div48);
    			append_dev(div48, button3);
    			append_dev(button3, i11);
    			append_dev(div48, t70);
    			append_dev(div48, button4);
    			append_dev(button4, i12);
    			append_dev(div60, t71);
    			append_dev(div60, div55);
    			append_dev(div55, div54);
    			append_dev(div54, img4);
    			append_dev(div54, t72);
    			append_dev(div54, div53);
    			append_dev(div53, h52);
    			append_dev(div53, t74);
    			append_dev(div53, p11);
    			append_dev(div53, t76);
    			append_dev(div53, div52);
    			append_dev(div52, button5);
    			append_dev(button5, i13);
    			append_dev(div52, t77);
    			append_dev(div52, button6);
    			append_dev(button6, i14);
    			append_dev(div52, t78);
    			append_dev(div52, button7);
    			append_dev(button7, i15);
    			append_dev(div60, t79);
    			append_dev(div60, div59);
    			append_dev(div59, div58);
    			append_dev(div58, img5);
    			append_dev(div58, t80);
    			append_dev(div58, div57);
    			append_dev(div57, h53);
    			append_dev(div57, t82);
    			append_dev(div57, p12);
    			append_dev(div57, t84);
    			append_dev(div57, div56);
    			append_dev(div56, button8);
    			append_dev(button8, i16);
    			append_dev(div56, t85);
    			append_dev(div56, button9);
    			append_dev(button9, i17);
    			append_dev(div56, t86);
    			append_dev(div56, button10);
    			append_dev(button10, i18);
    			append_dev(div56, t87);
    			append_dev(div56, button11);
    			append_dev(button11, i19);
    			append_dev(main, t88);
    			append_dev(main, section3);
    			append_dev(section3, div62);
    			append_dev(div62, svg3);
    			append_dev(svg3, polygon3);
    			append_dev(section3, t89);
    			append_dev(section3, div72);
    			append_dev(div72, div64);
    			append_dev(div64, div63);
    			append_dev(div63, h21);
    			append_dev(div63, t91);
    			append_dev(div63, p13);
    			append_dev(div72, t93);
    			append_dev(div72, div71);
    			append_dev(div71, div66);
    			append_dev(div66, div65);
    			append_dev(div65, i20);
    			append_dev(div66, t94);
    			append_dev(div66, h63);
    			append_dev(div66, t96);
    			append_dev(div66, p14);
    			append_dev(div71, t98);
    			append_dev(div71, div68);
    			append_dev(div68, div67);
    			append_dev(div67, i21);
    			append_dev(div68, t99);
    			append_dev(div68, h54);
    			append_dev(div68, t101);
    			append_dev(div68, p15);
    			append_dev(div71, t103);
    			append_dev(div71, div70);
    			append_dev(div70, div69);
    			append_dev(div69, i22);
    			append_dev(div70, t104);
    			append_dev(div70, h55);
    			append_dev(div70, t106);
    			append_dev(div70, p16);
    			append_dev(main, t108);
    			append_dev(main, section4);
    			append_dev(section4, div81);
    			append_dev(div81, div80);
    			append_dev(div80, div79);
    			append_dev(div79, div78);
    			append_dev(div78, div77);
    			append_dev(div77, h44);
    			append_dev(div77, t110);
    			append_dev(div77, p17);
    			append_dev(div77, t112);
    			append_dev(div77, div73);
    			append_dev(div73, label0);
    			append_dev(div73, t114);
    			append_dev(div73, input0);
    			append_dev(div77, t115);
    			append_dev(div77, div74);
    			append_dev(div74, label1);
    			append_dev(div74, t117);
    			append_dev(div74, input1);
    			append_dev(div77, t118);
    			append_dev(div77, div75);
    			append_dev(div75, label2);
    			append_dev(div75, t120);
    			append_dev(div75, textarea);
    			append_dev(div77, t121);
    			append_dev(div77, div76);
    			append_dev(div76, button12);
    			append_dev(div82, t123);
    			mount_component(footer, div82, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(link_action = link.call(null, a));
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(authnavbar.$$.fragment, local);
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(authnavbar.$$.fragment, local);
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div82);
    			destroy_component(authnavbar);
    			destroy_component(footer);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const team1$1 = "/assets/img/team-1-800x800.jpg";
    const team2$2 = "/assets/img/team-2-800x800.jpg";
    const team3$1 = "/assets/img/team-3-800x800.jpg";
    const team4$1 = "/assets/img/team-4-470x470.png";

    function instance$y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Landing", slots, []);
    	let { location } = $$props;
    	const writable_props = ["location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Landing> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({
    		link,
    		AuthNavbar,
    		Footer,
    		team1: team1$1,
    		team2: team2$2,
    		team3: team3$1,
    		team4: team4$1,
    		location
    	});

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [location];
    }

    class Landing extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$y, create_fragment$y, safe_not_equal, { location: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Landing",
    			options,
    			id: create_fragment$y.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[0] === undefined && !("location" in props)) {
    			console.warn("<Landing> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<Landing>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Landing>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/views/Profile.svelte generated by Svelte v3.26.0 */
    const file$x = "src/views/Profile.svelte";

    function create_fragment$z(ctx) {
    	let div22;
    	let authnavbar;
    	let t0;
    	let main;
    	let section0;
    	let div0;
    	let span0;
    	let t1;
    	let div1;
    	let svg;
    	let polygon;
    	let t2;
    	let section1;
    	let div21;
    	let div20;
    	let div19;
    	let div11;
    	let div3;
    	let div2;
    	let img;
    	let img_src_value;
    	let t3;
    	let div5;
    	let div4;
    	let button;
    	let t5;
    	let div10;
    	let div9;
    	let div6;
    	let span1;
    	let t7;
    	let span2;
    	let t9;
    	let div7;
    	let span3;
    	let t11;
    	let span4;
    	let t13;
    	let div8;
    	let span5;
    	let t15;
    	let span6;
    	let t17;
    	let div15;
    	let h3;
    	let t19;
    	let div12;
    	let i0;
    	let t20;
    	let t21;
    	let div13;
    	let i1;
    	let t22;
    	let t23;
    	let div14;
    	let i2;
    	let t24;
    	let t25;
    	let div18;
    	let div17;
    	let div16;
    	let p;
    	let t27;
    	let a;
    	let t29;
    	let footer;
    	let current;
    	let mounted;
    	let dispose;
    	authnavbar = new AuthNavbar({ $$inline: true });
    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			div22 = element("div");
    			create_component(authnavbar.$$.fragment);
    			t0 = space();
    			main = element("main");
    			section0 = element("section");
    			div0 = element("div");
    			span0 = element("span");
    			t1 = space();
    			div1 = element("div");
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t2 = space();
    			section1 = element("section");
    			div21 = element("div");
    			div20 = element("div");
    			div19 = element("div");
    			div11 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			img = element("img");
    			t3 = space();
    			div5 = element("div");
    			div4 = element("div");
    			button = element("button");
    			button.textContent = "Connect";
    			t5 = space();
    			div10 = element("div");
    			div9 = element("div");
    			div6 = element("div");
    			span1 = element("span");
    			span1.textContent = "22";
    			t7 = space();
    			span2 = element("span");
    			span2.textContent = "Friends";
    			t9 = space();
    			div7 = element("div");
    			span3 = element("span");
    			span3.textContent = "10";
    			t11 = space();
    			span4 = element("span");
    			span4.textContent = "Photos";
    			t13 = space();
    			div8 = element("div");
    			span5 = element("span");
    			span5.textContent = "89";
    			t15 = space();
    			span6 = element("span");
    			span6.textContent = "Comments";
    			t17 = space();
    			div15 = element("div");
    			h3 = element("h3");
    			h3.textContent = "Jenna Stones";
    			t19 = space();
    			div12 = element("div");
    			i0 = element("i");
    			t20 = text("\n                Los Angeles, California");
    			t21 = space();
    			div13 = element("div");
    			i1 = element("i");
    			t22 = text("\n                Solution Manager - Creative Tim Officer");
    			t23 = space();
    			div14 = element("div");
    			i2 = element("i");
    			t24 = text("\n                University of Computer Science");
    			t25 = space();
    			div18 = element("div");
    			div17 = element("div");
    			div16 = element("div");
    			p = element("p");
    			p.textContent = "An artist of considerable range, Jenna the name taken by\n                    Melbourne-raised, Brooklyn-based Nick Murphy writes,\n                    performs and records all of his own music, giving it a warm,\n                    intimate feel with a solid groove structure. An artist of\n                    considerable range.";
    			t27 = space();
    			a = element("a");
    			a.textContent = "Show more";
    			t29 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(span0, "id", "blackOverlay");
    			attr_dev(span0, "class", "w-full h-full absolute opacity-50 bg-black");
    			add_location(span0, file$x, 16, 8, 609);
    			attr_dev(div0, "class", "absolute top-0 w-full h-full bg-center bg-cover");
    			set_style(div0, "background-image", "url(https://images.unsplash.com/photo-1499336315816-097655dcfbda?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2710&q=80)");
    			add_location(div0, file$x, 10, 6, 329);
    			attr_dev(polygon, "class", "text-gray-300 fill-current");
    			attr_dev(polygon, "points", "2560 0 2560 100 0 100");
    			add_location(polygon, file$x, 34, 10, 1160);
    			attr_dev(svg, "class", "absolute bottom-0 overflow-hidden");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			attr_dev(svg, "version", "1.1");
    			attr_dev(svg, "viewBox", "0 0 2560 100");
    			attr_dev(svg, "x", "0");
    			attr_dev(svg, "y", "0");
    			add_location(svg, file$x, 25, 8, 912);
    			attr_dev(div1, "class", "top-auto bottom-0 left-0 right-0 w-full absolute pointer-events-none overflow-hidden h-70-px");
    			set_style(div1, "transform", "translateZ(0)");
    			add_location(div1, file$x, 21, 6, 740);
    			attr_dev(section0, "class", "relative block h-500-px");
    			add_location(section0, file$x, 9, 4, 281);
    			attr_dev(img, "alt", "...");
    			if (img.src !== (img_src_value = team2$3)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "class", "shadow-xl rounded-full h-auto align-middle border-none absolute -m-16 -ml-20 lg:-ml-16 max-w-150-px");
    			add_location(img, file$x, 50, 18, 1772);
    			attr_dev(div2, "class", "relative");
    			add_location(div2, file$x, 49, 16, 1731);
    			attr_dev(div3, "class", "w-full lg:w-3/12 px-4 lg:order-2 flex justify-center");
    			add_location(div3, file$x, 48, 14, 1648);
    			attr_dev(button, "class", "bg-red-500 active:bg-red-600 uppercase text-white font-bold hover:shadow-md shadow text-xs px-4 py-2 rounded outline-none focus:outline-none sm:mr-2 mb-1 ease-linear transition-all duration-150");
    			attr_dev(button, "type", "button");
    			add_location(button, file$x, 61, 18, 2227);
    			attr_dev(div4, "class", "py-6 px-3 mt-32 sm:mt-0");
    			add_location(div4, file$x, 60, 16, 2171);
    			attr_dev(div5, "class", "w-full lg:w-4/12 px-4 lg:order-3 lg:text-right lg:self-center");
    			add_location(div5, file$x, 57, 14, 2048);
    			attr_dev(span1, "class", "text-xl font-bold block uppercase tracking-wide text-gray-700");
    			add_location(span1, file$x, 72, 20, 2813);
    			attr_dev(span2, "class", "text-sm text-gray-500");
    			add_location(span2, file$x, 77, 20, 3006);
    			attr_dev(div6, "class", "mr-4 p-3 text-center");
    			add_location(div6, file$x, 71, 18, 2758);
    			attr_dev(span3, "class", "text-xl font-bold block uppercase tracking-wide text-gray-700");
    			add_location(span3, file$x, 80, 20, 3155);
    			attr_dev(span4, "class", "text-sm text-gray-500");
    			add_location(span4, file$x, 85, 20, 3348);
    			attr_dev(div7, "class", "mr-4 p-3 text-center");
    			add_location(div7, file$x, 79, 18, 3100);
    			attr_dev(span5, "class", "text-xl font-bold block uppercase tracking-wide text-gray-700");
    			add_location(span5, file$x, 88, 20, 3499);
    			attr_dev(span6, "class", "text-sm text-gray-500");
    			add_location(span6, file$x, 93, 20, 3692);
    			attr_dev(div8, "class", "lg:mr-4 p-3 text-center");
    			add_location(div8, file$x, 87, 18, 3441);
    			attr_dev(div9, "class", "flex justify-center py-4 lg:pt-4 pt-8");
    			add_location(div9, file$x, 70, 16, 2688);
    			attr_dev(div10, "class", "w-full lg:w-4/12 px-4 lg:order-1");
    			add_location(div10, file$x, 69, 14, 2625);
    			attr_dev(div11, "class", "flex flex-wrap justify-center");
    			add_location(div11, file$x, 47, 12, 1590);
    			attr_dev(h3, "class", "text-4xl font-semibold leading-normal mb-2 text-gray-800 mb-2");
    			add_location(h3, file$x, 99, 14, 3890);
    			attr_dev(i0, "class", "fas fa-map-marker-alt mr-2 text-lg text-gray-500");
    			add_location(i0, file$x, 107, 16, 4187);
    			attr_dev(div12, "class", "text-sm leading-normal mt-0 mb-2 text-gray-500 font-bold uppercase");
    			add_location(div12, file$x, 104, 14, 4059);
    			attr_dev(i1, "class", "fas fa-briefcase mr-2 text-lg text-gray-500");
    			add_location(i1, file$x, 111, 16, 4382);
    			attr_dev(div13, "class", "mb-2 text-gray-700 mt-10");
    			add_location(div13, file$x, 110, 14, 4327);
    			attr_dev(i2, "class", "fas fa-university mr-2 text-lg text-gray-500");
    			add_location(i2, file$x, 115, 16, 4582);
    			attr_dev(div14, "class", "mb-2 text-gray-700");
    			add_location(div14, file$x, 114, 14, 4533);
    			attr_dev(div15, "class", "text-center mt-12");
    			add_location(div15, file$x, 98, 12, 3844);
    			attr_dev(p, "class", "mb-4 text-lg leading-relaxed text-gray-800");
    			add_location(p, file$x, 122, 18, 4933);
    			attr_dev(a, "href", "#pablo");
    			attr_dev(a, "class", "font-normal text-red-500");
    			add_location(a, file$x, 129, 18, 5378);
    			attr_dev(div16, "class", "w-full lg:w-9/12 px-4");
    			add_location(div16, file$x, 121, 16, 4879);
    			attr_dev(div17, "class", "flex flex-wrap justify-center");
    			add_location(div17, file$x, 120, 14, 4819);
    			attr_dev(div18, "class", "mt-10 py-10 border-t border-gray-300 text-center");
    			add_location(div18, file$x, 119, 12, 4742);
    			attr_dev(div19, "class", "px-6");
    			add_location(div19, file$x, 46, 10, 1559);
    			attr_dev(div20, "class", "relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-xl rounded-lg -mt-64");
    			add_location(div20, file$x, 43, 8, 1424);
    			attr_dev(div21, "class", "container mx-auto px-4");
    			add_location(div21, file$x, 42, 6, 1379);
    			attr_dev(section1, "class", "relative py-16 bg-gray-300");
    			add_location(section1, file$x, 41, 4, 1328);
    			attr_dev(main, "class", "profile-page");
    			add_location(main, file$x, 8, 2, 249);
    			add_location(div22, file$x, 6, 0, 224);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div22, anchor);
    			mount_component(authnavbar, div22, null);
    			append_dev(div22, t0);
    			append_dev(div22, main);
    			append_dev(main, section0);
    			append_dev(section0, div0);
    			append_dev(div0, span0);
    			append_dev(section0, t1);
    			append_dev(section0, div1);
    			append_dev(div1, svg);
    			append_dev(svg, polygon);
    			append_dev(main, t2);
    			append_dev(main, section1);
    			append_dev(section1, div21);
    			append_dev(div21, div20);
    			append_dev(div20, div19);
    			append_dev(div19, div11);
    			append_dev(div11, div3);
    			append_dev(div3, div2);
    			append_dev(div2, img);
    			append_dev(div11, t3);
    			append_dev(div11, div5);
    			append_dev(div5, div4);
    			append_dev(div4, button);
    			append_dev(div11, t5);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, div6);
    			append_dev(div6, span1);
    			append_dev(div6, t7);
    			append_dev(div6, span2);
    			append_dev(div9, t9);
    			append_dev(div9, div7);
    			append_dev(div7, span3);
    			append_dev(div7, t11);
    			append_dev(div7, span4);
    			append_dev(div9, t13);
    			append_dev(div9, div8);
    			append_dev(div8, span5);
    			append_dev(div8, t15);
    			append_dev(div8, span6);
    			append_dev(div19, t17);
    			append_dev(div19, div15);
    			append_dev(div15, h3);
    			append_dev(div15, t19);
    			append_dev(div15, div12);
    			append_dev(div12, i0);
    			append_dev(div12, t20);
    			append_dev(div15, t21);
    			append_dev(div15, div13);
    			append_dev(div13, i1);
    			append_dev(div13, t22);
    			append_dev(div15, t23);
    			append_dev(div15, div14);
    			append_dev(div14, i2);
    			append_dev(div14, t24);
    			append_dev(div19, t25);
    			append_dev(div19, div18);
    			append_dev(div18, div17);
    			append_dev(div17, div16);
    			append_dev(div16, p);
    			append_dev(div16, t27);
    			append_dev(div16, a);
    			append_dev(div22, t29);
    			mount_component(footer, div22, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(a, "click", click_handler$7, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(authnavbar.$$.fragment, local);
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(authnavbar.$$.fragment, local);
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div22);
    			destroy_component(authnavbar);
    			destroy_component(footer);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const team2$3 = "/assets/img/team-2-800x800.jpg";
    const click_handler$7 = e => e.preventDefault();

    function instance$z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Profile", slots, []);
    	let { location } = $$props;
    	const writable_props = ["location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Profile> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({ AuthNavbar, Footer, team2: team2$3, location });

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [location];
    }

    class Profile extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$z, create_fragment$z, safe_not_equal, { location: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Profile",
    			options,
    			id: create_fragment$z.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[0] === undefined && !("location" in props)) {
    			console.warn("<Profile> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<Profile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Profile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/App.svelte generated by Svelte v3.26.0 */

    // (11:0) <Router url="{url}">
    function create_default_slot$2(ctx) {
    	let route0;
    	let t0;
    	let route1;
    	let t1;
    	let route2;
    	let t2;
    	let route3;
    	let t3;
    	let route4;
    	let current;

    	route0 = new Route({
    			props: { path: "admin/*admin", component: Admin },
    			$$inline: true
    		});

    	route1 = new Route({
    			props: { path: "auth/*auth", component: Auth },
    			$$inline: true
    		});

    	route2 = new Route({
    			props: { path: "landing", component: Landing },
    			$$inline: true
    		});

    	route3 = new Route({
    			props: { path: "profile", component: Profile },
    			$$inline: true
    		});

    	route4 = new Route({
    			props: { path: "/", component: Index },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route0.$$.fragment);
    			t0 = space();
    			create_component(route1.$$.fragment);
    			t1 = space();
    			create_component(route2.$$.fragment);
    			t2 = space();
    			create_component(route3.$$.fragment);
    			t3 = space();
    			create_component(route4.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(route0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(route1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(route2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(route3, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(route4, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			transition_in(route2.$$.fragment, local);
    			transition_in(route3.$$.fragment, local);
    			transition_in(route4.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			transition_out(route2.$$.fragment, local);
    			transition_out(route3.$$.fragment, local);
    			transition_out(route4.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(route1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(route2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(route3, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(route4, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(11:0) <Router url=\\\"{url}\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$A(ctx) {
    	let router;
    	let current;

    	router = new Router({
    			props: {
    				url: /*url*/ ctx[0],
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(router.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(router, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const router_changes = {};
    			if (dirty & /*url*/ 1) router_changes.url = /*url*/ ctx[0];

    			if (dirty & /*$$scope*/ 2) {
    				router_changes.$$scope = { dirty, ctx };
    			}

    			router.$set(router_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(router, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("App", slots, []);
    	let { url = "" } = $$props;
    	const writable_props = ["url"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("url" in $$props) $$invalidate(0, url = $$props.url);
    	};

    	$$self.$capture_state = () => ({
    		Router,
    		Route,
    		Admin,
    		Auth,
    		Index,
    		Landing,
    		Profile,
    		url
    	});

    	$$self.$inject_state = $$props => {
    		if ("url" in $$props) $$invalidate(0, url = $$props.url);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [url];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$A, create_fragment$A, safe_not_equal, { url: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$A.name
    		});
    	}

    	get url() {
    		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set url(value) {
    		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const app = new App({
        target: document.body,
        props: {
            name: 'world'
        }
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map

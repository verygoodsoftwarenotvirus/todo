package authorization

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestAuthorizations(T *testing.T) {
	T.Parallel()

	T.Run("service user", func(t *testing.T) {
		t.Parallel()

		assert.False(t, CanSeeAccountAuditLogEntries(serviceUserRoleName))
		assert.False(t, CanSeeAPIClientAuditLogEntries(serviceUserRoleName))
		assert.False(t, CanSeeUserAuditLogEntries(serviceUserRoleName))
		assert.False(t, CanSeeWebhookAuditLogEntries(serviceUserRoleName))
		assert.False(t, CanUpdateUserReputations(serviceUserRoleName))
		assert.False(t, CanSeeUserData(serviceUserRoleName))
		assert.False(t, CanSearchUsers(serviceUserRoleName))
		assert.False(t, CanUpdateAccounts(serviceUserRoleName))
		assert.False(t, CanDeleteAccounts(serviceUserRoleName))
		assert.False(t, CanAddMemberToAccounts(serviceUserRoleName))
		assert.False(t, CanRemoveMemberFromAccounts(serviceUserRoleName))
		assert.False(t, CanTransferAccountToNewOwner(serviceUserRoleName))
		assert.False(t, CanCreateWebhooks(serviceUserRoleName))
		assert.False(t, CanSeeWebhooks(serviceUserRoleName))
		assert.False(t, CanUpdateWebhooks(serviceUserRoleName))
		assert.False(t, CanDeleteWebhooks(serviceUserRoleName))
		assert.False(t, CanCreateAPIClients(serviceUserRoleName))
		assert.False(t, CanSeeAPIClients(serviceUserRoleName))
		assert.False(t, CanDeleteAPIClients(serviceUserRoleName))
		assert.False(t, CanSeeItemsAuditLogEntries(serviceUserRoleName))
		assert.False(t, CanCreateItems(serviceUserRoleName))
		assert.False(t, CanSeeItems(serviceUserRoleName))
		assert.False(t, CanSearchItems(serviceUserRoleName))
		assert.False(t, CanUpdateItems(serviceUserRoleName))
		assert.False(t, CanDeleteItems(serviceUserRoleName))
	})

	T.Run("service admin", func(t *testing.T) {
		t.Parallel()

		assert.True(t, CanSeeAccountAuditLogEntries(serviceAdminRoleName))
		assert.True(t, CanSeeAPIClientAuditLogEntries(serviceAdminRoleName))
		assert.True(t, CanSeeUserAuditLogEntries(serviceAdminRoleName))
		assert.True(t, CanSeeWebhookAuditLogEntries(serviceAdminRoleName))
		assert.True(t, CanUpdateUserReputations(serviceAdminRoleName))
		assert.True(t, CanSeeUserData(serviceAdminRoleName))
		assert.True(t, CanSearchUsers(serviceAdminRoleName))
		assert.True(t, CanUpdateAccounts(serviceAdminRoleName))
		assert.True(t, CanDeleteAccounts(serviceAdminRoleName))
		assert.True(t, CanAddMemberToAccounts(serviceAdminRoleName))
		assert.True(t, CanRemoveMemberFromAccounts(serviceAdminRoleName))
		assert.True(t, CanTransferAccountToNewOwner(serviceAdminRoleName))
		assert.True(t, CanCreateWebhooks(serviceAdminRoleName))
		assert.True(t, CanSeeWebhooks(serviceAdminRoleName))
		assert.True(t, CanUpdateWebhooks(serviceAdminRoleName))
		assert.True(t, CanDeleteWebhooks(serviceAdminRoleName))
		assert.True(t, CanCreateAPIClients(serviceAdminRoleName))
		assert.True(t, CanSeeAPIClients(serviceAdminRoleName))
		assert.True(t, CanDeleteAPIClients(serviceAdminRoleName))
		assert.True(t, CanSeeItemsAuditLogEntries(serviceAdminRoleName))
		assert.True(t, CanCreateItems(serviceAdminRoleName))
		assert.True(t, CanSeeItems(serviceAdminRoleName))
		assert.True(t, CanSearchItems(serviceAdminRoleName))
		assert.True(t, CanUpdateItems(serviceAdminRoleName))
		assert.True(t, CanDeleteItems(serviceAdminRoleName))
	})

	T.Run("account admin", func(t *testing.T) {
		t.Parallel()

		assert.False(t, CanSeeAccountAuditLogEntries(accountAdminRoleName))
		assert.False(t, CanSeeAPIClientAuditLogEntries(accountAdminRoleName))
		assert.False(t, CanSeeUserAuditLogEntries(accountAdminRoleName))
		assert.False(t, CanSeeWebhookAuditLogEntries(accountAdminRoleName))
		assert.False(t, CanUpdateUserReputations(accountAdminRoleName))
		assert.False(t, CanSeeUserData(accountAdminRoleName))
		assert.False(t, CanSearchUsers(accountAdminRoleName))
		assert.True(t, CanUpdateAccounts(accountAdminRoleName))
		assert.True(t, CanDeleteAccounts(accountAdminRoleName))
		assert.True(t, CanAddMemberToAccounts(accountAdminRoleName))
		assert.True(t, CanRemoveMemberFromAccounts(accountAdminRoleName))
		assert.True(t, CanTransferAccountToNewOwner(accountAdminRoleName))
		assert.True(t, CanCreateWebhooks(accountAdminRoleName))
		assert.True(t, CanSeeWebhooks(accountAdminRoleName))
		assert.True(t, CanUpdateWebhooks(accountAdminRoleName))
		assert.True(t, CanDeleteWebhooks(accountAdminRoleName))
		assert.True(t, CanCreateAPIClients(accountAdminRoleName))
		assert.True(t, CanSeeAPIClients(accountAdminRoleName))
		assert.True(t, CanDeleteAPIClients(accountAdminRoleName))
		assert.True(t, CanSeeItemsAuditLogEntries(accountAdminRoleName))
		assert.True(t, CanCreateItems(accountAdminRoleName))
		assert.True(t, CanSeeItems(accountAdminRoleName))
		assert.True(t, CanSearchItems(accountAdminRoleName))
		assert.True(t, CanUpdateItems(accountAdminRoleName))
		assert.True(t, CanDeleteItems(accountAdminRoleName))
	})

	T.Run("account member", func(t *testing.T) {
		t.Parallel()

		assert.False(t, CanSeeAccountAuditLogEntries(accountMemberRoleName))
		assert.False(t, CanSeeAPIClientAuditLogEntries(accountMemberRoleName))
		assert.False(t, CanSeeUserAuditLogEntries(accountMemberRoleName))
		assert.False(t, CanSeeWebhookAuditLogEntries(accountMemberRoleName))
		assert.False(t, CanUpdateUserReputations(accountMemberRoleName))
		assert.False(t, CanSeeUserData(accountMemberRoleName))
		assert.False(t, CanSearchUsers(accountMemberRoleName))
		assert.False(t, CanUpdateAccounts(accountMemberRoleName))
		assert.False(t, CanDeleteAccounts(accountMemberRoleName))
		assert.False(t, CanAddMemberToAccounts(accountMemberRoleName))
		assert.False(t, CanRemoveMemberFromAccounts(accountMemberRoleName))
		assert.False(t, CanTransferAccountToNewOwner(accountMemberRoleName))
		assert.False(t, CanCreateWebhooks(accountMemberRoleName))
		assert.False(t, CanSeeWebhooks(accountMemberRoleName))
		assert.False(t, CanUpdateWebhooks(accountMemberRoleName))
		assert.False(t, CanDeleteWebhooks(accountMemberRoleName))
		assert.False(t, CanCreateAPIClients(accountMemberRoleName))
		assert.False(t, CanSeeAPIClients(accountMemberRoleName))
		assert.False(t, CanDeleteAPIClients(accountMemberRoleName))
		assert.False(t, CanSeeItemsAuditLogEntries(accountMemberRoleName))
		assert.True(t, CanCreateItems(accountMemberRoleName))
		assert.True(t, CanSeeItems(accountMemberRoleName))
		assert.True(t, CanSearchItems(accountMemberRoleName))
		assert.True(t, CanUpdateItems(accountMemberRoleName))
		assert.True(t, CanDeleteItems(accountMemberRoleName))
	})
}

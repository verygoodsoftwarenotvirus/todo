package authorization

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestProvideRBAC(t *testing.T) {
	rbac := initializeRBAC()

	require.False(t, rbac.IsGranted(accountMember.IDStr, ReadAccountAuditLogEntriesPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, ReadAPIClientAuditLogEntriesPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, ReadUserAuditLogEntriesPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, ReadWebhookAuditLogEntriesPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, UpdateUserReputationPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, ReadUserPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, SearchUserPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, UpdateAccountPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, DeleteAccountPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, AddMemberAccountPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, RemoveMemberAccountPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, TransferAccountPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, CreateWebhooksPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, ReadWebhooksPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, UpdateWebhooksPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, DeleteWebhooksPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, CreateAPIClientsPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, ReadAPIClientsPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, DeleteAPIClientsPermission, nil))
	require.False(t, rbac.IsGranted(accountMember.IDStr, ReadItemsAuditLogEntriesPermission, nil))
	require.True(t, rbac.IsGranted(accountMember.IDStr, CreateItemsPermission, nil))
	require.True(t, rbac.IsGranted(accountMember.IDStr, ReadItemsPermission, nil))
	require.True(t, rbac.IsGranted(accountMember.IDStr, SearchItemsPermission, nil))
	require.True(t, rbac.IsGranted(accountMember.IDStr, UpdateItemsPermission, nil))
	require.True(t, rbac.IsGranted(accountMember.IDStr, DeleteItemsPermission, nil))

	require.False(t, rbac.IsGranted(accountAdmin.IDStr, ReadAccountAuditLogEntriesPermission, nil))
	require.False(t, rbac.IsGranted(accountAdmin.IDStr, ReadAPIClientAuditLogEntriesPermission, nil))
	require.False(t, rbac.IsGranted(accountAdmin.IDStr, ReadUserAuditLogEntriesPermission, nil))
	require.False(t, rbac.IsGranted(accountAdmin.IDStr, ReadWebhookAuditLogEntriesPermission, nil))
	require.False(t, rbac.IsGranted(accountAdmin.IDStr, UpdateUserReputationPermission, nil))
	require.False(t, rbac.IsGranted(accountAdmin.IDStr, ReadUserPermission, nil))
	require.False(t, rbac.IsGranted(accountAdmin.IDStr, SearchUserPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, UpdateAccountPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, DeleteAccountPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, AddMemberAccountPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, RemoveMemberAccountPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, TransferAccountPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, CreateWebhooksPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, ReadWebhooksPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, UpdateWebhooksPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, DeleteWebhooksPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, CreateAPIClientsPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, ReadAPIClientsPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, DeleteAPIClientsPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, ReadItemsAuditLogEntriesPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, CreateItemsPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, ReadItemsPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, SearchItemsPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, UpdateItemsPermission, nil))
	require.True(t, rbac.IsGranted(accountAdmin.IDStr, DeleteItemsPermission, nil))

	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, ReadAccountAuditLogEntriesPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, ReadAPIClientAuditLogEntriesPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, ReadUserAuditLogEntriesPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, ReadWebhookAuditLogEntriesPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, UpdateUserReputationPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, ReadUserPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, SearchUserPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, UpdateAccountPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, DeleteAccountPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, AddMemberAccountPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, RemoveMemberAccountPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, TransferAccountPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, CreateWebhooksPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, ReadWebhooksPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, UpdateWebhooksPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, DeleteWebhooksPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, CreateAPIClientsPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, ReadAPIClientsPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, DeleteAPIClientsPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, ReadItemsAuditLogEntriesPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, CreateItemsPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, ReadItemsPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, SearchItemsPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, UpdateItemsPermission, nil))
	require.True(t, rbac.IsGranted(serviceAdmin.IDStr, DeleteItemsPermission, nil))
}

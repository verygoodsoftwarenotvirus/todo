// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package server

import (
	"context"
	"database/sql"

	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/config"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/database"
	config2 "gitlab.com/verygoodsoftwarenotvirus/todo/internal/database/config"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/encoding"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/observability/logging"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/observability/metrics"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/passwords"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/routing/chi"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/search/bleve"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/server"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/services/accounts"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/services/accountsubscriptionplans"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/services/admin"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/services/apiclients"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/services/audit"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/services/auth"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/services/frontend"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/services/items"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/services/users"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/services/webhooks"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/uploads"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/uploads/images"
	"gitlab.com/verygoodsoftwarenotvirus/todo/internal/uploads/storage"
)

// Injectors from build.go:

// Build builds a server.
func Build(ctx context.Context, cfg *config.ServerConfig, logger logging.Logger, dbm database.DataManager, db *sql.DB, authenticator passwords.Authenticator) (*server.HTTPServer, error) {
	serverConfig := cfg.Server
	observabilityConfig := &cfg.Observability
	metricsConfig := observabilityConfig.Metrics
	config3 := &observabilityConfig.Metrics
	instrumentationHandler, err := metrics.ProvideMetricsInstrumentationHandlerForServer(config3, logger)
	if err != nil {
		return nil, err
	}
	authConfig := &cfg.Auth
	userDataManager := database.ProvideUserDataManager(dbm)
	authAuditManager := database.ProvideAuthAuditManager(dbm)
	apiClientDataManager := database.ProvideAPIClientDataManager(dbm)
	accountUserMembershipDataManager := database.ProvideAccountUserMembershipDataManager(dbm)
	cookieConfig := authConfig.Cookies
	configConfig := cfg.Database
	sessionManager, err := config2.ProvideSessionManager(cookieConfig, configConfig, db)
	if err != nil {
		return nil, err
	}
	encodingConfig := cfg.Encoding
	contentType := encoding.ProvideContentType(encodingConfig)
	serverEncoderDecoder := encoding.ProvideServerEncoderDecoder(logger, contentType)
	routeParamManager := chi.NewRouteParamManager()
	authService, err := auth.ProvideService(logger, authConfig, authenticator, userDataManager, authAuditManager, apiClientDataManager, accountUserMembershipDataManager, sessionManager, serverEncoderDecoder, routeParamManager)
	if err != nil {
		return nil, err
	}
	auditLogEntryDataManager := database.ProvideAuditLogEntryDataManager(dbm)
	auditLogEntryDataService := audit.ProvideService(logger, auditLogEntryDataManager, serverEncoderDecoder, routeParamManager)
	accountDataManager := database.ProvideAccountDataManager(dbm)
	unitCounterProvider, err := metrics.ProvideUnitCounterProvider(config3, logger)
	if err != nil {
		return nil, err
	}
	imageUploadProcessor := images.NewImageUploadProcessor(logger)
	uploadsConfig := &cfg.Uploads
	storageConfig := &uploadsConfig.Storage
	uploader, err := storage.NewUploadManager(ctx, logger, storageConfig, routeParamManager)
	if err != nil {
		return nil, err
	}
	uploadManager := uploads.ProvideUploadManager(uploader)
	userDataService := users.ProvideUsersService(authConfig, logger, userDataManager, accountDataManager, authenticator, serverEncoderDecoder, unitCounterProvider, imageUploadProcessor, uploadManager, routeParamManager)
	accountDataService := accounts.ProvideService(logger, accountDataManager, accountUserMembershipDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	accountSubscriptionPlanDataManager := database.ProvidePlanDataManager(dbm)
	accountSubscriptionPlanDataService := accountsubscriptionplans.ProvideService(logger, accountSubscriptionPlanDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	apiclientsConfig := apiclients.ProvideConfig(authConfig)
	apiClientDataService := apiclients.ProvideAPIClientsService(logger, apiClientDataManager, userDataManager, authenticator, serverEncoderDecoder, unitCounterProvider, routeParamManager, apiclientsConfig)
	itemDataManager := database.ProvideItemDataManager(dbm)
	searchConfig := cfg.Search
	indexManagerProvider := bleve.ProvideBleveIndexManagerProvider()
	itemDataService, err := items.ProvideService(logger, itemDataManager, serverEncoderDecoder, unitCounterProvider, searchConfig, indexManagerProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	webhookDataManager := database.ProvideWebhookDataManager(dbm)
	webhookDataService := webhooks.ProvideWebhooksService(logger, webhookDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	adminUserDataManager := database.ProvideAdminUserDataManager(dbm)
	adminAuditManager := database.ProvideAdminAuditManager(dbm)
	adminService := admin.ProvideService(logger, authConfig, authenticator, adminUserDataManager, adminAuditManager, sessionManager, serverEncoderDecoder, routeParamManager)
	frontendConfig := &cfg.Frontend
	frontendAuthService := frontend.ProvideAuthService(authService)
	usersService := frontend.ProvideUsersService(userDataService)
	service := frontend.ProvideService(frontendConfig, logger, frontendAuthService, usersService, dbm, routeParamManager)
	router := chi.NewRouter(logger)
	httpServer, err := server.ProvideHTTPServer(ctx, serverConfig, metricsConfig, instrumentationHandler, authService, auditLogEntryDataService, userDataService, accountDataService, accountSubscriptionPlanDataService, apiClientDataService, itemDataService, webhookDataService, adminService, service, dbm, logger, serverEncoderDecoder, router)
	if err != nil {
		return nil, err
	}
	return httpServer, nil
}
